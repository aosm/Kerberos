; This file is autogenerated.  Please do not modify it.

    export FSp_krb_get_svc_in_tkt[DS]
    export .FSp_krb_get_svc_in_tkt[PR]
    export FSp_krb_get_svc_in_tkt_ProcPtr[RW]

    export FSp_profile_init[DS]
    export .FSp_profile_init[PR]
    export FSp_profile_init_ProcPtr[RW]

    export FSp_profile_init_path[DS]
    export .FSp_profile_init_path[PR]
    export FSp_profile_init_path_ProcPtr[RW]

    export FSp_put_svc_key[DS]
    export .FSp_put_svc_key[PR]
    export FSp_put_svc_key_ProcPtr[RW]

    export FSp_read_service_key[DS]
    export .FSp_read_service_key[PR]
    export FSp_read_service_key_ProcPtr[RW]

    export GSS_C_NT_ANONYMOUS[DS]
    export .GSS_C_NT_ANONYMOUS[PR]
    export GSS_C_NT_ANONYMOUS_ProcPtr[RW]

    export GSS_C_NT_EXPORT_NAME[DS]
    export .GSS_C_NT_EXPORT_NAME[PR]
    export GSS_C_NT_EXPORT_NAME_ProcPtr[RW]

    export GSS_C_NT_HOSTBASED_SERVICE[DS]
    export .GSS_C_NT_HOSTBASED_SERVICE[PR]
    export GSS_C_NT_HOSTBASED_SERVICE_ProcPtr[RW]

    export GSS_C_NT_HOSTBASED_SERVICE_X[DS]
    export .GSS_C_NT_HOSTBASED_SERVICE_X[PR]
    export GSS_C_NT_HOSTBASED_SERVICE_X_ProcPtr[RW]

    export GSS_C_NT_MACHINE_UID_NAME[DS]
    export .GSS_C_NT_MACHINE_UID_NAME[PR]
    export GSS_C_NT_MACHINE_UID_NAME_ProcPtr[RW]

    export GSS_C_NT_STRING_UID_NAME[DS]
    export .GSS_C_NT_STRING_UID_NAME[PR]
    export GSS_C_NT_STRING_UID_NAME_ProcPtr[RW]

    export GSS_C_NT_USER_NAME[DS]
    export .GSS_C_NT_USER_NAME[PR]
    export GSS_C_NT_USER_NAME_ProcPtr[RW]

    export GSS_KRB5_NT_PRINCIPAL_NAME[DS]
    export .GSS_KRB5_NT_PRINCIPAL_NAME[PR]
    export GSS_KRB5_NT_PRINCIPAL_NAME_ProcPtr[RW]

    export K5ClientGetAuthenticatorForServiceDeprecated[DS]
    export .K5ClientGetAuthenticatorForServiceDeprecated[PR]
    export K5ClientGetAuthenticatorForServiceDeprecated_ProcPtr[RW]

    export K5ClientGetTicketForServiceDeprecated[DS]
    export .K5ClientGetTicketForServiceDeprecated[PR]
    export K5ClientGetTicketForServiceDeprecated_ProcPtr[RW]

    export KClientAddCredentialsDeprecated[DS]
    export .KClientAddCredentialsDeprecated[PR]
    export KClientAddCredentialsDeprecated_ProcPtr[RW]

    export KClientAddRealmMapDeprecated[DS]
    export .KClientAddRealmMapDeprecated[PR]
    export KClientAddRealmMapDeprecated_ProcPtr[RW]

    export KClientAddServerMapDeprecated[DS]
    export .KClientAddServerMapDeprecated[PR]
    export KClientAddServerMapDeprecated_ProcPtr[RW]

    export KClientAddServiceKey[DS]
    export .KClientAddServiceKey[PR]
    export KClientAddServiceKey_ProcPtr[RW]

    export KClientCacheInitialTicketDeprecated[DS]
    export .KClientCacheInitialTicketDeprecated[PR]
    export KClientCacheInitialTicketDeprecated_ProcPtr[RW]

    export KClientDecrypt[DS]
    export .KClientDecrypt[PR]
    export KClientDecrypt_ProcPtr[RW]

    export KClientDecryptCompat[DS]
    export .KClientDecryptCompat[PR]
    export KClientDecryptCompat_ProcPtr[RW]

    export KClientDeleteCredentialsDeprecated[DS]
    export .KClientDeleteCredentialsDeprecated[PR]
    export KClientDeleteCredentialsDeprecated_ProcPtr[RW]

    export KClientDeleteRealmMapDeprecated[DS]
    export .KClientDeleteRealmMapDeprecated[PR]
    export KClientDeleteRealmMapDeprecated_ProcPtr[RW]

    export KClientDeleteServerMapDeprecated[DS]
    export .KClientDeleteServerMapDeprecated[PR]
    export KClientDeleteServerMapDeprecated_ProcPtr[RW]

    export KClientDeleteSessionDeprecated[DS]
    export .KClientDeleteSessionDeprecated[PR]
    export KClientDeleteSessionDeprecated_ProcPtr[RW]

    export KClientDisposePrincipal[DS]
    export .KClientDisposePrincipal[PR]
    export KClientDisposePrincipal_ProcPtr[RW]

    export KClientDisposeSession[DS]
    export .KClientDisposeSession[PR]
    export KClientDisposeSession_ProcPtr[RW]

    export KClientDisposeSessionCompat[DS]
    export .KClientDisposeSessionCompat[PR]
    export KClientDisposeSessionCompat_ProcPtr[RW]

    export KClientEncrypt[DS]
    export .KClientEncrypt[PR]
    export KClientEncrypt_ProcPtr[RW]

    export KClientEncryptCompat[DS]
    export .KClientEncryptCompat[PR]
    export KClientEncryptCompat_ProcPtr[RW]

    export KClientGetAuthenticatorForService[DS]
    export .KClientGetAuthenticatorForService[PR]
    export KClientGetAuthenticatorForService_ProcPtr[RW]

    export KClientGetCCacheReference[DS]
    export .KClientGetCCacheReference[PR]
    export KClientGetCCacheReference_ProcPtr[RW]

    export KClientGetClientPrincipal[DS]
    export .KClientGetClientPrincipal[PR]
    export KClientGetClientPrincipal_ProcPtr[RW]

    export KClientGetCredentialsDeprecated[DS]
    export .KClientGetCredentialsDeprecated[PR]
    export KClientGetCredentialsDeprecated_ProcPtr[RW]

    export KClientGetEncryptedServiceReply[DS]
    export .KClientGetEncryptedServiceReply[PR]
    export KClientGetEncryptedServiceReply_ProcPtr[RW]

    export KClientGetErrorTextDeprecated[DS]
    export .KClientGetErrorTextDeprecated[PR]
    export KClientGetErrorTextDeprecated_ProcPtr[RW]

    export KClientGetExpirationTime[DS]
    export .KClientGetExpirationTime[PR]
    export KClientGetExpirationTime_ProcPtr[RW]

    export KClientGetLocalAddress[DS]
    export .KClientGetLocalAddress[PR]
    export KClientGetLocalAddress_ProcPtr[RW]

    export KClientGetLocalRealmDeprecated[DS]
    export .KClientGetLocalRealmDeprecated[PR]
    export KClientGetLocalRealmDeprecated_ProcPtr[RW]

    export KClientGetNthCredentialDeprecated[DS]
    export .KClientGetNthCredentialDeprecated[PR]
    export KClientGetNthCredentialDeprecated_ProcPtr[RW]

    export KClientGetNthRealmMapDeprecated[DS]
    export .KClientGetNthRealmMapDeprecated[PR]
    export KClientGetNthRealmMapDeprecated_ProcPtr[RW]

    export KClientGetNthServerDeprecated[DS]
    export .KClientGetNthServerDeprecated[PR]
    export KClientGetNthServerDeprecated_ProcPtr[RW]

    export KClientGetNthServerMapDeprecated[DS]
    export .KClientGetNthServerMapDeprecated[PR]
    export KClientGetNthServerMapDeprecated_ProcPtr[RW]

    export KClientGetNthServerPortDeprecated[DS]
    export .KClientGetNthServerPortDeprecated[PR]
    export KClientGetNthServerPortDeprecated_ProcPtr[RW]

    export KClientGetNthSessionDeprecated[DS]
    export .KClientGetNthSessionDeprecated[PR]
    export KClientGetNthSessionDeprecated_ProcPtr[RW]

    export KClientGetNumCredentialsDeprecated[DS]
    export .KClientGetNumCredentialsDeprecated[PR]
    export KClientGetNumCredentialsDeprecated_ProcPtr[RW]

    export KClientGetNumSessionsDeprecated[DS]
    export .KClientGetNumSessionsDeprecated[PR]
    export KClientGetNumSessionsDeprecated_ProcPtr[RW]

    export KClientGetProtectedServiceReply[DS]
    export .KClientGetProtectedServiceReply[PR]
    export KClientGetProtectedServiceReply_ProcPtr[RW]

    export KClientGetRealmDeprecated[DS]
    export .KClientGetRealmDeprecated[PR]
    export KClientGetRealmDeprecated_ProcPtr[RW]

    export KClientGetRemoteAddress[DS]
    export .KClientGetRemoteAddress[PR]
    export KClientGetRemoteAddress_ProcPtr[RW]

    export KClientGetServerPrincipal[DS]
    export .KClientGetServerPrincipal[PR]
    export KClientGetServerPrincipal_ProcPtr[RW]

    export KClientGetServiceKey[DS]
    export .KClientGetServiceKey[PR]
    export KClientGetServiceKey_ProcPtr[RW]

    export KClientGetSessionKey[DS]
    export .KClientGetSessionKey[PR]
    export KClientGetSessionKey_ProcPtr[RW]

    export KClientGetSessionKeyCompat[DS]
    export .KClientGetSessionKeyCompat[PR]
    export KClientGetSessionKeyCompat_ProcPtr[RW]

    export KClientGetSessionUserNameCompat[DS]
    export .KClientGetSessionUserNameCompat[PR]
    export KClientGetSessionUserNameCompat_ProcPtr[RW]

    export KClientGetTicketForService[DS]
    export .KClientGetTicketForService[PR]
    export KClientGetTicketForService_ProcPtr[RW]

    export KClientGetTicketForServiceCompat[DS]
    export .KClientGetTicketForServiceCompat[PR]
    export KClientGetTicketForServiceCompat_ProcPtr[RW]

    export KClientGetTicketForServiceWithChecksumCompat[DS]
    export .KClientGetTicketForServiceWithChecksumCompat[PR]
    export KClientGetTicketForServiceWithChecksumCompat_ProcPtr[RW]

    export KClientGetUserNameDeprecated[DS]
    export .KClientGetUserNameDeprecated[PR]
    export KClientGetUserNameDeprecated_ProcPtr[RW]

    export KClientGetVersion[DS]
    export .KClientGetVersion[PR]
    export KClientGetVersion_ProcPtr[RW]

    export KClientKeyFileLogin[DS]
    export .KClientKeyFileLogin[PR]
    export KClientKeyFileLogin_ProcPtr[RW]

    export KClientLogin[DS]
    export .KClientLogin[PR]
    export KClientLogin_ProcPtr[RW]

    export KClientLoginCompat[DS]
    export .KClientLoginCompat[PR]
    export KClientLoginCompat_ProcPtr[RW]

    export KClientLogout[DS]
    export .KClientLogout[PR]
    export KClientLogout_ProcPtr[RW]

    export KClientLogoutCompat[DS]
    export .KClientLogoutCompat[PR]
    export KClientLogoutCompat_ProcPtr[RW]

    export KClientMakeSendAuthCompat[DS]
    export .KClientMakeSendAuthCompat[PR]
    export KClientMakeSendAuthCompat_ProcPtr[RW]

    export KClientNewClientSession[DS]
    export .KClientNewClientSession[PR]
    export KClientNewClientSession_ProcPtr[RW]

    export KClientNewServerSession[DS]
    export .KClientNewServerSession[PR]
    export KClientNewServerSession_ProcPtr[RW]

    export KClientNewSessionCompat[DS]
    export .KClientNewSessionCompat[PR]
    export KClientNewSessionCompat_ProcPtr[RW]

    export KClientPasswordLogin[DS]
    export .KClientPasswordLogin[PR]
    export KClientPasswordLogin_ProcPtr[RW]

    export KClientPasswordLoginCompat[DS]
    export .KClientPasswordLoginCompat[PR]
    export KClientPasswordLoginCompat_ProcPtr[RW]

    export KClientPrincipalToV4String[DS]
    export .KClientPrincipalToV4String[PR]
    export KClientPrincipalToV4String_ProcPtr[RW]

    export KClientPrincipalToV4Triplet[DS]
    export .KClientPrincipalToV4Triplet[PR]
    export KClientPrincipalToV4Triplet_ProcPtr[RW]

    export KClientProtectIntegrity[DS]
    export .KClientProtectIntegrity[PR]
    export KClientProtectIntegrity_ProcPtr[RW]

    export KClientProtectIntegrityCompat[DS]
    export .KClientProtectIntegrityCompat[PR]
    export KClientProtectIntegrityCompat_ProcPtr[RW]

    export KClientSetClientPrincipal[DS]
    export .KClientSetClientPrincipal[PR]
    export KClientSetClientPrincipal_ProcPtr[RW]

    export KClientSetKeyFile[DS]
    export .KClientSetKeyFile[PR]
    export KClientSetKeyFile_ProcPtr[RW]

    export KClientSetLocalAddress[DS]
    export .KClientSetLocalAddress[PR]
    export KClientSetLocalAddress_ProcPtr[RW]

    export KClientSetLocalRealmDeprecated[DS]
    export .KClientSetLocalRealmDeprecated[PR]
    export KClientSetLocalRealmDeprecated_ProcPtr[RW]

    export KClientSetNthServerPortDeprecated[DS]
    export .KClientSetNthServerPortDeprecated[PR]
    export KClientSetNthServerPortDeprecated_ProcPtr[RW]

    export KClientSetRemoteAddress[DS]
    export .KClientSetRemoteAddress[PR]
    export KClientSetRemoteAddress_ProcPtr[RW]

    export KClientSetServerPrincipal[DS]
    export .KClientSetServerPrincipal[PR]
    export KClientSetServerPrincipal_ProcPtr[RW]

    export KClientStatusCompat[DS]
    export .KClientStatusCompat[PR]
    export KClientStatusCompat_ProcPtr[RW]

    export KClientV4StringToPrincipal[DS]
    export .KClientV4StringToPrincipal[PR]
    export KClientV4StringToPrincipal_ProcPtr[RW]

    export KClientVerifyAuthenticator[DS]
    export .KClientVerifyAuthenticator[PR]
    export KClientVerifyAuthenticator_ProcPtr[RW]

    export KClientVerifyEncryptedServiceReply[DS]
    export .KClientVerifyEncryptedServiceReply[PR]
    export KClientVerifyEncryptedServiceReply_ProcPtr[RW]

    export KClientVerifyIntegrity[DS]
    export .KClientVerifyIntegrity[PR]
    export KClientVerifyIntegrity_ProcPtr[RW]

    export KClientVerifyIntegrityCompat[DS]
    export .KClientVerifyIntegrityCompat[PR]
    export KClientVerifyIntegrityCompat_ProcPtr[RW]

    export KClientVerifyProtectedServiceReply[DS]
    export .KClientVerifyProtectedServiceReply[PR]
    export KClientVerifyProtectedServiceReply_ProcPtr[RW]

    export KClientVerifyReplyTicketCompat[DS]
    export .KClientVerifyReplyTicketCompat[PR]
    export KClientVerifyReplyTicketCompat_ProcPtr[RW]

    export KClientVerifyUnencryptedReplyTicketCompat[DS]
    export .KClientVerifyUnencryptedReplyTicketCompat[PR]
    export KClientVerifyUnencryptedReplyTicketCompat_ProcPtr[RW]

    export KClientVersionCompat[DS]
    export .KClientVersionCompat[PR]
    export KClientVersionCompat_ProcPtr[RW]

    export KLAcquireNewTickets[DS]
    export .KLAcquireNewTickets[PR]
    export KLAcquireNewTickets_ProcPtr[RW]

    export KLAcquireNewTicketsWithPassword[DS]
    export .KLAcquireNewTicketsWithPassword[PR]
    export KLAcquireNewTicketsWithPassword_ProcPtr[RW]

    export KLAcquireTickets[DS]
    export .KLAcquireTickets[PR]
    export KLAcquireTickets_ProcPtr[RW]

    export KLAcquireTicketsWithPassword[DS]
    export .KLAcquireTicketsWithPassword[PR]
    export KLAcquireTicketsWithPassword_ProcPtr[RW]

    export KLCacheHasValidTickets[DS]
    export .KLCacheHasValidTickets[PR]
    export KLCacheHasValidTickets_ProcPtr[RW]

    export KLCancelAllDialogs[DS]
    export .KLCancelAllDialogs[PR]
    export KLCancelAllDialogs_ProcPtr[RW]

    export KLChangePassword[DS]
    export .KLChangePassword[PR]
    export KLChangePassword_ProcPtr[RW]

    export KLChangePasswordWithPasswords[DS]
    export .KLChangePasswordWithPasswords[PR]
    export KLChangePasswordWithPasswords_ProcPtr[RW]

    export KLComparePrincipal[DS]
    export .KLComparePrincipal[PR]
    export KLComparePrincipal_ProcPtr[RW]

    export KLCountKerberosRealms[DS]
    export .KLCountKerberosRealms[PR]
    export KLCountKerberosRealms_ProcPtr[RW]

    export KLCreateLoginOptions[DS]
    export .KLCreateLoginOptions[PR]
    export KLCreateLoginOptions_ProcPtr[RW]

    export KLCreatePrincipalFromString[DS]
    export .KLCreatePrincipalFromString[PR]
    export KLCreatePrincipalFromString_ProcPtr[RW]

    export KLCreatePrincipalFromTriplet[DS]
    export .KLCreatePrincipalFromTriplet[PR]
    export KLCreatePrincipalFromTriplet_ProcPtr[RW]

    export KLDestroyTickets[DS]
    export .KLDestroyTickets[PR]
    export KLDestroyTickets_ProcPtr[RW]

    export KLDisposeLoginOptions[DS]
    export .KLDisposeLoginOptions[PR]
    export KLDisposeLoginOptions_ProcPtr[RW]

    export KLDisposePrincipal[DS]
    export .KLDisposePrincipal[PR]
    export KLDisposePrincipal_ProcPtr[RW]

    export KLDisposeString[DS]
    export .KLDisposeString[PR]
    export KLDisposeString_ProcPtr[RW]

    export KLFindKerberosRealmByName[DS]
    export .KLFindKerberosRealmByName[PR]
    export KLFindKerberosRealmByName_ProcPtr[RW]

    export KLGetApplicationOptions[DS]
    export .KLGetApplicationOptions[PR]
    export KLGetApplicationOptions_ProcPtr[RW]

    export KLGetDefaultLoginOption[DS]
    export .KLGetDefaultLoginOption[PR]
    export KLGetDefaultLoginOption_ProcPtr[RW]

    export KLGetDisplayStringFromPrincipal[DS]
    export .KLGetDisplayStringFromPrincipal[PR]
    export KLGetDisplayStringFromPrincipal_ProcPtr[RW]

    export KLGetErrorString[DS]
    export .KLGetErrorString[PR]
    export KLGetErrorString_ProcPtr[RW]

    export KLGetKerberosDefaultRealm[DS]
    export .KLGetKerberosDefaultRealm[PR]
    export KLGetKerberosDefaultRealm_ProcPtr[RW]

    export KLGetKerberosDefaultRealmByName[DS]
    export .KLGetKerberosDefaultRealmByName[PR]
    export KLGetKerberosDefaultRealmByName_ProcPtr[RW]

    export KLGetKerberosRealm[DS]
    export .KLGetKerberosRealm[PR]
    export KLGetKerberosRealm_ProcPtr[RW]

    export KLGetStringFromPrincipal[DS]
    export .KLGetStringFromPrincipal[PR]
    export KLGetStringFromPrincipal_ProcPtr[RW]

    export KLGetTripletFromPrincipal[DS]
    export .KLGetTripletFromPrincipal[PR]
    export KLGetTripletFromPrincipal_ProcPtr[RW]

    export KLHandleError[DS]
    export .KLHandleError[PR]
    export KLHandleError_ProcPtr[RW]

    export KLInsertKerberosRealm[DS]
    export .KLInsertKerberosRealm[PR]
    export KLInsertKerberosRealm_ProcPtr[RW]

    export KLLastChangedTime[DS]
    export .KLLastChangedTime[PR]
    export KLLastChangedTime_ProcPtr[RW]

    export KLLoginOptionsSetForwardable[DS]
    export .KLLoginOptionsSetForwardable[PR]
    export KLLoginOptionsSetForwardable_ProcPtr[RW]

    export KLLoginOptionsSetProxiable[DS]
    export .KLLoginOptionsSetProxiable[PR]
    export KLLoginOptionsSetProxiable_ProcPtr[RW]

    export KLLoginOptionsSetTicketLifetime[DS]
    export .KLLoginOptionsSetTicketLifetime[PR]
    export KLLoginOptionsSetTicketLifetime_ProcPtr[RW]

    export KLRemoveAllKerberosRealms[DS]
    export .KLRemoveAllKerberosRealms[PR]
    export KLRemoveAllKerberosRealms_ProcPtr[RW]

    export KLRemoveKerberosRealm[DS]
    export .KLRemoveKerberosRealm[PR]
    export KLRemoveKerberosRealm_ProcPtr[RW]

    export KLSetApplicationOptions[DS]
    export .KLSetApplicationOptions[PR]
    export KLSetApplicationOptions_ProcPtr[RW]

    export KLSetDefaultLoginOption[DS]
    export .KLSetDefaultLoginOption[PR]
    export KLSetDefaultLoginOption_ProcPtr[RW]

    export KLSetKerberosDefaultRealm[DS]
    export .KLSetKerberosDefaultRealm[PR]
    export KLSetKerberosDefaultRealm_ProcPtr[RW]

    export KLSetKerberosDefaultRealmByName[DS]
    export .KLSetKerberosDefaultRealmByName[PR]
    export KLSetKerberosDefaultRealmByName_ProcPtr[RW]

    export KLSetKerberosRealm[DS]
    export .KLSetKerberosRealm[PR]
    export KLSetKerberosRealm_ProcPtr[RW]

    export KLSetSystemDefaultCache[DS]
    export .KLSetSystemDefaultCache[PR]
    export KLSetSystemDefaultCache_ProcPtr[RW]

    export KLTicketExpirationTime[DS]
    export .KLTicketExpirationTime[PR]
    export KLTicketExpirationTime_ProcPtr[RW]

    export KLTicketStartTime[DS]
    export .KLTicketStartTime[PR]
    export KLTicketStartTime_ProcPtr[RW]

    export KPCreatePreferencesFile[DS]
    export .KPCreatePreferencesFile[PR]
    export KPCreatePreferencesFile_ProcPtr[RW]

    export KPFreeListOfPreferencesFiles[DS]
    export .KPFreeListOfPreferencesFiles[PR]
    export KPFreeListOfPreferencesFiles_ProcPtr[RW]

    export KPGetListOfPreferencesFiles[DS]
    export .KPGetListOfPreferencesFiles[PR]
    export KPGetListOfPreferencesFiles_ProcPtr[RW]

    export KPInitializeWithDefaultKerberosLibraryPreferences[DS]
    export .KPInitializeWithDefaultKerberosLibraryPreferences[PR]
    export KPInitializeWithDefaultKerberosLibraryPreferences_ProcPtr[RW]

    export KPPreferencesFileIsReadable[DS]
    export .KPPreferencesFileIsReadable[PR]
    export KPPreferencesFileIsReadable_ProcPtr[RW]

    export KPPreferencesFileIsWritable[DS]
    export .KPPreferencesFileIsWritable[PR]
    export KPPreferencesFileIsWritable_ProcPtr[RW]

    export KServerAddKeyCompat[DS]
    export .KServerAddKeyCompat[PR]
    export KServerAddKeyCompat_ProcPtr[RW]

    export KServerGetKeyCompat[DS]
    export .KServerGetKeyCompat[PR]
    export KServerGetKeyCompat_ProcPtr[RW]

    export KServerGetReplyTicketCompat[DS]
    export .KServerGetReplyTicketCompat[PR]
    export KServerGetReplyTicketCompat_ProcPtr[RW]

    export KServerGetSessionTimeRemainingCompat[DS]
    export .KServerGetSessionTimeRemainingCompat[PR]
    export KServerGetSessionTimeRemainingCompat_ProcPtr[RW]

    export KServerNewSessionCompat[DS]
    export .KServerNewSessionCompat[PR]
    export KServerNewSessionCompat_ProcPtr[RW]

    export KServerVerifyTicketCompat[DS]
    export .KServerVerifyTicketCompat[PR]
    export KServerVerifyTicketCompat_ProcPtr[RW]

    export __KLChangePasswordWithPasswordsCompat[DS]
    export .__KLChangePasswordWithPasswordsCompat[PR]
    export __KLChangePasswordWithPasswordsCompat_ProcPtr[RW]

    export __cc_ccache_compare_vector[DS]
    export .__cc_ccache_compare_vector[PR]
    export __cc_ccache_compare_vector_ProcPtr[RW]

    export __cc_ccache_destroy_vector[DS]
    export .__cc_ccache_destroy_vector[PR]
    export __cc_ccache_destroy_vector_ProcPtr[RW]

    export __cc_ccache_get_change_time_vector[DS]
    export .__cc_ccache_get_change_time_vector[PR]
    export __cc_ccache_get_change_time_vector_ProcPtr[RW]

    export __cc_ccache_get_credentials_version_vector[DS]
    export .__cc_ccache_get_credentials_version_vector[PR]
    export __cc_ccache_get_credentials_version_vector_ProcPtr[RW]

    export __cc_ccache_get_last_default_time_vector[DS]
    export .__cc_ccache_get_last_default_time_vector[PR]
    export __cc_ccache_get_last_default_time_vector_ProcPtr[RW]

    export __cc_ccache_get_name_vector[DS]
    export .__cc_ccache_get_name_vector[PR]
    export __cc_ccache_get_name_vector_ProcPtr[RW]

    export __cc_ccache_get_principal_vector[DS]
    export .__cc_ccache_get_principal_vector[PR]
    export __cc_ccache_get_principal_vector_ProcPtr[RW]

    export __cc_ccache_iterator_next_vector[DS]
    export .__cc_ccache_iterator_next_vector[PR]
    export __cc_ccache_iterator_next_vector_ProcPtr[RW]

    export __cc_ccache_iterator_release_vector[DS]
    export .__cc_ccache_iterator_release_vector[PR]
    export __cc_ccache_iterator_release_vector_ProcPtr[RW]

    export __cc_ccache_lock_vector[DS]
    export .__cc_ccache_lock_vector[PR]
    export __cc_ccache_lock_vector_ProcPtr[RW]

    export __cc_ccache_move_vector[DS]
    export .__cc_ccache_move_vector[PR]
    export __cc_ccache_move_vector_ProcPtr[RW]

    export __cc_ccache_new_credentials_iterator_vector[DS]
    export .__cc_ccache_new_credentials_iterator_vector[PR]
    export __cc_ccache_new_credentials_iterator_vector_ProcPtr[RW]

    export __cc_ccache_release_vector[DS]
    export .__cc_ccache_release_vector[PR]
    export __cc_ccache_release_vector_ProcPtr[RW]

    export __cc_ccache_remove_credentials_vector[DS]
    export .__cc_ccache_remove_credentials_vector[PR]
    export __cc_ccache_remove_credentials_vector_ProcPtr[RW]

    export __cc_ccache_set_default_vector[DS]
    export .__cc_ccache_set_default_vector[PR]
    export __cc_ccache_set_default_vector_ProcPtr[RW]

    export __cc_ccache_set_principal_vector[DS]
    export .__cc_ccache_set_principal_vector[PR]
    export __cc_ccache_set_principal_vector_ProcPtr[RW]

    export __cc_ccache_store_credentials_vector[DS]
    export .__cc_ccache_store_credentials_vector[PR]
    export __cc_ccache_store_credentials_vector_ProcPtr[RW]

    export __cc_ccache_unlock_vector[DS]
    export .__cc_ccache_unlock_vector[PR]
    export __cc_ccache_unlock_vector_ProcPtr[RW]

    export __cc_close_vector[DS]
    export .__cc_close_vector[PR]
    export __cc_close_vector_ProcPtr[RW]

    export __cc_context_compare_vector[DS]
    export .__cc_context_compare_vector[PR]
    export __cc_context_compare_vector_ProcPtr[RW]

    export __cc_context_create_ccache_vector[DS]
    export .__cc_context_create_ccache_vector[PR]
    export __cc_context_create_ccache_vector_ProcPtr[RW]

    export __cc_context_create_default_ccache_vector[DS]
    export .__cc_context_create_default_ccache_vector[PR]
    export __cc_context_create_default_ccache_vector_ProcPtr[RW]

    export __cc_context_create_new_ccache_vector[DS]
    export .__cc_context_create_new_ccache_vector[PR]
    export __cc_context_create_new_ccache_vector_ProcPtr[RW]

    export __cc_context_get_change_time_vector[DS]
    export .__cc_context_get_change_time_vector[PR]
    export __cc_context_get_change_time_vector_ProcPtr[RW]

    export __cc_context_get_default_ccache_name_vector[DS]
    export .__cc_context_get_default_ccache_name_vector[PR]
    export __cc_context_get_default_ccache_name_vector_ProcPtr[RW]

    export __cc_context_lock_vector[DS]
    export .__cc_context_lock_vector[PR]
    export __cc_context_lock_vector_ProcPtr[RW]

    export __cc_context_new_ccache_iterator_vector[DS]
    export .__cc_context_new_ccache_iterator_vector[PR]
    export __cc_context_new_ccache_iterator_vector_ProcPtr[RW]

    export __cc_context_open_ccache_vector[DS]
    export .__cc_context_open_ccache_vector[PR]
    export __cc_context_open_ccache_vector_ProcPtr[RW]

    export __cc_context_open_default_ccache_vector[DS]
    export .__cc_context_open_default_ccache_vector[PR]
    export __cc_context_open_default_ccache_vector_ProcPtr[RW]

    export __cc_context_release_vector[DS]
    export .__cc_context_release_vector[PR]
    export __cc_context_release_vector_ProcPtr[RW]

    export __cc_context_unlock_vector[DS]
    export .__cc_context_unlock_vector[PR]
    export __cc_context_unlock_vector_ProcPtr[RW]

    export __cc_create_vector[DS]
    export .__cc_create_vector[PR]
    export __cc_create_vector_ProcPtr[RW]

    export __cc_credentials_compare_vector[DS]
    export .__cc_credentials_compare_vector[PR]
    export __cc_credentials_compare_vector_ProcPtr[RW]

    export __cc_credentials_iterator_next_vector[DS]
    export .__cc_credentials_iterator_next_vector[PR]
    export __cc_credentials_iterator_next_vector_ProcPtr[RW]

    export __cc_credentials_iterator_release_vector[DS]
    export .__cc_credentials_iterator_release_vector[PR]
    export __cc_credentials_iterator_release_vector_ProcPtr[RW]

    export __cc_credentials_release_vector[DS]
    export .__cc_credentials_release_vector[PR]
    export __cc_credentials_release_vector_ProcPtr[RW]

    export __cc_destroy_vector[DS]
    export .__cc_destroy_vector[PR]
    export __cc_destroy_vector_ProcPtr[RW]

    export __cc_free_NC_info_vector[DS]
    export .__cc_free_NC_info_vector[PR]
    export __cc_free_NC_info_vector_ProcPtr[RW]

    export __cc_free_creds_vector[DS]
    export .__cc_free_creds_vector[PR]
    export __cc_free_creds_vector_ProcPtr[RW]

    export __cc_free_name_vector[DS]
    export .__cc_free_name_vector[PR]
    export __cc_free_name_vector_ProcPtr[RW]

    export __cc_free_principal_vector[DS]
    export .__cc_free_principal_vector[PR]
    export __cc_free_principal_vector_ProcPtr[RW]

    export __cc_get_NC_info_vector[DS]
    export .__cc_get_NC_info_vector[PR]
    export __cc_get_NC_info_vector_ProcPtr[RW]

    export __cc_get_change_time_vector[DS]
    export .__cc_get_change_time_vector[PR]
    export __cc_get_change_time_vector_ProcPtr[RW]

    export __cc_get_cred_version_vector[DS]
    export .__cc_get_cred_version_vector[PR]
    export __cc_get_cred_version_vector_ProcPtr[RW]

    export __cc_get_name_vector[DS]
    export .__cc_get_name_vector[PR]
    export __cc_get_name_vector_ProcPtr[RW]

    export __cc_get_principal_vector[DS]
    export .__cc_get_principal_vector[PR]
    export __cc_get_principal_vector_ProcPtr[RW]

    export __cc_initialize_vector[DS]
    export .__cc_initialize_vector[PR]
    export __cc_initialize_vector_ProcPtr[RW]

    export __cc_open_vector[DS]
    export .__cc_open_vector[PR]
    export __cc_open_vector_ProcPtr[RW]

    export __cc_remove_cred_vector[DS]
    export .__cc_remove_cred_vector[PR]
    export __cc_remove_cred_vector_ProcPtr[RW]

    export __cc_seq_fetch_NCs_begin_vector[DS]
    export .__cc_seq_fetch_NCs_begin_vector[PR]
    export __cc_seq_fetch_NCs_begin_vector_ProcPtr[RW]

    export __cc_seq_fetch_NCs_end_vector[DS]
    export .__cc_seq_fetch_NCs_end_vector[PR]
    export __cc_seq_fetch_NCs_end_vector_ProcPtr[RW]

    export __cc_seq_fetch_NCs_next_vector[DS]
    export .__cc_seq_fetch_NCs_next_vector[PR]
    export __cc_seq_fetch_NCs_next_vector_ProcPtr[RW]

    export __cc_seq_fetch_creds_begin_vector[DS]
    export .__cc_seq_fetch_creds_begin_vector[PR]
    export __cc_seq_fetch_creds_begin_vector_ProcPtr[RW]

    export __cc_seq_fetch_creds_end_vector[DS]
    export .__cc_seq_fetch_creds_end_vector[PR]
    export __cc_seq_fetch_creds_end_vector_ProcPtr[RW]

    export __cc_seq_fetch_creds_next_vector[DS]
    export .__cc_seq_fetch_creds_next_vector[PR]
    export __cc_seq_fetch_creds_next_vector_ProcPtr[RW]

    export __cc_set_principal_vector[DS]
    export .__cc_set_principal_vector[PR]
    export __cc_set_principal_vector_ProcPtr[RW]

    export __cc_shutdown_vector[DS]
    export .__cc_shutdown_vector[PR]
    export __cc_shutdown_vector_ProcPtr[RW]

    export __cc_store_vector[DS]
    export .__cc_store_vector[PR]
    export __cc_store_vector_ProcPtr[RW]

    export __cc_string_release_vector[DS]
    export .__cc_string_release_vector[PR]
    export __cc_string_release_vector_ProcPtr[RW]

    export add_error_table[DS]
    export .add_error_table[PR]
    export add_error_table_ProcPtr[RW]

    export afs_string_to_key[DS]
    export .afs_string_to_key[PR]
    export afs_string_to_key_ProcPtr[RW]

    export cc_close[DS]
    export .cc_close[PR]
    export cc_close_ProcPtr[RW]

    export cc_create[DS]
    export .cc_create[PR]
    export cc_create_ProcPtr[RW]

    export cc_destroy[DS]
    export .cc_destroy[PR]
    export cc_destroy_ProcPtr[RW]

    export cc_free_NC_info[DS]
    export .cc_free_NC_info[PR]
    export cc_free_NC_info_ProcPtr[RW]

    export cc_free_creds[DS]
    export .cc_free_creds[PR]
    export cc_free_creds_ProcPtr[RW]

    export cc_free_name[DS]
    export .cc_free_name[PR]
    export cc_free_name_ProcPtr[RW]

    export cc_free_principal[DS]
    export .cc_free_principal[PR]
    export cc_free_principal_ProcPtr[RW]

    export cc_get_NC_info[DS]
    export .cc_get_NC_info[PR]
    export cc_get_NC_info_ProcPtr[RW]

    export cc_get_change_time[DS]
    export .cc_get_change_time[PR]
    export cc_get_change_time_ProcPtr[RW]

    export cc_get_cred_version[DS]
    export .cc_get_cred_version[PR]
    export cc_get_cred_version_ProcPtr[RW]

    export cc_get_name[DS]
    export .cc_get_name[PR]
    export cc_get_name_ProcPtr[RW]

    export cc_get_principal[DS]
    export .cc_get_principal[PR]
    export cc_get_principal_ProcPtr[RW]

    export cc_initialize[DS]
    export .cc_initialize[PR]
    export cc_initialize_ProcPtr[RW]

    export cc_open[DS]
    export .cc_open[PR]
    export cc_open_ProcPtr[RW]

    export cc_remove_cred[DS]
    export .cc_remove_cred[PR]
    export cc_remove_cred_ProcPtr[RW]

    export cc_seq_fetch_NCs_begin[DS]
    export .cc_seq_fetch_NCs_begin[PR]
    export cc_seq_fetch_NCs_begin_ProcPtr[RW]

    export cc_seq_fetch_NCs_end[DS]
    export .cc_seq_fetch_NCs_end[PR]
    export cc_seq_fetch_NCs_end_ProcPtr[RW]

    export cc_seq_fetch_NCs_next[DS]
    export .cc_seq_fetch_NCs_next[PR]
    export cc_seq_fetch_NCs_next_ProcPtr[RW]

    export cc_seq_fetch_creds_begin[DS]
    export .cc_seq_fetch_creds_begin[PR]
    export cc_seq_fetch_creds_begin_ProcPtr[RW]

    export cc_seq_fetch_creds_end[DS]
    export .cc_seq_fetch_creds_end[PR]
    export cc_seq_fetch_creds_end_ProcPtr[RW]

    export cc_seq_fetch_creds_next[DS]
    export .cc_seq_fetch_creds_next[PR]
    export cc_seq_fetch_creds_next_ProcPtr[RW]

    export cc_set_principal[DS]
    export .cc_set_principal[PR]
    export cc_set_principal_ProcPtr[RW]

    export cc_shutdown[DS]
    export .cc_shutdown[PR]
    export cc_shutdown_ProcPtr[RW]

    export cc_store[DS]
    export .cc_store[PR]
    export cc_store_ProcPtr[RW]

    export decomp_ticket[DS]
    export .decomp_ticket[PR]
    export decomp_ticket_ProcPtr[RW]

    export des_3cbc_encrypt[DS]
    export .des_3cbc_encrypt[PR]
    export des_3cbc_encrypt_ProcPtr[RW]

    export des_3ecb_encrypt[DS]
    export .des_3ecb_encrypt[PR]
    export des_3ecb_encrypt_ProcPtr[RW]

    export des_cbc_cksum[DS]
    export .des_cbc_cksum[PR]
    export des_cbc_cksum_ProcPtr[RW]

    export des_cbc_encrypt[DS]
    export .des_cbc_encrypt[PR]
    export des_cbc_encrypt_ProcPtr[RW]

    export des_cblock_print_file[DS]
    export .des_cblock_print_file[PR]
    export des_cblock_print_file_ProcPtr[RW]

    export des_check_key_parity[DS]
    export .des_check_key_parity[PR]
    export des_check_key_parity_ProcPtr[RW]

    export des_crypt[DS]
    export .des_crypt[PR]
    export des_crypt_ProcPtr[RW]

    export des_debug[DS]
    export .des_debug[PR]
    export des_debug_ProcPtr[RW]

    export des_ecb_encrypt[DS]
    export .des_ecb_encrypt[PR]
    export des_ecb_encrypt_ProcPtr[RW]

    export des_fcrypt[DS]
    export .des_fcrypt[PR]
    export des_fcrypt_ProcPtr[RW]

    export des_fixup_key_parity[DS]
    export .des_fixup_key_parity[PR]
    export des_fixup_key_parity_ProcPtr[RW]

    export des_generate_random_block[DS]
    export .des_generate_random_block[PR]
    export des_generate_random_block_ProcPtr[RW]

    export des_init_random_number_generator[DS]
    export .des_init_random_number_generator[PR]
    export des_init_random_number_generator_ProcPtr[RW]

    export des_is_weak_key[DS]
    export .des_is_weak_key[PR]
    export des_is_weak_key_ProcPtr[RW]

    export des_key_sched[DS]
    export .des_key_sched[PR]
    export des_key_sched_ProcPtr[RW]

    export des_new_random_key[DS]
    export .des_new_random_key[PR]
    export des_new_random_key_ProcPtr[RW]

    export des_pcbc_encrypt[DS]
    export .des_pcbc_encrypt[PR]
    export des_pcbc_encrypt_ProcPtr[RW]

    export des_quad_cksum[DS]
    export .des_quad_cksum[PR]
    export des_quad_cksum_ProcPtr[RW]

    export des_random_key[DS]
    export .des_random_key[PR]
    export des_random_key_ProcPtr[RW]

    export des_read_password[DS]
    export .des_read_password[PR]
    export des_read_password_ProcPtr[RW]

    export des_read_pw_string[DS]
    export .des_read_pw_string[PR]
    export des_read_pw_string_ProcPtr[RW]

    export des_set_key[DS]
    export .des_set_key[PR]
    export des_set_key_ProcPtr[RW]

    export des_set_random_generator_seed[DS]
    export .des_set_random_generator_seed[PR]
    export des_set_random_generator_seed_ProcPtr[RW]

    export des_set_sequence_number[DS]
    export .des_set_sequence_number[PR]
    export des_set_sequence_number_ProcPtr[RW]

    export des_string_to_key[DS]
    export .des_string_to_key[PR]
    export des_string_to_key_ProcPtr[RW]

    export dest_all_tkts[DS]
    export .dest_all_tkts[PR]
    export dest_all_tkts_ProcPtr[RW]

    export dest_tkt[DS]
    export .dest_tkt[PR]
    export dest_tkt_ProcPtr[RW]

    export error_message[DS]
    export .error_message[PR]
    export error_message_ProcPtr[RW]

    export get_ad_tkt[DS]
    export .get_ad_tkt[PR]
    export get_ad_tkt_ProcPtr[RW]

    export get_pw_tkt[DS]
    export .get_pw_tkt[PR]
    export get_pw_tkt_ProcPtr[RW]

    export gss_accept_sec_context[DS]
    export .gss_accept_sec_context[PR]
    export gss_accept_sec_context_ProcPtr[RW]

    export gss_acquire_cred[DS]
    export .gss_acquire_cred[PR]
    export gss_acquire_cred_ProcPtr[RW]

    export gss_add_cred[DS]
    export .gss_add_cred[PR]
    export gss_add_cred_ProcPtr[RW]

    export gss_add_oid_set_member[DS]
    export .gss_add_oid_set_member[PR]
    export gss_add_oid_set_member_ProcPtr[RW]

    export gss_canonicalize_name[DS]
    export .gss_canonicalize_name[PR]
    export gss_canonicalize_name_ProcPtr[RW]

    export gss_compare_name[DS]
    export .gss_compare_name[PR]
    export gss_compare_name_ProcPtr[RW]

    export gss_context_time[DS]
    export .gss_context_time[PR]
    export gss_context_time_ProcPtr[RW]

    export gss_create_empty_oid_set[DS]
    export .gss_create_empty_oid_set[PR]
    export gss_create_empty_oid_set_ProcPtr[RW]

    export gss_delete_sec_context[DS]
    export .gss_delete_sec_context[PR]
    export gss_delete_sec_context_ProcPtr[RW]

    export gss_display_name[DS]
    export .gss_display_name[PR]
    export gss_display_name_ProcPtr[RW]

    export gss_display_status[DS]
    export .gss_display_status[PR]
    export gss_display_status_ProcPtr[RW]

    export gss_duplicate_name[DS]
    export .gss_duplicate_name[PR]
    export gss_duplicate_name_ProcPtr[RW]

    export gss_export_name[DS]
    export .gss_export_name[PR]
    export gss_export_name_ProcPtr[RW]

    export gss_export_sec_context[DS]
    export .gss_export_sec_context[PR]
    export gss_export_sec_context_ProcPtr[RW]

    export gss_get_mic[DS]
    export .gss_get_mic[PR]
    export gss_get_mic_ProcPtr[RW]

    export gss_import_name[DS]
    export .gss_import_name[PR]
    export gss_import_name_ProcPtr[RW]

    export gss_import_sec_context[DS]
    export .gss_import_sec_context[PR]
    export gss_import_sec_context_ProcPtr[RW]

    export gss_indicate_mechs[DS]
    export .gss_indicate_mechs[PR]
    export gss_indicate_mechs_ProcPtr[RW]

    export gss_init_sec_context[DS]
    export .gss_init_sec_context[PR]
    export gss_init_sec_context_ProcPtr[RW]

    export gss_inquire_context[DS]
    export .gss_inquire_context[PR]
    export gss_inquire_context_ProcPtr[RW]

    export gss_inquire_cred[DS]
    export .gss_inquire_cred[PR]
    export gss_inquire_cred_ProcPtr[RW]

    export gss_inquire_cred_by_mech[DS]
    export .gss_inquire_cred_by_mech[PR]
    export gss_inquire_cred_by_mech_ProcPtr[RW]

    export gss_inquire_names_for_mech[DS]
    export .gss_inquire_names_for_mech[PR]
    export gss_inquire_names_for_mech_ProcPtr[RW]

    export gss_krb5_ccache_name[DS]
    export .gss_krb5_ccache_name[PR]
    export gss_krb5_ccache_name_ProcPtr[RW]

    export gss_oid_to_str[DS]
    export .gss_oid_to_str[PR]
    export gss_oid_to_str_ProcPtr[RW]

    export gss_process_context_token[DS]
    export .gss_process_context_token[PR]
    export gss_process_context_token_ProcPtr[RW]

    export gss_release_buffer[DS]
    export .gss_release_buffer[PR]
    export gss_release_buffer_ProcPtr[RW]

    export gss_release_cred[DS]
    export .gss_release_cred[PR]
    export gss_release_cred_ProcPtr[RW]

    export gss_release_name[DS]
    export .gss_release_name[PR]
    export gss_release_name_ProcPtr[RW]

    export gss_release_oid[DS]
    export .gss_release_oid[PR]
    export gss_release_oid_ProcPtr[RW]

    export gss_release_oid_set[DS]
    export .gss_release_oid_set[PR]
    export gss_release_oid_set_ProcPtr[RW]

    export gss_seal[DS]
    export .gss_seal[PR]
    export gss_seal_ProcPtr[RW]

    export gss_sign[DS]
    export .gss_sign[PR]
    export gss_sign_ProcPtr[RW]

    export gss_str_to_oid[DS]
    export .gss_str_to_oid[PR]
    export gss_str_to_oid_ProcPtr[RW]

    export gss_test_oid_set_member[DS]
    export .gss_test_oid_set_member[PR]
    export gss_test_oid_set_member_ProcPtr[RW]

    export gss_unseal[DS]
    export .gss_unseal[PR]
    export gss_unseal_ProcPtr[RW]

    export gss_unwrap[DS]
    export .gss_unwrap[PR]
    export gss_unwrap_ProcPtr[RW]

    export gss_verify[DS]
    export .gss_verify[PR]
    export gss_verify_ProcPtr[RW]

    export gss_verify_mic[DS]
    export .gss_verify_mic[PR]
    export gss_verify_mic_ProcPtr[RW]

    export gss_wrap[DS]
    export .gss_wrap[PR]
    export gss_wrap_ProcPtr[RW]

    export gss_wrap_size_limit[DS]
    export .gss_wrap_size_limit[PR]
    export gss_wrap_size_limit_ProcPtr[RW]

    export k_isinst[DS]
    export .k_isinst[PR]
    export k_isinst_ProcPtr[RW]

    export k_isname[DS]
    export .k_isname[PR]
    export k_isname_ProcPtr[RW]

    export k_isrealm[DS]
    export .k_isrealm[PR]
    export k_isrealm_ProcPtr[RW]

    export kname_parse[DS]
    export .kname_parse[PR]
    export kname_parse_ProcPtr[RW]

    export kname_unparse[DS]
    export .kname_unparse[PR]
    export kname_unparse_ProcPtr[RW]

    export krb5_425_conv_principal[DS]
    export .krb5_425_conv_principal[PR]
    export krb5_425_conv_principal_ProcPtr[RW]

    export krb5_524_conv_principal[DS]
    export .krb5_524_conv_principal[PR]
    export krb5_524_conv_principal_ProcPtr[RW]

    export krb5_address_compare[DS]
    export .krb5_address_compare[PR]
    export krb5_address_compare_ProcPtr[RW]

    export krb5_address_order[DS]
    export .krb5_address_order[PR]
    export krb5_address_order_ProcPtr[RW]

    export krb5_address_search[DS]
    export .krb5_address_search[PR]
    export krb5_address_search_ProcPtr[RW]

    export krb5_aname_to_localname[DS]
    export .krb5_aname_to_localname[PR]
    export krb5_aname_to_localname_ProcPtr[RW]

    export krb5_auth_con_free[DS]
    export .krb5_auth_con_free[PR]
    export krb5_auth_con_free_ProcPtr[RW]

    export krb5_auth_con_genaddrs[DS]
    export .krb5_auth_con_genaddrs[PR]
    export krb5_auth_con_genaddrs_ProcPtr[RW]

    export krb5_auth_con_getaddrs[DS]
    export .krb5_auth_con_getaddrs[PR]
    export krb5_auth_con_getaddrs_ProcPtr[RW]

    export krb5_auth_con_getauthenticator[DS]
    export .krb5_auth_con_getauthenticator[PR]
    export krb5_auth_con_getauthenticator_ProcPtr[RW]

    export krb5_auth_con_getflags[DS]
    export .krb5_auth_con_getflags[PR]
    export krb5_auth_con_getflags_ProcPtr[RW]

    export krb5_auth_con_getkey[DS]
    export .krb5_auth_con_getkey[PR]
    export krb5_auth_con_getkey_ProcPtr[RW]

    export krb5_auth_con_getlocalseqnumber[DS]
    export .krb5_auth_con_getlocalseqnumber[PR]
    export krb5_auth_con_getlocalseqnumber_ProcPtr[RW]

    export krb5_auth_con_getlocalsubkey[DS]
    export .krb5_auth_con_getlocalsubkey[PR]
    export krb5_auth_con_getlocalsubkey_ProcPtr[RW]

    export krb5_auth_con_getrcache[DS]
    export .krb5_auth_con_getrcache[PR]
    export krb5_auth_con_getrcache_ProcPtr[RW]

    export krb5_auth_con_getremoteseqnumber[DS]
    export .krb5_auth_con_getremoteseqnumber[PR]
    export krb5_auth_con_getremoteseqnumber_ProcPtr[RW]

    export krb5_auth_con_getremotesubkey[DS]
    export .krb5_auth_con_getremotesubkey[PR]
    export krb5_auth_con_getremotesubkey_ProcPtr[RW]

    export krb5_auth_con_init[DS]
    export .krb5_auth_con_init[PR]
    export krb5_auth_con_init_ProcPtr[RW]

    export krb5_auth_con_initivector[DS]
    export .krb5_auth_con_initivector[PR]
    export krb5_auth_con_initivector_ProcPtr[RW]

    export krb5_auth_con_setaddrs[DS]
    export .krb5_auth_con_setaddrs[PR]
    export krb5_auth_con_setaddrs_ProcPtr[RW]

    export krb5_auth_con_setflags[DS]
    export .krb5_auth_con_setflags[PR]
    export krb5_auth_con_setflags_ProcPtr[RW]

    export krb5_auth_con_setports[DS]
    export .krb5_auth_con_setports[PR]
    export krb5_auth_con_setports_ProcPtr[RW]

    export krb5_auth_con_setrcache[DS]
    export .krb5_auth_con_setrcache[PR]
    export krb5_auth_con_setrcache_ProcPtr[RW]

    export krb5_auth_con_setuseruserkey[DS]
    export .krb5_auth_con_setuseruserkey[PR]
    export krb5_auth_con_setuseruserkey_ProcPtr[RW]

    export krb5_build_principal[DS]
    export .krb5_build_principal[PR]
    export krb5_build_principal_ProcPtr[RW]

    export krb5_build_principal_ext[DS]
    export .krb5_build_principal_ext[PR]
    export krb5_build_principal_ext_ProcPtr[RW]

    export krb5_build_principal_va[DS]
    export .krb5_build_principal_va[PR]
    export krb5_build_principal_va_ProcPtr[RW]

    export krb5_calculate_checksum[DS]
    export .krb5_calculate_checksum[PR]
    export krb5_calculate_checksum_ProcPtr[RW]

    export krb5_cc_close[DS]
    export .krb5_cc_close[PR]
    export krb5_cc_close_ProcPtr[RW]

    export krb5_cc_default[DS]
    export .krb5_cc_default[PR]
    export krb5_cc_default_ProcPtr[RW]

    export krb5_cc_default_name[DS]
    export .krb5_cc_default_name[PR]
    export krb5_cc_default_name_ProcPtr[RW]

    export krb5_cc_destroy[DS]
    export .krb5_cc_destroy[PR]
    export krb5_cc_destroy_ProcPtr[RW]

    export krb5_cc_end_seq_get[DS]
    export .krb5_cc_end_seq_get[PR]
    export krb5_cc_end_seq_get_ProcPtr[RW]

    export krb5_cc_gen_new[DS]
    export .krb5_cc_gen_new[PR]
    export krb5_cc_gen_new_ProcPtr[RW]

    export krb5_cc_get_name[DS]
    export .krb5_cc_get_name[PR]
    export krb5_cc_get_name_ProcPtr[RW]

    export krb5_cc_get_principal[DS]
    export .krb5_cc_get_principal[PR]
    export krb5_cc_get_principal_ProcPtr[RW]

    export krb5_cc_get_type[DS]
    export .krb5_cc_get_type[PR]
    export krb5_cc_get_type_ProcPtr[RW]

    export krb5_cc_initialize[DS]
    export .krb5_cc_initialize[PR]
    export krb5_cc_initialize_ProcPtr[RW]

    export krb5_cc_next_cred[DS]
    export .krb5_cc_next_cred[PR]
    export krb5_cc_next_cred_ProcPtr[RW]

    export krb5_cc_remove_cred[DS]
    export .krb5_cc_remove_cred[PR]
    export krb5_cc_remove_cred_ProcPtr[RW]

    export krb5_cc_resolve[DS]
    export .krb5_cc_resolve[PR]
    export krb5_cc_resolve_ProcPtr[RW]

    export krb5_cc_retrieve_cred[DS]
    export .krb5_cc_retrieve_cred[PR]
    export krb5_cc_retrieve_cred_ProcPtr[RW]

    export krb5_cc_set_default_name[DS]
    export .krb5_cc_set_default_name[PR]
    export krb5_cc_set_default_name_ProcPtr[RW]

    export krb5_cc_set_flags[DS]
    export .krb5_cc_set_flags[PR]
    export krb5_cc_set_flags_ProcPtr[RW]

    export krb5_cc_start_seq_get[DS]
    export .krb5_cc_start_seq_get[PR]
    export krb5_cc_start_seq_get_ProcPtr[RW]

    export krb5_cc_store_cred[DS]
    export .krb5_cc_store_cred[PR]
    export krb5_cc_store_cred_ProcPtr[RW]

    export krb5_change_password[DS]
    export .krb5_change_password[PR]
    export krb5_change_password_ProcPtr[RW]

    export krb5_checksum_size[DS]
    export .krb5_checksum_size[PR]
    export krb5_checksum_size_ProcPtr[RW]

    export krb5_cksumtype_to_string[DS]
    export .krb5_cksumtype_to_string[PR]
    export krb5_cksumtype_to_string_ProcPtr[RW]

    export krb5_copy_addresses[DS]
    export .krb5_copy_addresses[PR]
    export krb5_copy_addresses_ProcPtr[RW]

    export krb5_copy_authdata[DS]
    export .krb5_copy_authdata[PR]
    export krb5_copy_authdata_ProcPtr[RW]

    export krb5_copy_authenticator[DS]
    export .krb5_copy_authenticator[PR]
    export krb5_copy_authenticator_ProcPtr[RW]

    export krb5_copy_checksum[DS]
    export .krb5_copy_checksum[PR]
    export krb5_copy_checksum_ProcPtr[RW]

    export krb5_copy_creds[DS]
    export .krb5_copy_creds[PR]
    export krb5_copy_creds_ProcPtr[RW]

    export krb5_copy_data[DS]
    export .krb5_copy_data[PR]
    export krb5_copy_data_ProcPtr[RW]

    export krb5_copy_keyblock[DS]
    export .krb5_copy_keyblock[PR]
    export krb5_copy_keyblock_ProcPtr[RW]

    export krb5_copy_keyblock_contents[DS]
    export .krb5_copy_keyblock_contents[PR]
    export krb5_copy_keyblock_contents_ProcPtr[RW]

    export krb5_copy_principal[DS]
    export .krb5_copy_principal[PR]
    export krb5_copy_principal_ProcPtr[RW]

    export krb5_copy_ticket[DS]
    export .krb5_copy_ticket[PR]
    export krb5_copy_ticket_ProcPtr[RW]

    export krb5_decode_ticket[DS]
    export .krb5_decode_ticket[PR]
    export krb5_decode_ticket_ProcPtr[RW]

    export krb5_decrypt[DS]
    export .krb5_decrypt[PR]
    export krb5_decrypt_ProcPtr[RW]

    export krb5_deltat_to_string[DS]
    export .krb5_deltat_to_string[PR]
    export krb5_deltat_to_string_ProcPtr[RW]

    export krb5_eblock_enctype[DS]
    export .krb5_eblock_enctype[PR]
    export krb5_eblock_enctype_ProcPtr[RW]

    export krb5_encrypt[DS]
    export .krb5_encrypt[PR]
    export krb5_encrypt_ProcPtr[RW]

    export krb5_encrypt_size[DS]
    export .krb5_encrypt_size[PR]
    export krb5_encrypt_size_ProcPtr[RW]

    export krb5_enctype_to_string[DS]
    export .krb5_enctype_to_string[PR]
    export krb5_enctype_to_string_ProcPtr[RW]

    export krb5_finish_key[DS]
    export .krb5_finish_key[PR]
    export krb5_finish_key_ProcPtr[RW]

    export krb5_finish_random_key[DS]
    export .krb5_finish_random_key[PR]
    export krb5_finish_random_key_ProcPtr[RW]

    export krb5_free_addresses[DS]
    export .krb5_free_addresses[PR]
    export krb5_free_addresses_ProcPtr[RW]

    export krb5_free_ap_rep_enc_part[DS]
    export .krb5_free_ap_rep_enc_part[PR]
    export krb5_free_ap_rep_enc_part_ProcPtr[RW]

    export krb5_free_authdata[DS]
    export .krb5_free_authdata[PR]
    export krb5_free_authdata_ProcPtr[RW]

    export krb5_free_authenticator[DS]
    export .krb5_free_authenticator[PR]
    export krb5_free_authenticator_ProcPtr[RW]

    export krb5_free_checksum[DS]
    export .krb5_free_checksum[PR]
    export krb5_free_checksum_ProcPtr[RW]

    export krb5_free_checksum_contents[DS]
    export .krb5_free_checksum_contents[PR]
    export krb5_free_checksum_contents_ProcPtr[RW]

    export krb5_free_cksumtypes[DS]
    export .krb5_free_cksumtypes[PR]
    export krb5_free_cksumtypes_ProcPtr[RW]

    export krb5_free_context[DS]
    export .krb5_free_context[PR]
    export krb5_free_context_ProcPtr[RW]

    export krb5_free_cred_contents[DS]
    export .krb5_free_cred_contents[PR]
    export krb5_free_cred_contents_ProcPtr[RW]

    export krb5_free_creds[DS]
    export .krb5_free_creds[PR]
    export krb5_free_creds_ProcPtr[RW]

    export krb5_free_data[DS]
    export .krb5_free_data[PR]
    export krb5_free_data_ProcPtr[RW]

    export krb5_free_data_contents[DS]
    export .krb5_free_data_contents[PR]
    export krb5_free_data_contents_ProcPtr[RW]

    export krb5_free_default_realm[DS]
    export .krb5_free_default_realm[PR]
    export krb5_free_default_realm_ProcPtr[RW]

    export krb5_free_error[DS]
    export .krb5_free_error[PR]
    export krb5_free_error_ProcPtr[RW]

    export krb5_free_host_realm[DS]
    export .krb5_free_host_realm[PR]
    export krb5_free_host_realm_ProcPtr[RW]

    export krb5_free_keyblock[DS]
    export .krb5_free_keyblock[PR]
    export krb5_free_keyblock_ProcPtr[RW]

    export krb5_free_keyblock_contents[DS]
    export .krb5_free_keyblock_contents[PR]
    export krb5_free_keyblock_contents_ProcPtr[RW]

    export krb5_free_principal[DS]
    export .krb5_free_principal[PR]
    export krb5_free_principal_ProcPtr[RW]

    export krb5_free_tgt_creds[DS]
    export .krb5_free_tgt_creds[PR]
    export krb5_free_tgt_creds_ProcPtr[RW]

    export krb5_free_ticket[DS]
    export .krb5_free_ticket[PR]
    export krb5_free_ticket_ProcPtr[RW]

    export krb5_free_unparsed_name[DS]
    export .krb5_free_unparsed_name[PR]
    export krb5_free_unparsed_name_ProcPtr[RW]

    export krb5_fwd_tgt_creds[DS]
    export .krb5_fwd_tgt_creds[PR]
    export krb5_fwd_tgt_creds_ProcPtr[RW]

    export krb5_get_credentials[DS]
    export .krb5_get_credentials[PR]
    export krb5_get_credentials_ProcPtr[RW]

    export krb5_get_credentials_renew[DS]
    export .krb5_get_credentials_renew[PR]
    export krb5_get_credentials_renew_ProcPtr[RW]

    export krb5_get_credentials_validate[DS]
    export .krb5_get_credentials_validate[PR]
    export krb5_get_credentials_validate_ProcPtr[RW]

    export krb5_get_default_realm[DS]
    export .krb5_get_default_realm[PR]
    export krb5_get_default_realm_ProcPtr[RW]

    export krb5_get_host_realm[DS]
    export .krb5_get_host_realm[PR]
    export krb5_get_host_realm_ProcPtr[RW]

    export krb5_get_in_tkt[DS]
    export .krb5_get_in_tkt[PR]
    export krb5_get_in_tkt_ProcPtr[RW]

    export krb5_get_in_tkt_with_keytab[DS]
    export .krb5_get_in_tkt_with_keytab[PR]
    export krb5_get_in_tkt_with_keytab_ProcPtr[RW]

    export krb5_get_in_tkt_with_password[DS]
    export .krb5_get_in_tkt_with_password[PR]
    export krb5_get_in_tkt_with_password_ProcPtr[RW]

    export krb5_get_in_tkt_with_skey[DS]
    export .krb5_get_in_tkt_with_skey[PR]
    export krb5_get_in_tkt_with_skey_ProcPtr[RW]

    export krb5_get_init_creds_keytab[DS]
    export .krb5_get_init_creds_keytab[PR]
    export krb5_get_init_creds_keytab_ProcPtr[RW]

    export krb5_get_init_creds_opt_init[DS]
    export .krb5_get_init_creds_opt_init[PR]
    export krb5_get_init_creds_opt_init_ProcPtr[RW]

    export krb5_get_init_creds_opt_set_address_list[DS]
    export .krb5_get_init_creds_opt_set_address_list[PR]
    export krb5_get_init_creds_opt_set_address_list_ProcPtr[RW]

    export krb5_get_init_creds_opt_set_etype_list[DS]
    export .krb5_get_init_creds_opt_set_etype_list[PR]
    export krb5_get_init_creds_opt_set_etype_list_ProcPtr[RW]

    export krb5_get_init_creds_opt_set_forwardable[DS]
    export .krb5_get_init_creds_opt_set_forwardable[PR]
    export krb5_get_init_creds_opt_set_forwardable_ProcPtr[RW]

    export krb5_get_init_creds_opt_set_preauth_list[DS]
    export .krb5_get_init_creds_opt_set_preauth_list[PR]
    export krb5_get_init_creds_opt_set_preauth_list_ProcPtr[RW]

    export krb5_get_init_creds_opt_set_proxiable[DS]
    export .krb5_get_init_creds_opt_set_proxiable[PR]
    export krb5_get_init_creds_opt_set_proxiable_ProcPtr[RW]

    export krb5_get_init_creds_opt_set_renew_life[DS]
    export .krb5_get_init_creds_opt_set_renew_life[PR]
    export krb5_get_init_creds_opt_set_renew_life_ProcPtr[RW]

    export krb5_get_init_creds_opt_set_salt[DS]
    export .krb5_get_init_creds_opt_set_salt[PR]
    export krb5_get_init_creds_opt_set_salt_ProcPtr[RW]

    export krb5_get_init_creds_opt_set_tkt_life[DS]
    export .krb5_get_init_creds_opt_set_tkt_life[PR]
    export krb5_get_init_creds_opt_set_tkt_life_ProcPtr[RW]

    export krb5_get_init_creds_password[DS]
    export .krb5_get_init_creds_password[PR]
    export krb5_get_init_creds_password_ProcPtr[RW]

    export krb5_get_profile[DS]
    export .krb5_get_profile[PR]
    export krb5_get_profile_ProcPtr[RW]

    export krb5_get_prompt_types[DS]
    export .krb5_get_prompt_types[PR]
    export krb5_get_prompt_types_ProcPtr[RW]

    export krb5_get_renewed_creds[DS]
    export .krb5_get_renewed_creds[PR]
    export krb5_get_renewed_creds_ProcPtr[RW]

    export krb5_get_server_rcache[DS]
    export .krb5_get_server_rcache[PR]
    export krb5_get_server_rcache_ProcPtr[RW]

    export krb5_get_time_offsets[DS]
    export .krb5_get_time_offsets[PR]
    export krb5_get_time_offsets_ProcPtr[RW]

    export krb5_get_validated_creds[DS]
    export .krb5_get_validated_creds[PR]
    export krb5_get_validated_creds_ProcPtr[RW]

    export krb5_init_context[DS]
    export .krb5_init_context[PR]
    export krb5_init_context_ProcPtr[RW]

    export krb5_init_random_key[DS]
    export .krb5_init_random_key[PR]
    export krb5_init_random_key_ProcPtr[RW]

    export krb5_kt_add_entry[DS]
    export .krb5_kt_add_entry[PR]
    export krb5_kt_add_entry_ProcPtr[RW]

    export krb5_kt_default[DS]
    export .krb5_kt_default[PR]
    export krb5_kt_default_ProcPtr[RW]

    export krb5_kt_read_service_key[DS]
    export .krb5_kt_read_service_key[PR]
    export krb5_kt_read_service_key_ProcPtr[RW]

    export krb5_kt_remove_entry[DS]
    export .krb5_kt_remove_entry[PR]
    export krb5_kt_remove_entry_ProcPtr[RW]

    export krb5_kt_resolve[DS]
    export .krb5_kt_resolve[PR]
    export krb5_kt_resolve_ProcPtr[RW]

    export krb5_kuserok[DS]
    export .krb5_kuserok[PR]
    export krb5_kuserok_ProcPtr[RW]

    export krb5_mk_error[DS]
    export .krb5_mk_error[PR]
    export krb5_mk_error_ProcPtr[RW]

    export krb5_mk_priv[DS]
    export .krb5_mk_priv[PR]
    export krb5_mk_priv_ProcPtr[RW]

    export krb5_mk_rep[DS]
    export .krb5_mk_rep[PR]
    export krb5_mk_rep_ProcPtr[RW]

    export krb5_mk_req[DS]
    export .krb5_mk_req[PR]
    export krb5_mk_req_ProcPtr[RW]

    export krb5_mk_req_extended[DS]
    export .krb5_mk_req_extended[PR]
    export krb5_mk_req_extended_ProcPtr[RW]

    export krb5_mk_safe[DS]
    export .krb5_mk_safe[PR]
    export krb5_mk_safe_ProcPtr[RW]

    export krb5_os_localaddr[DS]
    export .krb5_os_localaddr[PR]
    export krb5_os_localaddr_ProcPtr[RW]

    export krb5_parse_name[DS]
    export .krb5_parse_name[PR]
    export krb5_parse_name_ProcPtr[RW]

    export krb5_principal_compare[DS]
    export .krb5_principal_compare[PR]
    export krb5_principal_compare_ProcPtr[RW]

    export krb5_process_key[DS]
    export .krb5_process_key[PR]
    export krb5_process_key_ProcPtr[RW]

    export krb5_random_key[DS]
    export .krb5_random_key[PR]
    export krb5_random_key_ProcPtr[RW]

    export krb5_rd_cred[DS]
    export .krb5_rd_cred[PR]
    export krb5_rd_cred_ProcPtr[RW]

    export krb5_rd_error[DS]
    export .krb5_rd_error[PR]
    export krb5_rd_error_ProcPtr[RW]

    export krb5_rd_priv[DS]
    export .krb5_rd_priv[PR]
    export krb5_rd_priv_ProcPtr[RW]

    export krb5_rd_rep[DS]
    export .krb5_rd_rep[PR]
    export krb5_rd_rep_ProcPtr[RW]

    export krb5_rd_req[DS]
    export .krb5_rd_req[PR]
    export krb5_rd_req_ProcPtr[RW]

    export krb5_rd_safe[DS]
    export .krb5_rd_safe[PR]
    export krb5_rd_safe_ProcPtr[RW]

    export krb5_read_password[DS]
    export .krb5_read_password[PR]
    export krb5_read_password_ProcPtr[RW]

    export krb5_recvauth[DS]
    export .krb5_recvauth[PR]
    export krb5_recvauth_ProcPtr[RW]

    export krb5_salttype_to_string[DS]
    export .krb5_salttype_to_string[PR]
    export krb5_salttype_to_string_ProcPtr[RW]

    export krb5_sendauth[DS]
    export .krb5_sendauth[PR]
    export krb5_sendauth_ProcPtr[RW]

    export krb5_sname_to_principal[DS]
    export .krb5_sname_to_principal[PR]
    export krb5_sname_to_principal_ProcPtr[RW]

    export krb5_string_to_cksumtype[DS]
    export .krb5_string_to_cksumtype[PR]
    export krb5_string_to_cksumtype_ProcPtr[RW]

    export krb5_string_to_deltat[DS]
    export .krb5_string_to_deltat[PR]
    export krb5_string_to_deltat_ProcPtr[RW]

    export krb5_string_to_enctype[DS]
    export .krb5_string_to_enctype[PR]
    export krb5_string_to_enctype_ProcPtr[RW]

    export krb5_string_to_key[DS]
    export .krb5_string_to_key[PR]
    export krb5_string_to_key_ProcPtr[RW]

    export krb5_string_to_salttype[DS]
    export .krb5_string_to_salttype[PR]
    export krb5_string_to_salttype_ProcPtr[RW]

    export krb5_string_to_timestamp[DS]
    export .krb5_string_to_timestamp[PR]
    export krb5_string_to_timestamp_ProcPtr[RW]

    export krb5_timeofday[DS]
    export .krb5_timeofday[PR]
    export krb5_timeofday_ProcPtr[RW]

    export krb5_timestamp_to_sfstring[DS]
    export .krb5_timestamp_to_sfstring[PR]
    export krb5_timestamp_to_sfstring_ProcPtr[RW]

    export krb5_timestamp_to_string[DS]
    export .krb5_timestamp_to_string[PR]
    export krb5_timestamp_to_string_ProcPtr[RW]

    export krb5_unparse_name[DS]
    export .krb5_unparse_name[PR]
    export krb5_unparse_name_ProcPtr[RW]

    export krb5_unparse_name_ext[DS]
    export .krb5_unparse_name_ext[PR]
    export krb5_unparse_name_ext_ProcPtr[RW]

    export krb5_us_timeofday[DS]
    export .krb5_us_timeofday[PR]
    export krb5_us_timeofday_ProcPtr[RW]

    export krb5_use_enctype[DS]
    export .krb5_use_enctype[PR]
    export krb5_use_enctype_ProcPtr[RW]

    export krb5_verify_checksum[DS]
    export .krb5_verify_checksum[PR]
    export krb5_verify_checksum_ProcPtr[RW]

    export krb5_verify_init_creds[DS]
    export .krb5_verify_init_creds[PR]
    export krb5_verify_init_creds_ProcPtr[RW]

    export krb5_verify_init_creds_opt_init[DS]
    export .krb5_verify_init_creds_opt_init[PR]
    export krb5_verify_init_creds_opt_init_ProcPtr[RW]

    export krb5_verify_init_creds_opt_set_ap_req_nofail[DS]
    export .krb5_verify_init_creds_opt_set_ap_req_nofail[PR]
    export krb5_verify_init_creds_opt_set_ap_req_nofail_ProcPtr[RW]

    export krb_change_password[DS]
    export .krb_change_password[PR]
    export krb_change_password_ProcPtr[RW]

    export krb_check_auth[DS]
    export .krb_check_auth[PR]
    export krb_check_auth_ProcPtr[RW]

    export krb_delete_cred[DS]
    export .krb_delete_cred[PR]
    export krb_delete_cred_ProcPtr[RW]

    export krb_err_txt[DS]
    export .krb_err_txt[PR]
    export krb_err_txt_ProcPtr[RW]

    export krb_get_admhst[DS]
    export .krb_get_admhst[PR]
    export krb_get_admhst_ProcPtr[RW]

    export krb_get_cred[DS]
    export .krb_get_cred[PR]
    export krb_get_cred_ProcPtr[RW]

    export krb_get_err_text[DS]
    export .krb_get_err_text[PR]
    export krb_get_err_text_ProcPtr[RW]

    export krb_get_in_tkt[DS]
    export .krb_get_in_tkt[PR]
    export krb_get_in_tkt_ProcPtr[RW]

    export krb_get_in_tkt_creds[DS]
    export .krb_get_in_tkt_creds[PR]
    export krb_get_in_tkt_creds_ProcPtr[RW]

    export krb_get_krbhst[DS]
    export .krb_get_krbhst[PR]
    export krb_get_krbhst_ProcPtr[RW]

    export krb_get_lrealm[DS]
    export .krb_get_lrealm[PR]
    export krb_get_lrealm_ProcPtr[RW]

    export krb_get_nth_cred[DS]
    export .krb_get_nth_cred[PR]
    export krb_get_nth_cred_ProcPtr[RW]

    export krb_get_num_cred[DS]
    export .krb_get_num_cred[PR]
    export krb_get_num_cred_ProcPtr[RW]

    export krb_get_phost[DS]
    export .krb_get_phost[PR]
    export krb_get_phost_ProcPtr[RW]

    export krb_get_profile[DS]
    export .krb_get_profile[PR]
    export krb_get_profile_ProcPtr[RW]

    export krb_get_pw_in_tkt[DS]
    export .krb_get_pw_in_tkt[PR]
    export krb_get_pw_in_tkt_ProcPtr[RW]

    export krb_get_pw_in_tkt_creds[DS]
    export .krb_get_pw_in_tkt_creds[PR]
    export krb_get_pw_in_tkt_creds_ProcPtr[RW]

    export krb_get_svc_in_tkt[DS]
    export .krb_get_svc_in_tkt[PR]
    export krb_get_svc_in_tkt_ProcPtr[RW]

    export krb_get_tf_fullname[DS]
    export .krb_get_tf_fullname[PR]
    export krb_get_tf_fullname_ProcPtr[RW]

    export krb_get_tf_realm[DS]
    export .krb_get_tf_realm[PR]
    export krb_get_tf_realm_ProcPtr[RW]

    export krb_get_ticket_for_service[DS]
    export .krb_get_ticket_for_service[PR]
    export krb_get_ticket_for_service_ProcPtr[RW]

    export krb_life_to_time[DS]
    export .krb_life_to_time[PR]
    export krb_life_to_time_ProcPtr[RW]

    export krb_mk_auth[DS]
    export .krb_mk_auth[PR]
    export krb_mk_auth_ProcPtr[RW]

    export krb_mk_err[DS]
    export .krb_mk_err[PR]
    export krb_mk_err_ProcPtr[RW]

    export krb_mk_priv[DS]
    export .krb_mk_priv[PR]
    export krb_mk_priv_ProcPtr[RW]

    export krb_mk_req[DS]
    export .krb_mk_req[PR]
    export krb_mk_req_ProcPtr[RW]

    export krb_mk_req_creds[DS]
    export .krb_mk_req_creds[PR]
    export krb_mk_req_creds_ProcPtr[RW]

    export krb_mk_safe[DS]
    export .krb_mk_safe[PR]
    export krb_mk_safe_ProcPtr[RW]

    export krb_rd_err[DS]
    export .krb_rd_err[PR]
    export krb_rd_err_ProcPtr[RW]

    export krb_rd_priv[DS]
    export .krb_rd_priv[PR]
    export krb_rd_priv_ProcPtr[RW]

    export krb_rd_req[DS]
    export .krb_rd_req[PR]
    export krb_rd_req_ProcPtr[RW]

    export krb_rd_req_int[DS]
    export .krb_rd_req_int[PR]
    export krb_rd_req_int_ProcPtr[RW]

    export krb_rd_safe[DS]
    export .krb_rd_safe[PR]
    export krb_rd_safe_ProcPtr[RW]

    export krb_realmofhost[DS]
    export .krb_realmofhost[PR]
    export krb_realmofhost_ProcPtr[RW]

    export krb_recvauth[DS]
    export .krb_recvauth[PR]
    export krb_recvauth_ProcPtr[RW]

    export krb_sendauth[DS]
    export .krb_sendauth[PR]
    export krb_sendauth_ProcPtr[RW]

    export krb_set_lifetime[DS]
    export .krb_set_lifetime[PR]
    export krb_set_lifetime_ProcPtr[RW]

    export krb_set_tkt_string[DS]
    export .krb_set_tkt_string[PR]
    export krb_set_tkt_string_ProcPtr[RW]

    export krb_time_to_life[DS]
    export .krb_time_to_life[PR]
    export krb_time_to_life_ProcPtr[RW]

    export make_key_sched[DS]
    export .make_key_sched[PR]
    export make_key_sched_ProcPtr[RW]

    export profile_abandon[DS]
    export .profile_abandon[PR]
    export profile_abandon_ProcPtr[RW]

    export profile_add_relation[DS]
    export .profile_add_relation[PR]
    export profile_add_relation_ProcPtr[RW]

    export profile_clear_relation[DS]
    export .profile_clear_relation[PR]
    export profile_clear_relation_ProcPtr[RW]

    export profile_flush[DS]
    export .profile_flush[PR]
    export profile_flush_ProcPtr[RW]

    export profile_free_list[DS]
    export .profile_free_list[PR]
    export profile_free_list_ProcPtr[RW]

    export profile_get_boolean[DS]
    export .profile_get_boolean[PR]
    export profile_get_boolean_ProcPtr[RW]

    export profile_get_integer[DS]
    export .profile_get_integer[PR]
    export profile_get_integer_ProcPtr[RW]

    export profile_get_relation_names[DS]
    export .profile_get_relation_names[PR]
    export profile_get_relation_names_ProcPtr[RW]

    export profile_get_string[DS]
    export .profile_get_string[PR]
    export profile_get_string_ProcPtr[RW]

    export profile_get_subsection_names[DS]
    export .profile_get_subsection_names[PR]
    export profile_get_subsection_names_ProcPtr[RW]

    export profile_get_values[DS]
    export .profile_get_values[PR]
    export profile_get_values_ProcPtr[RW]

    export profile_init[DS]
    export .profile_init[PR]
    export profile_init_ProcPtr[RW]

    export profile_init_path[DS]
    export .profile_init_path[PR]
    export profile_init_path_ProcPtr[RW]

    export profile_iterator[DS]
    export .profile_iterator[PR]
    export profile_iterator_ProcPtr[RW]

    export profile_iterator_create[DS]
    export .profile_iterator_create[PR]
    export profile_iterator_create_ProcPtr[RW]

    export profile_iterator_free[DS]
    export .profile_iterator_free[PR]
    export profile_iterator_free_ProcPtr[RW]

    export profile_release[DS]
    export .profile_release[PR]
    export profile_release_ProcPtr[RW]

    export profile_release_string[DS]
    export .profile_release_string[PR]
    export profile_release_string_ProcPtr[RW]

    export profile_rename_section[DS]
    export .profile_rename_section[PR]
    export profile_rename_section_ProcPtr[RW]

    export profile_ser_externalize[DS]
    export .profile_ser_externalize[PR]
    export profile_ser_externalize_ProcPtr[RW]

    export profile_ser_internalize[DS]
    export .profile_ser_internalize[PR]
    export profile_ser_internalize_ProcPtr[RW]

    export profile_ser_size[DS]
    export .profile_ser_size[PR]
    export profile_ser_size_ProcPtr[RW]

    export profile_update_relation[DS]
    export .profile_update_relation[PR]
    export profile_update_relation_ProcPtr[RW]

    export put_svc_key[DS]
    export .put_svc_key[PR]
    export put_svc_key_ProcPtr[RW]

    export read_service_key[DS]
    export .read_service_key[PR]
    export read_service_key_ProcPtr[RW]

    export remove_error_table[DS]
    export .remove_error_table[PR]
    export remove_error_table_ProcPtr[RW]

    export tkt_string[DS]
    export .tkt_string[PR]
    export tkt_string_ProcPtr[RW]


;;;;; FSp_krb_get_svc_in_tkt ;;;;;

    toc
T_FSp_krb_get_svc_in_tkt_ProcPtr:	; TOC relative address
    tc      FSp_krb_get_svc_in_tkt_ProcPtr[TC], FSp_krb_get_svc_in_tkt_ProcPtr[RW]
    csect   FSp_krb_get_svc_in_tkt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   FSp_krb_get_svc_in_tkt[DS]
    dc.l    .FSp_krb_get_svc_in_tkt[PR]
    dc.l    TOC[tc0]
    
    csect   .FSp_krb_get_svc_in_tkt[PR]
    lwz     r12, T_FSp_krb_get_svc_in_tkt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; FSp_profile_init ;;;;;

    toc
T_FSp_profile_init_ProcPtr:	; TOC relative address
    tc      FSp_profile_init_ProcPtr[TC], FSp_profile_init_ProcPtr[RW]
    csect   FSp_profile_init_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   FSp_profile_init[DS]
    dc.l    .FSp_profile_init[PR]
    dc.l    TOC[tc0]
    
    csect   .FSp_profile_init[PR]
    lwz     r12, T_FSp_profile_init_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; FSp_profile_init_path ;;;;;

    toc
T_FSp_profile_init_path_ProcPtr:	; TOC relative address
    tc      FSp_profile_init_path_ProcPtr[TC], FSp_profile_init_path_ProcPtr[RW]
    csect   FSp_profile_init_path_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   FSp_profile_init_path[DS]
    dc.l    .FSp_profile_init_path[PR]
    dc.l    TOC[tc0]
    
    csect   .FSp_profile_init_path[PR]
    lwz     r12, T_FSp_profile_init_path_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; FSp_put_svc_key ;;;;;

    toc
T_FSp_put_svc_key_ProcPtr:	; TOC relative address
    tc      FSp_put_svc_key_ProcPtr[TC], FSp_put_svc_key_ProcPtr[RW]
    csect   FSp_put_svc_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   FSp_put_svc_key[DS]
    dc.l    .FSp_put_svc_key[PR]
    dc.l    TOC[tc0]
    
    csect   .FSp_put_svc_key[PR]
    lwz     r12, T_FSp_put_svc_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; FSp_read_service_key ;;;;;

    toc
T_FSp_read_service_key_ProcPtr:	; TOC relative address
    tc      FSp_read_service_key_ProcPtr[TC], FSp_read_service_key_ProcPtr[RW]
    csect   FSp_read_service_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   FSp_read_service_key[DS]
    dc.l    .FSp_read_service_key[PR]
    dc.l    TOC[tc0]
    
    csect   .FSp_read_service_key[PR]
    lwz     r12, T_FSp_read_service_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; GSS_C_NT_ANONYMOUS ;;;;;

    toc
T_GSS_C_NT_ANONYMOUS_ProcPtr:	; TOC relative address
    tc      GSS_C_NT_ANONYMOUS_ProcPtr[TC], GSS_C_NT_ANONYMOUS_ProcPtr[RW]
    csect   GSS_C_NT_ANONYMOUS_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   GSS_C_NT_ANONYMOUS[DS]
    dc.l    .GSS_C_NT_ANONYMOUS[PR]
    dc.l    TOC[tc0]
    
    csect   .GSS_C_NT_ANONYMOUS[PR]
    lwz     r12, T_GSS_C_NT_ANONYMOUS_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; GSS_C_NT_EXPORT_NAME ;;;;;

    toc
T_GSS_C_NT_EXPORT_NAME_ProcPtr:	; TOC relative address
    tc      GSS_C_NT_EXPORT_NAME_ProcPtr[TC], GSS_C_NT_EXPORT_NAME_ProcPtr[RW]
    csect   GSS_C_NT_EXPORT_NAME_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   GSS_C_NT_EXPORT_NAME[DS]
    dc.l    .GSS_C_NT_EXPORT_NAME[PR]
    dc.l    TOC[tc0]
    
    csect   .GSS_C_NT_EXPORT_NAME[PR]
    lwz     r12, T_GSS_C_NT_EXPORT_NAME_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; GSS_C_NT_HOSTBASED_SERVICE ;;;;;

    toc
T_GSS_C_NT_HOSTBASED_SERVICE_ProcPtr:	; TOC relative address
    tc      GSS_C_NT_HOSTBASED_SERVICE_ProcPtr[TC], GSS_C_NT_HOSTBASED_SERVICE_ProcPtr[RW]
    csect   GSS_C_NT_HOSTBASED_SERVICE_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   GSS_C_NT_HOSTBASED_SERVICE[DS]
    dc.l    .GSS_C_NT_HOSTBASED_SERVICE[PR]
    dc.l    TOC[tc0]
    
    csect   .GSS_C_NT_HOSTBASED_SERVICE[PR]
    lwz     r12, T_GSS_C_NT_HOSTBASED_SERVICE_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; GSS_C_NT_HOSTBASED_SERVICE_X ;;;;;

    toc
T_GSS_C_NT_HOSTBASED_SERVICE_X_ProcPtr:	; TOC relative address
    tc      GSS_C_NT_HOSTBASED_SERVICE_X_ProcPtr[TC], GSS_C_NT_HOSTBASED_SERVICE_X_ProcPtr[RW]
    csect   GSS_C_NT_HOSTBASED_SERVICE_X_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   GSS_C_NT_HOSTBASED_SERVICE_X[DS]
    dc.l    .GSS_C_NT_HOSTBASED_SERVICE_X[PR]
    dc.l    TOC[tc0]
    
    csect   .GSS_C_NT_HOSTBASED_SERVICE_X[PR]
    lwz     r12, T_GSS_C_NT_HOSTBASED_SERVICE_X_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; GSS_C_NT_MACHINE_UID_NAME ;;;;;

    toc
T_GSS_C_NT_MACHINE_UID_NAME_ProcPtr:	; TOC relative address
    tc      GSS_C_NT_MACHINE_UID_NAME_ProcPtr[TC], GSS_C_NT_MACHINE_UID_NAME_ProcPtr[RW]
    csect   GSS_C_NT_MACHINE_UID_NAME_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   GSS_C_NT_MACHINE_UID_NAME[DS]
    dc.l    .GSS_C_NT_MACHINE_UID_NAME[PR]
    dc.l    TOC[tc0]
    
    csect   .GSS_C_NT_MACHINE_UID_NAME[PR]
    lwz     r12, T_GSS_C_NT_MACHINE_UID_NAME_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; GSS_C_NT_STRING_UID_NAME ;;;;;

    toc
T_GSS_C_NT_STRING_UID_NAME_ProcPtr:	; TOC relative address
    tc      GSS_C_NT_STRING_UID_NAME_ProcPtr[TC], GSS_C_NT_STRING_UID_NAME_ProcPtr[RW]
    csect   GSS_C_NT_STRING_UID_NAME_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   GSS_C_NT_STRING_UID_NAME[DS]
    dc.l    .GSS_C_NT_STRING_UID_NAME[PR]
    dc.l    TOC[tc0]
    
    csect   .GSS_C_NT_STRING_UID_NAME[PR]
    lwz     r12, T_GSS_C_NT_STRING_UID_NAME_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; GSS_C_NT_USER_NAME ;;;;;

    toc
T_GSS_C_NT_USER_NAME_ProcPtr:	; TOC relative address
    tc      GSS_C_NT_USER_NAME_ProcPtr[TC], GSS_C_NT_USER_NAME_ProcPtr[RW]
    csect   GSS_C_NT_USER_NAME_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   GSS_C_NT_USER_NAME[DS]
    dc.l    .GSS_C_NT_USER_NAME[PR]
    dc.l    TOC[tc0]
    
    csect   .GSS_C_NT_USER_NAME[PR]
    lwz     r12, T_GSS_C_NT_USER_NAME_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; GSS_KRB5_NT_PRINCIPAL_NAME ;;;;;

    toc
T_GSS_KRB5_NT_PRINCIPAL_NAME_ProcPtr:	; TOC relative address
    tc      GSS_KRB5_NT_PRINCIPAL_NAME_ProcPtr[TC], GSS_KRB5_NT_PRINCIPAL_NAME_ProcPtr[RW]
    csect   GSS_KRB5_NT_PRINCIPAL_NAME_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   GSS_KRB5_NT_PRINCIPAL_NAME[DS]
    dc.l    .GSS_KRB5_NT_PRINCIPAL_NAME[PR]
    dc.l    TOC[tc0]
    
    csect   .GSS_KRB5_NT_PRINCIPAL_NAME[PR]
    lwz     r12, T_GSS_KRB5_NT_PRINCIPAL_NAME_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; K5ClientGetAuthenticatorForServiceDeprecated ;;;;;

    toc
T_K5ClientGetAuthenticatorForServiceDeprecated_ProcPtr:	; TOC relative address
    tc      K5ClientGetAuthenticatorForServiceDeprecated_ProcPtr[TC], K5ClientGetAuthenticatorForServiceDeprecated_ProcPtr[RW]
    csect   K5ClientGetAuthenticatorForServiceDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   K5ClientGetAuthenticatorForServiceDeprecated[DS]
    dc.l    .K5ClientGetAuthenticatorForServiceDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .K5ClientGetAuthenticatorForServiceDeprecated[PR]
    lwz     r12, T_K5ClientGetAuthenticatorForServiceDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; K5ClientGetTicketForServiceDeprecated ;;;;;

    toc
T_K5ClientGetTicketForServiceDeprecated_ProcPtr:	; TOC relative address
    tc      K5ClientGetTicketForServiceDeprecated_ProcPtr[TC], K5ClientGetTicketForServiceDeprecated_ProcPtr[RW]
    csect   K5ClientGetTicketForServiceDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   K5ClientGetTicketForServiceDeprecated[DS]
    dc.l    .K5ClientGetTicketForServiceDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .K5ClientGetTicketForServiceDeprecated[PR]
    lwz     r12, T_K5ClientGetTicketForServiceDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientAddCredentialsDeprecated ;;;;;

    toc
T_KClientAddCredentialsDeprecated_ProcPtr:	; TOC relative address
    tc      KClientAddCredentialsDeprecated_ProcPtr[TC], KClientAddCredentialsDeprecated_ProcPtr[RW]
    csect   KClientAddCredentialsDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientAddCredentialsDeprecated[DS]
    dc.l    .KClientAddCredentialsDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientAddCredentialsDeprecated[PR]
    lwz     r12, T_KClientAddCredentialsDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientAddRealmMapDeprecated ;;;;;

    toc
T_KClientAddRealmMapDeprecated_ProcPtr:	; TOC relative address
    tc      KClientAddRealmMapDeprecated_ProcPtr[TC], KClientAddRealmMapDeprecated_ProcPtr[RW]
    csect   KClientAddRealmMapDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientAddRealmMapDeprecated[DS]
    dc.l    .KClientAddRealmMapDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientAddRealmMapDeprecated[PR]
    lwz     r12, T_KClientAddRealmMapDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientAddServerMapDeprecated ;;;;;

    toc
T_KClientAddServerMapDeprecated_ProcPtr:	; TOC relative address
    tc      KClientAddServerMapDeprecated_ProcPtr[TC], KClientAddServerMapDeprecated_ProcPtr[RW]
    csect   KClientAddServerMapDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientAddServerMapDeprecated[DS]
    dc.l    .KClientAddServerMapDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientAddServerMapDeprecated[PR]
    lwz     r12, T_KClientAddServerMapDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientAddServiceKey ;;;;;

    toc
T_KClientAddServiceKey_ProcPtr:	; TOC relative address
    tc      KClientAddServiceKey_ProcPtr[TC], KClientAddServiceKey_ProcPtr[RW]
    csect   KClientAddServiceKey_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientAddServiceKey[DS]
    dc.l    .KClientAddServiceKey[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientAddServiceKey[PR]
    lwz     r12, T_KClientAddServiceKey_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientCacheInitialTicketDeprecated ;;;;;

    toc
T_KClientCacheInitialTicketDeprecated_ProcPtr:	; TOC relative address
    tc      KClientCacheInitialTicketDeprecated_ProcPtr[TC], KClientCacheInitialTicketDeprecated_ProcPtr[RW]
    csect   KClientCacheInitialTicketDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientCacheInitialTicketDeprecated[DS]
    dc.l    .KClientCacheInitialTicketDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientCacheInitialTicketDeprecated[PR]
    lwz     r12, T_KClientCacheInitialTicketDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientDecrypt ;;;;;

    toc
T_KClientDecrypt_ProcPtr:	; TOC relative address
    tc      KClientDecrypt_ProcPtr[TC], KClientDecrypt_ProcPtr[RW]
    csect   KClientDecrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientDecrypt[DS]
    dc.l    .KClientDecrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientDecrypt[PR]
    lwz     r12, T_KClientDecrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientDecryptCompat ;;;;;

    toc
T_KClientDecryptCompat_ProcPtr:	; TOC relative address
    tc      KClientDecryptCompat_ProcPtr[TC], KClientDecryptCompat_ProcPtr[RW]
    csect   KClientDecryptCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientDecryptCompat[DS]
    dc.l    .KClientDecryptCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientDecryptCompat[PR]
    lwz     r12, T_KClientDecryptCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientDeleteCredentialsDeprecated ;;;;;

    toc
T_KClientDeleteCredentialsDeprecated_ProcPtr:	; TOC relative address
    tc      KClientDeleteCredentialsDeprecated_ProcPtr[TC], KClientDeleteCredentialsDeprecated_ProcPtr[RW]
    csect   KClientDeleteCredentialsDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientDeleteCredentialsDeprecated[DS]
    dc.l    .KClientDeleteCredentialsDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientDeleteCredentialsDeprecated[PR]
    lwz     r12, T_KClientDeleteCredentialsDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientDeleteRealmMapDeprecated ;;;;;

    toc
T_KClientDeleteRealmMapDeprecated_ProcPtr:	; TOC relative address
    tc      KClientDeleteRealmMapDeprecated_ProcPtr[TC], KClientDeleteRealmMapDeprecated_ProcPtr[RW]
    csect   KClientDeleteRealmMapDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientDeleteRealmMapDeprecated[DS]
    dc.l    .KClientDeleteRealmMapDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientDeleteRealmMapDeprecated[PR]
    lwz     r12, T_KClientDeleteRealmMapDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientDeleteServerMapDeprecated ;;;;;

    toc
T_KClientDeleteServerMapDeprecated_ProcPtr:	; TOC relative address
    tc      KClientDeleteServerMapDeprecated_ProcPtr[TC], KClientDeleteServerMapDeprecated_ProcPtr[RW]
    csect   KClientDeleteServerMapDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientDeleteServerMapDeprecated[DS]
    dc.l    .KClientDeleteServerMapDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientDeleteServerMapDeprecated[PR]
    lwz     r12, T_KClientDeleteServerMapDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientDeleteSessionDeprecated ;;;;;

    toc
T_KClientDeleteSessionDeprecated_ProcPtr:	; TOC relative address
    tc      KClientDeleteSessionDeprecated_ProcPtr[TC], KClientDeleteSessionDeprecated_ProcPtr[RW]
    csect   KClientDeleteSessionDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientDeleteSessionDeprecated[DS]
    dc.l    .KClientDeleteSessionDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientDeleteSessionDeprecated[PR]
    lwz     r12, T_KClientDeleteSessionDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientDisposePrincipal ;;;;;

    toc
T_KClientDisposePrincipal_ProcPtr:	; TOC relative address
    tc      KClientDisposePrincipal_ProcPtr[TC], KClientDisposePrincipal_ProcPtr[RW]
    csect   KClientDisposePrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientDisposePrincipal[DS]
    dc.l    .KClientDisposePrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientDisposePrincipal[PR]
    lwz     r12, T_KClientDisposePrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientDisposeSession ;;;;;

    toc
T_KClientDisposeSession_ProcPtr:	; TOC relative address
    tc      KClientDisposeSession_ProcPtr[TC], KClientDisposeSession_ProcPtr[RW]
    csect   KClientDisposeSession_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientDisposeSession[DS]
    dc.l    .KClientDisposeSession[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientDisposeSession[PR]
    lwz     r12, T_KClientDisposeSession_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientDisposeSessionCompat ;;;;;

    toc
T_KClientDisposeSessionCompat_ProcPtr:	; TOC relative address
    tc      KClientDisposeSessionCompat_ProcPtr[TC], KClientDisposeSessionCompat_ProcPtr[RW]
    csect   KClientDisposeSessionCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientDisposeSessionCompat[DS]
    dc.l    .KClientDisposeSessionCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientDisposeSessionCompat[PR]
    lwz     r12, T_KClientDisposeSessionCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientEncrypt ;;;;;

    toc
T_KClientEncrypt_ProcPtr:	; TOC relative address
    tc      KClientEncrypt_ProcPtr[TC], KClientEncrypt_ProcPtr[RW]
    csect   KClientEncrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientEncrypt[DS]
    dc.l    .KClientEncrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientEncrypt[PR]
    lwz     r12, T_KClientEncrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientEncryptCompat ;;;;;

    toc
T_KClientEncryptCompat_ProcPtr:	; TOC relative address
    tc      KClientEncryptCompat_ProcPtr[TC], KClientEncryptCompat_ProcPtr[RW]
    csect   KClientEncryptCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientEncryptCompat[DS]
    dc.l    .KClientEncryptCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientEncryptCompat[PR]
    lwz     r12, T_KClientEncryptCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetAuthenticatorForService ;;;;;

    toc
T_KClientGetAuthenticatorForService_ProcPtr:	; TOC relative address
    tc      KClientGetAuthenticatorForService_ProcPtr[TC], KClientGetAuthenticatorForService_ProcPtr[RW]
    csect   KClientGetAuthenticatorForService_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetAuthenticatorForService[DS]
    dc.l    .KClientGetAuthenticatorForService[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetAuthenticatorForService[PR]
    lwz     r12, T_KClientGetAuthenticatorForService_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetCCacheReference ;;;;;

    toc
T_KClientGetCCacheReference_ProcPtr:	; TOC relative address
    tc      KClientGetCCacheReference_ProcPtr[TC], KClientGetCCacheReference_ProcPtr[RW]
    csect   KClientGetCCacheReference_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetCCacheReference[DS]
    dc.l    .KClientGetCCacheReference[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetCCacheReference[PR]
    lwz     r12, T_KClientGetCCacheReference_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetClientPrincipal ;;;;;

    toc
T_KClientGetClientPrincipal_ProcPtr:	; TOC relative address
    tc      KClientGetClientPrincipal_ProcPtr[TC], KClientGetClientPrincipal_ProcPtr[RW]
    csect   KClientGetClientPrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetClientPrincipal[DS]
    dc.l    .KClientGetClientPrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetClientPrincipal[PR]
    lwz     r12, T_KClientGetClientPrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetCredentialsDeprecated ;;;;;

    toc
T_KClientGetCredentialsDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetCredentialsDeprecated_ProcPtr[TC], KClientGetCredentialsDeprecated_ProcPtr[RW]
    csect   KClientGetCredentialsDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetCredentialsDeprecated[DS]
    dc.l    .KClientGetCredentialsDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetCredentialsDeprecated[PR]
    lwz     r12, T_KClientGetCredentialsDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetEncryptedServiceReply ;;;;;

    toc
T_KClientGetEncryptedServiceReply_ProcPtr:	; TOC relative address
    tc      KClientGetEncryptedServiceReply_ProcPtr[TC], KClientGetEncryptedServiceReply_ProcPtr[RW]
    csect   KClientGetEncryptedServiceReply_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetEncryptedServiceReply[DS]
    dc.l    .KClientGetEncryptedServiceReply[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetEncryptedServiceReply[PR]
    lwz     r12, T_KClientGetEncryptedServiceReply_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetErrorTextDeprecated ;;;;;

    toc
T_KClientGetErrorTextDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetErrorTextDeprecated_ProcPtr[TC], KClientGetErrorTextDeprecated_ProcPtr[RW]
    csect   KClientGetErrorTextDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetErrorTextDeprecated[DS]
    dc.l    .KClientGetErrorTextDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetErrorTextDeprecated[PR]
    lwz     r12, T_KClientGetErrorTextDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetExpirationTime ;;;;;

    toc
T_KClientGetExpirationTime_ProcPtr:	; TOC relative address
    tc      KClientGetExpirationTime_ProcPtr[TC], KClientGetExpirationTime_ProcPtr[RW]
    csect   KClientGetExpirationTime_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetExpirationTime[DS]
    dc.l    .KClientGetExpirationTime[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetExpirationTime[PR]
    lwz     r12, T_KClientGetExpirationTime_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetLocalAddress ;;;;;

    toc
T_KClientGetLocalAddress_ProcPtr:	; TOC relative address
    tc      KClientGetLocalAddress_ProcPtr[TC], KClientGetLocalAddress_ProcPtr[RW]
    csect   KClientGetLocalAddress_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetLocalAddress[DS]
    dc.l    .KClientGetLocalAddress[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetLocalAddress[PR]
    lwz     r12, T_KClientGetLocalAddress_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetLocalRealmDeprecated ;;;;;

    toc
T_KClientGetLocalRealmDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetLocalRealmDeprecated_ProcPtr[TC], KClientGetLocalRealmDeprecated_ProcPtr[RW]
    csect   KClientGetLocalRealmDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetLocalRealmDeprecated[DS]
    dc.l    .KClientGetLocalRealmDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetLocalRealmDeprecated[PR]
    lwz     r12, T_KClientGetLocalRealmDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetNthCredentialDeprecated ;;;;;

    toc
T_KClientGetNthCredentialDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetNthCredentialDeprecated_ProcPtr[TC], KClientGetNthCredentialDeprecated_ProcPtr[RW]
    csect   KClientGetNthCredentialDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetNthCredentialDeprecated[DS]
    dc.l    .KClientGetNthCredentialDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetNthCredentialDeprecated[PR]
    lwz     r12, T_KClientGetNthCredentialDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetNthRealmMapDeprecated ;;;;;

    toc
T_KClientGetNthRealmMapDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetNthRealmMapDeprecated_ProcPtr[TC], KClientGetNthRealmMapDeprecated_ProcPtr[RW]
    csect   KClientGetNthRealmMapDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetNthRealmMapDeprecated[DS]
    dc.l    .KClientGetNthRealmMapDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetNthRealmMapDeprecated[PR]
    lwz     r12, T_KClientGetNthRealmMapDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetNthServerDeprecated ;;;;;

    toc
T_KClientGetNthServerDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetNthServerDeprecated_ProcPtr[TC], KClientGetNthServerDeprecated_ProcPtr[RW]
    csect   KClientGetNthServerDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetNthServerDeprecated[DS]
    dc.l    .KClientGetNthServerDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetNthServerDeprecated[PR]
    lwz     r12, T_KClientGetNthServerDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetNthServerMapDeprecated ;;;;;

    toc
T_KClientGetNthServerMapDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetNthServerMapDeprecated_ProcPtr[TC], KClientGetNthServerMapDeprecated_ProcPtr[RW]
    csect   KClientGetNthServerMapDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetNthServerMapDeprecated[DS]
    dc.l    .KClientGetNthServerMapDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetNthServerMapDeprecated[PR]
    lwz     r12, T_KClientGetNthServerMapDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetNthServerPortDeprecated ;;;;;

    toc
T_KClientGetNthServerPortDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetNthServerPortDeprecated_ProcPtr[TC], KClientGetNthServerPortDeprecated_ProcPtr[RW]
    csect   KClientGetNthServerPortDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetNthServerPortDeprecated[DS]
    dc.l    .KClientGetNthServerPortDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetNthServerPortDeprecated[PR]
    lwz     r12, T_KClientGetNthServerPortDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetNthSessionDeprecated ;;;;;

    toc
T_KClientGetNthSessionDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetNthSessionDeprecated_ProcPtr[TC], KClientGetNthSessionDeprecated_ProcPtr[RW]
    csect   KClientGetNthSessionDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetNthSessionDeprecated[DS]
    dc.l    .KClientGetNthSessionDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetNthSessionDeprecated[PR]
    lwz     r12, T_KClientGetNthSessionDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetNumCredentialsDeprecated ;;;;;

    toc
T_KClientGetNumCredentialsDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetNumCredentialsDeprecated_ProcPtr[TC], KClientGetNumCredentialsDeprecated_ProcPtr[RW]
    csect   KClientGetNumCredentialsDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetNumCredentialsDeprecated[DS]
    dc.l    .KClientGetNumCredentialsDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetNumCredentialsDeprecated[PR]
    lwz     r12, T_KClientGetNumCredentialsDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetNumSessionsDeprecated ;;;;;

    toc
T_KClientGetNumSessionsDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetNumSessionsDeprecated_ProcPtr[TC], KClientGetNumSessionsDeprecated_ProcPtr[RW]
    csect   KClientGetNumSessionsDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetNumSessionsDeprecated[DS]
    dc.l    .KClientGetNumSessionsDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetNumSessionsDeprecated[PR]
    lwz     r12, T_KClientGetNumSessionsDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetProtectedServiceReply ;;;;;

    toc
T_KClientGetProtectedServiceReply_ProcPtr:	; TOC relative address
    tc      KClientGetProtectedServiceReply_ProcPtr[TC], KClientGetProtectedServiceReply_ProcPtr[RW]
    csect   KClientGetProtectedServiceReply_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetProtectedServiceReply[DS]
    dc.l    .KClientGetProtectedServiceReply[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetProtectedServiceReply[PR]
    lwz     r12, T_KClientGetProtectedServiceReply_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetRealmDeprecated ;;;;;

    toc
T_KClientGetRealmDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetRealmDeprecated_ProcPtr[TC], KClientGetRealmDeprecated_ProcPtr[RW]
    csect   KClientGetRealmDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetRealmDeprecated[DS]
    dc.l    .KClientGetRealmDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetRealmDeprecated[PR]
    lwz     r12, T_KClientGetRealmDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetRemoteAddress ;;;;;

    toc
T_KClientGetRemoteAddress_ProcPtr:	; TOC relative address
    tc      KClientGetRemoteAddress_ProcPtr[TC], KClientGetRemoteAddress_ProcPtr[RW]
    csect   KClientGetRemoteAddress_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetRemoteAddress[DS]
    dc.l    .KClientGetRemoteAddress[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetRemoteAddress[PR]
    lwz     r12, T_KClientGetRemoteAddress_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetServerPrincipal ;;;;;

    toc
T_KClientGetServerPrincipal_ProcPtr:	; TOC relative address
    tc      KClientGetServerPrincipal_ProcPtr[TC], KClientGetServerPrincipal_ProcPtr[RW]
    csect   KClientGetServerPrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetServerPrincipal[DS]
    dc.l    .KClientGetServerPrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetServerPrincipal[PR]
    lwz     r12, T_KClientGetServerPrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetServiceKey ;;;;;

    toc
T_KClientGetServiceKey_ProcPtr:	; TOC relative address
    tc      KClientGetServiceKey_ProcPtr[TC], KClientGetServiceKey_ProcPtr[RW]
    csect   KClientGetServiceKey_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetServiceKey[DS]
    dc.l    .KClientGetServiceKey[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetServiceKey[PR]
    lwz     r12, T_KClientGetServiceKey_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetSessionKey ;;;;;

    toc
T_KClientGetSessionKey_ProcPtr:	; TOC relative address
    tc      KClientGetSessionKey_ProcPtr[TC], KClientGetSessionKey_ProcPtr[RW]
    csect   KClientGetSessionKey_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetSessionKey[DS]
    dc.l    .KClientGetSessionKey[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetSessionKey[PR]
    lwz     r12, T_KClientGetSessionKey_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetSessionKeyCompat ;;;;;

    toc
T_KClientGetSessionKeyCompat_ProcPtr:	; TOC relative address
    tc      KClientGetSessionKeyCompat_ProcPtr[TC], KClientGetSessionKeyCompat_ProcPtr[RW]
    csect   KClientGetSessionKeyCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetSessionKeyCompat[DS]
    dc.l    .KClientGetSessionKeyCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetSessionKeyCompat[PR]
    lwz     r12, T_KClientGetSessionKeyCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetSessionUserNameCompat ;;;;;

    toc
T_KClientGetSessionUserNameCompat_ProcPtr:	; TOC relative address
    tc      KClientGetSessionUserNameCompat_ProcPtr[TC], KClientGetSessionUserNameCompat_ProcPtr[RW]
    csect   KClientGetSessionUserNameCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetSessionUserNameCompat[DS]
    dc.l    .KClientGetSessionUserNameCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetSessionUserNameCompat[PR]
    lwz     r12, T_KClientGetSessionUserNameCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetTicketForService ;;;;;

    toc
T_KClientGetTicketForService_ProcPtr:	; TOC relative address
    tc      KClientGetTicketForService_ProcPtr[TC], KClientGetTicketForService_ProcPtr[RW]
    csect   KClientGetTicketForService_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetTicketForService[DS]
    dc.l    .KClientGetTicketForService[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetTicketForService[PR]
    lwz     r12, T_KClientGetTicketForService_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetTicketForServiceCompat ;;;;;

    toc
T_KClientGetTicketForServiceCompat_ProcPtr:	; TOC relative address
    tc      KClientGetTicketForServiceCompat_ProcPtr[TC], KClientGetTicketForServiceCompat_ProcPtr[RW]
    csect   KClientGetTicketForServiceCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetTicketForServiceCompat[DS]
    dc.l    .KClientGetTicketForServiceCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetTicketForServiceCompat[PR]
    lwz     r12, T_KClientGetTicketForServiceCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetTicketForServiceWithChecksumCompat ;;;;;

    toc
T_KClientGetTicketForServiceWithChecksumCompat_ProcPtr:	; TOC relative address
    tc      KClientGetTicketForServiceWithChecksumCompat_ProcPtr[TC], KClientGetTicketForServiceWithChecksumCompat_ProcPtr[RW]
    csect   KClientGetTicketForServiceWithChecksumCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetTicketForServiceWithChecksumCompat[DS]
    dc.l    .KClientGetTicketForServiceWithChecksumCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetTicketForServiceWithChecksumCompat[PR]
    lwz     r12, T_KClientGetTicketForServiceWithChecksumCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetUserNameDeprecated ;;;;;

    toc
T_KClientGetUserNameDeprecated_ProcPtr:	; TOC relative address
    tc      KClientGetUserNameDeprecated_ProcPtr[TC], KClientGetUserNameDeprecated_ProcPtr[RW]
    csect   KClientGetUserNameDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetUserNameDeprecated[DS]
    dc.l    .KClientGetUserNameDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetUserNameDeprecated[PR]
    lwz     r12, T_KClientGetUserNameDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientGetVersion ;;;;;

    toc
T_KClientGetVersion_ProcPtr:	; TOC relative address
    tc      KClientGetVersion_ProcPtr[TC], KClientGetVersion_ProcPtr[RW]
    csect   KClientGetVersion_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientGetVersion[DS]
    dc.l    .KClientGetVersion[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientGetVersion[PR]
    lwz     r12, T_KClientGetVersion_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientKeyFileLogin ;;;;;

    toc
T_KClientKeyFileLogin_ProcPtr:	; TOC relative address
    tc      KClientKeyFileLogin_ProcPtr[TC], KClientKeyFileLogin_ProcPtr[RW]
    csect   KClientKeyFileLogin_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientKeyFileLogin[DS]
    dc.l    .KClientKeyFileLogin[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientKeyFileLogin[PR]
    lwz     r12, T_KClientKeyFileLogin_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientLogin ;;;;;

    toc
T_KClientLogin_ProcPtr:	; TOC relative address
    tc      KClientLogin_ProcPtr[TC], KClientLogin_ProcPtr[RW]
    csect   KClientLogin_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientLogin[DS]
    dc.l    .KClientLogin[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientLogin[PR]
    lwz     r12, T_KClientLogin_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientLoginCompat ;;;;;

    toc
T_KClientLoginCompat_ProcPtr:	; TOC relative address
    tc      KClientLoginCompat_ProcPtr[TC], KClientLoginCompat_ProcPtr[RW]
    csect   KClientLoginCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientLoginCompat[DS]
    dc.l    .KClientLoginCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientLoginCompat[PR]
    lwz     r12, T_KClientLoginCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientLogout ;;;;;

    toc
T_KClientLogout_ProcPtr:	; TOC relative address
    tc      KClientLogout_ProcPtr[TC], KClientLogout_ProcPtr[RW]
    csect   KClientLogout_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientLogout[DS]
    dc.l    .KClientLogout[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientLogout[PR]
    lwz     r12, T_KClientLogout_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientLogoutCompat ;;;;;

    toc
T_KClientLogoutCompat_ProcPtr:	; TOC relative address
    tc      KClientLogoutCompat_ProcPtr[TC], KClientLogoutCompat_ProcPtr[RW]
    csect   KClientLogoutCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientLogoutCompat[DS]
    dc.l    .KClientLogoutCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientLogoutCompat[PR]
    lwz     r12, T_KClientLogoutCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientMakeSendAuthCompat ;;;;;

    toc
T_KClientMakeSendAuthCompat_ProcPtr:	; TOC relative address
    tc      KClientMakeSendAuthCompat_ProcPtr[TC], KClientMakeSendAuthCompat_ProcPtr[RW]
    csect   KClientMakeSendAuthCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientMakeSendAuthCompat[DS]
    dc.l    .KClientMakeSendAuthCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientMakeSendAuthCompat[PR]
    lwz     r12, T_KClientMakeSendAuthCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientNewClientSession ;;;;;

    toc
T_KClientNewClientSession_ProcPtr:	; TOC relative address
    tc      KClientNewClientSession_ProcPtr[TC], KClientNewClientSession_ProcPtr[RW]
    csect   KClientNewClientSession_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientNewClientSession[DS]
    dc.l    .KClientNewClientSession[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientNewClientSession[PR]
    lwz     r12, T_KClientNewClientSession_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientNewServerSession ;;;;;

    toc
T_KClientNewServerSession_ProcPtr:	; TOC relative address
    tc      KClientNewServerSession_ProcPtr[TC], KClientNewServerSession_ProcPtr[RW]
    csect   KClientNewServerSession_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientNewServerSession[DS]
    dc.l    .KClientNewServerSession[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientNewServerSession[PR]
    lwz     r12, T_KClientNewServerSession_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientNewSessionCompat ;;;;;

    toc
T_KClientNewSessionCompat_ProcPtr:	; TOC relative address
    tc      KClientNewSessionCompat_ProcPtr[TC], KClientNewSessionCompat_ProcPtr[RW]
    csect   KClientNewSessionCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientNewSessionCompat[DS]
    dc.l    .KClientNewSessionCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientNewSessionCompat[PR]
    lwz     r12, T_KClientNewSessionCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientPasswordLogin ;;;;;

    toc
T_KClientPasswordLogin_ProcPtr:	; TOC relative address
    tc      KClientPasswordLogin_ProcPtr[TC], KClientPasswordLogin_ProcPtr[RW]
    csect   KClientPasswordLogin_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientPasswordLogin[DS]
    dc.l    .KClientPasswordLogin[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientPasswordLogin[PR]
    lwz     r12, T_KClientPasswordLogin_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientPasswordLoginCompat ;;;;;

    toc
T_KClientPasswordLoginCompat_ProcPtr:	; TOC relative address
    tc      KClientPasswordLoginCompat_ProcPtr[TC], KClientPasswordLoginCompat_ProcPtr[RW]
    csect   KClientPasswordLoginCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientPasswordLoginCompat[DS]
    dc.l    .KClientPasswordLoginCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientPasswordLoginCompat[PR]
    lwz     r12, T_KClientPasswordLoginCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientPrincipalToV4String ;;;;;

    toc
T_KClientPrincipalToV4String_ProcPtr:	; TOC relative address
    tc      KClientPrincipalToV4String_ProcPtr[TC], KClientPrincipalToV4String_ProcPtr[RW]
    csect   KClientPrincipalToV4String_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientPrincipalToV4String[DS]
    dc.l    .KClientPrincipalToV4String[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientPrincipalToV4String[PR]
    lwz     r12, T_KClientPrincipalToV4String_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientPrincipalToV4Triplet ;;;;;

    toc
T_KClientPrincipalToV4Triplet_ProcPtr:	; TOC relative address
    tc      KClientPrincipalToV4Triplet_ProcPtr[TC], KClientPrincipalToV4Triplet_ProcPtr[RW]
    csect   KClientPrincipalToV4Triplet_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientPrincipalToV4Triplet[DS]
    dc.l    .KClientPrincipalToV4Triplet[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientPrincipalToV4Triplet[PR]
    lwz     r12, T_KClientPrincipalToV4Triplet_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientProtectIntegrity ;;;;;

    toc
T_KClientProtectIntegrity_ProcPtr:	; TOC relative address
    tc      KClientProtectIntegrity_ProcPtr[TC], KClientProtectIntegrity_ProcPtr[RW]
    csect   KClientProtectIntegrity_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientProtectIntegrity[DS]
    dc.l    .KClientProtectIntegrity[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientProtectIntegrity[PR]
    lwz     r12, T_KClientProtectIntegrity_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientProtectIntegrityCompat ;;;;;

    toc
T_KClientProtectIntegrityCompat_ProcPtr:	; TOC relative address
    tc      KClientProtectIntegrityCompat_ProcPtr[TC], KClientProtectIntegrityCompat_ProcPtr[RW]
    csect   KClientProtectIntegrityCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientProtectIntegrityCompat[DS]
    dc.l    .KClientProtectIntegrityCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientProtectIntegrityCompat[PR]
    lwz     r12, T_KClientProtectIntegrityCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientSetClientPrincipal ;;;;;

    toc
T_KClientSetClientPrincipal_ProcPtr:	; TOC relative address
    tc      KClientSetClientPrincipal_ProcPtr[TC], KClientSetClientPrincipal_ProcPtr[RW]
    csect   KClientSetClientPrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientSetClientPrincipal[DS]
    dc.l    .KClientSetClientPrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientSetClientPrincipal[PR]
    lwz     r12, T_KClientSetClientPrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientSetKeyFile ;;;;;

    toc
T_KClientSetKeyFile_ProcPtr:	; TOC relative address
    tc      KClientSetKeyFile_ProcPtr[TC], KClientSetKeyFile_ProcPtr[RW]
    csect   KClientSetKeyFile_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientSetKeyFile[DS]
    dc.l    .KClientSetKeyFile[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientSetKeyFile[PR]
    lwz     r12, T_KClientSetKeyFile_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientSetLocalAddress ;;;;;

    toc
T_KClientSetLocalAddress_ProcPtr:	; TOC relative address
    tc      KClientSetLocalAddress_ProcPtr[TC], KClientSetLocalAddress_ProcPtr[RW]
    csect   KClientSetLocalAddress_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientSetLocalAddress[DS]
    dc.l    .KClientSetLocalAddress[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientSetLocalAddress[PR]
    lwz     r12, T_KClientSetLocalAddress_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientSetLocalRealmDeprecated ;;;;;

    toc
T_KClientSetLocalRealmDeprecated_ProcPtr:	; TOC relative address
    tc      KClientSetLocalRealmDeprecated_ProcPtr[TC], KClientSetLocalRealmDeprecated_ProcPtr[RW]
    csect   KClientSetLocalRealmDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientSetLocalRealmDeprecated[DS]
    dc.l    .KClientSetLocalRealmDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientSetLocalRealmDeprecated[PR]
    lwz     r12, T_KClientSetLocalRealmDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientSetNthServerPortDeprecated ;;;;;

    toc
T_KClientSetNthServerPortDeprecated_ProcPtr:	; TOC relative address
    tc      KClientSetNthServerPortDeprecated_ProcPtr[TC], KClientSetNthServerPortDeprecated_ProcPtr[RW]
    csect   KClientSetNthServerPortDeprecated_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientSetNthServerPortDeprecated[DS]
    dc.l    .KClientSetNthServerPortDeprecated[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientSetNthServerPortDeprecated[PR]
    lwz     r12, T_KClientSetNthServerPortDeprecated_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientSetRemoteAddress ;;;;;

    toc
T_KClientSetRemoteAddress_ProcPtr:	; TOC relative address
    tc      KClientSetRemoteAddress_ProcPtr[TC], KClientSetRemoteAddress_ProcPtr[RW]
    csect   KClientSetRemoteAddress_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientSetRemoteAddress[DS]
    dc.l    .KClientSetRemoteAddress[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientSetRemoteAddress[PR]
    lwz     r12, T_KClientSetRemoteAddress_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientSetServerPrincipal ;;;;;

    toc
T_KClientSetServerPrincipal_ProcPtr:	; TOC relative address
    tc      KClientSetServerPrincipal_ProcPtr[TC], KClientSetServerPrincipal_ProcPtr[RW]
    csect   KClientSetServerPrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientSetServerPrincipal[DS]
    dc.l    .KClientSetServerPrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientSetServerPrincipal[PR]
    lwz     r12, T_KClientSetServerPrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientStatusCompat ;;;;;

    toc
T_KClientStatusCompat_ProcPtr:	; TOC relative address
    tc      KClientStatusCompat_ProcPtr[TC], KClientStatusCompat_ProcPtr[RW]
    csect   KClientStatusCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientStatusCompat[DS]
    dc.l    .KClientStatusCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientStatusCompat[PR]
    lwz     r12, T_KClientStatusCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientV4StringToPrincipal ;;;;;

    toc
T_KClientV4StringToPrincipal_ProcPtr:	; TOC relative address
    tc      KClientV4StringToPrincipal_ProcPtr[TC], KClientV4StringToPrincipal_ProcPtr[RW]
    csect   KClientV4StringToPrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientV4StringToPrincipal[DS]
    dc.l    .KClientV4StringToPrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientV4StringToPrincipal[PR]
    lwz     r12, T_KClientV4StringToPrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientVerifyAuthenticator ;;;;;

    toc
T_KClientVerifyAuthenticator_ProcPtr:	; TOC relative address
    tc      KClientVerifyAuthenticator_ProcPtr[TC], KClientVerifyAuthenticator_ProcPtr[RW]
    csect   KClientVerifyAuthenticator_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientVerifyAuthenticator[DS]
    dc.l    .KClientVerifyAuthenticator[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientVerifyAuthenticator[PR]
    lwz     r12, T_KClientVerifyAuthenticator_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientVerifyEncryptedServiceReply ;;;;;

    toc
T_KClientVerifyEncryptedServiceReply_ProcPtr:	; TOC relative address
    tc      KClientVerifyEncryptedServiceReply_ProcPtr[TC], KClientVerifyEncryptedServiceReply_ProcPtr[RW]
    csect   KClientVerifyEncryptedServiceReply_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientVerifyEncryptedServiceReply[DS]
    dc.l    .KClientVerifyEncryptedServiceReply[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientVerifyEncryptedServiceReply[PR]
    lwz     r12, T_KClientVerifyEncryptedServiceReply_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientVerifyIntegrity ;;;;;

    toc
T_KClientVerifyIntegrity_ProcPtr:	; TOC relative address
    tc      KClientVerifyIntegrity_ProcPtr[TC], KClientVerifyIntegrity_ProcPtr[RW]
    csect   KClientVerifyIntegrity_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientVerifyIntegrity[DS]
    dc.l    .KClientVerifyIntegrity[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientVerifyIntegrity[PR]
    lwz     r12, T_KClientVerifyIntegrity_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientVerifyIntegrityCompat ;;;;;

    toc
T_KClientVerifyIntegrityCompat_ProcPtr:	; TOC relative address
    tc      KClientVerifyIntegrityCompat_ProcPtr[TC], KClientVerifyIntegrityCompat_ProcPtr[RW]
    csect   KClientVerifyIntegrityCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientVerifyIntegrityCompat[DS]
    dc.l    .KClientVerifyIntegrityCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientVerifyIntegrityCompat[PR]
    lwz     r12, T_KClientVerifyIntegrityCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientVerifyProtectedServiceReply ;;;;;

    toc
T_KClientVerifyProtectedServiceReply_ProcPtr:	; TOC relative address
    tc      KClientVerifyProtectedServiceReply_ProcPtr[TC], KClientVerifyProtectedServiceReply_ProcPtr[RW]
    csect   KClientVerifyProtectedServiceReply_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientVerifyProtectedServiceReply[DS]
    dc.l    .KClientVerifyProtectedServiceReply[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientVerifyProtectedServiceReply[PR]
    lwz     r12, T_KClientVerifyProtectedServiceReply_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientVerifyReplyTicketCompat ;;;;;

    toc
T_KClientVerifyReplyTicketCompat_ProcPtr:	; TOC relative address
    tc      KClientVerifyReplyTicketCompat_ProcPtr[TC], KClientVerifyReplyTicketCompat_ProcPtr[RW]
    csect   KClientVerifyReplyTicketCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientVerifyReplyTicketCompat[DS]
    dc.l    .KClientVerifyReplyTicketCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientVerifyReplyTicketCompat[PR]
    lwz     r12, T_KClientVerifyReplyTicketCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientVerifyUnencryptedReplyTicketCompat ;;;;;

    toc
T_KClientVerifyUnencryptedReplyTicketCompat_ProcPtr:	; TOC relative address
    tc      KClientVerifyUnencryptedReplyTicketCompat_ProcPtr[TC], KClientVerifyUnencryptedReplyTicketCompat_ProcPtr[RW]
    csect   KClientVerifyUnencryptedReplyTicketCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientVerifyUnencryptedReplyTicketCompat[DS]
    dc.l    .KClientVerifyUnencryptedReplyTicketCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientVerifyUnencryptedReplyTicketCompat[PR]
    lwz     r12, T_KClientVerifyUnencryptedReplyTicketCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KClientVersionCompat ;;;;;

    toc
T_KClientVersionCompat_ProcPtr:	; TOC relative address
    tc      KClientVersionCompat_ProcPtr[TC], KClientVersionCompat_ProcPtr[RW]
    csect   KClientVersionCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KClientVersionCompat[DS]
    dc.l    .KClientVersionCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KClientVersionCompat[PR]
    lwz     r12, T_KClientVersionCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLAcquireNewTickets ;;;;;

    toc
T_KLAcquireNewTickets_ProcPtr:	; TOC relative address
    tc      KLAcquireNewTickets_ProcPtr[TC], KLAcquireNewTickets_ProcPtr[RW]
    csect   KLAcquireNewTickets_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLAcquireNewTickets[DS]
    dc.l    .KLAcquireNewTickets[PR]
    dc.l    TOC[tc0]
    
    csect   .KLAcquireNewTickets[PR]
    lwz     r12, T_KLAcquireNewTickets_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLAcquireNewTicketsWithPassword ;;;;;

    toc
T_KLAcquireNewTicketsWithPassword_ProcPtr:	; TOC relative address
    tc      KLAcquireNewTicketsWithPassword_ProcPtr[TC], KLAcquireNewTicketsWithPassword_ProcPtr[RW]
    csect   KLAcquireNewTicketsWithPassword_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLAcquireNewTicketsWithPassword[DS]
    dc.l    .KLAcquireNewTicketsWithPassword[PR]
    dc.l    TOC[tc0]
    
    csect   .KLAcquireNewTicketsWithPassword[PR]
    lwz     r12, T_KLAcquireNewTicketsWithPassword_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLAcquireTickets ;;;;;

    toc
T_KLAcquireTickets_ProcPtr:	; TOC relative address
    tc      KLAcquireTickets_ProcPtr[TC], KLAcquireTickets_ProcPtr[RW]
    csect   KLAcquireTickets_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLAcquireTickets[DS]
    dc.l    .KLAcquireTickets[PR]
    dc.l    TOC[tc0]
    
    csect   .KLAcquireTickets[PR]
    lwz     r12, T_KLAcquireTickets_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLAcquireTicketsWithPassword ;;;;;

    toc
T_KLAcquireTicketsWithPassword_ProcPtr:	; TOC relative address
    tc      KLAcquireTicketsWithPassword_ProcPtr[TC], KLAcquireTicketsWithPassword_ProcPtr[RW]
    csect   KLAcquireTicketsWithPassword_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLAcquireTicketsWithPassword[DS]
    dc.l    .KLAcquireTicketsWithPassword[PR]
    dc.l    TOC[tc0]
    
    csect   .KLAcquireTicketsWithPassword[PR]
    lwz     r12, T_KLAcquireTicketsWithPassword_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLCacheHasValidTickets ;;;;;

    toc
T_KLCacheHasValidTickets_ProcPtr:	; TOC relative address
    tc      KLCacheHasValidTickets_ProcPtr[TC], KLCacheHasValidTickets_ProcPtr[RW]
    csect   KLCacheHasValidTickets_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLCacheHasValidTickets[DS]
    dc.l    .KLCacheHasValidTickets[PR]
    dc.l    TOC[tc0]
    
    csect   .KLCacheHasValidTickets[PR]
    lwz     r12, T_KLCacheHasValidTickets_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLCancelAllDialogs ;;;;;

    toc
T_KLCancelAllDialogs_ProcPtr:	; TOC relative address
    tc      KLCancelAllDialogs_ProcPtr[TC], KLCancelAllDialogs_ProcPtr[RW]
    csect   KLCancelAllDialogs_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLCancelAllDialogs[DS]
    dc.l    .KLCancelAllDialogs[PR]
    dc.l    TOC[tc0]
    
    csect   .KLCancelAllDialogs[PR]
    lwz     r12, T_KLCancelAllDialogs_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLChangePassword ;;;;;

    toc
T_KLChangePassword_ProcPtr:	; TOC relative address
    tc      KLChangePassword_ProcPtr[TC], KLChangePassword_ProcPtr[RW]
    csect   KLChangePassword_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLChangePassword[DS]
    dc.l    .KLChangePassword[PR]
    dc.l    TOC[tc0]
    
    csect   .KLChangePassword[PR]
    lwz     r12, T_KLChangePassword_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLChangePasswordWithPasswords ;;;;;

    toc
T_KLChangePasswordWithPasswords_ProcPtr:	; TOC relative address
    tc      KLChangePasswordWithPasswords_ProcPtr[TC], KLChangePasswordWithPasswords_ProcPtr[RW]
    csect   KLChangePasswordWithPasswords_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLChangePasswordWithPasswords[DS]
    dc.l    .KLChangePasswordWithPasswords[PR]
    dc.l    TOC[tc0]
    
    csect   .KLChangePasswordWithPasswords[PR]
    lwz     r12, T_KLChangePasswordWithPasswords_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLComparePrincipal ;;;;;

    toc
T_KLComparePrincipal_ProcPtr:	; TOC relative address
    tc      KLComparePrincipal_ProcPtr[TC], KLComparePrincipal_ProcPtr[RW]
    csect   KLComparePrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLComparePrincipal[DS]
    dc.l    .KLComparePrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KLComparePrincipal[PR]
    lwz     r12, T_KLComparePrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLCountKerberosRealms ;;;;;

    toc
T_KLCountKerberosRealms_ProcPtr:	; TOC relative address
    tc      KLCountKerberosRealms_ProcPtr[TC], KLCountKerberosRealms_ProcPtr[RW]
    csect   KLCountKerberosRealms_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLCountKerberosRealms[DS]
    dc.l    .KLCountKerberosRealms[PR]
    dc.l    TOC[tc0]
    
    csect   .KLCountKerberosRealms[PR]
    lwz     r12, T_KLCountKerberosRealms_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLCreateLoginOptions ;;;;;

    toc
T_KLCreateLoginOptions_ProcPtr:	; TOC relative address
    tc      KLCreateLoginOptions_ProcPtr[TC], KLCreateLoginOptions_ProcPtr[RW]
    csect   KLCreateLoginOptions_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLCreateLoginOptions[DS]
    dc.l    .KLCreateLoginOptions[PR]
    dc.l    TOC[tc0]
    
    csect   .KLCreateLoginOptions[PR]
    lwz     r12, T_KLCreateLoginOptions_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLCreatePrincipalFromString ;;;;;

    toc
T_KLCreatePrincipalFromString_ProcPtr:	; TOC relative address
    tc      KLCreatePrincipalFromString_ProcPtr[TC], KLCreatePrincipalFromString_ProcPtr[RW]
    csect   KLCreatePrincipalFromString_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLCreatePrincipalFromString[DS]
    dc.l    .KLCreatePrincipalFromString[PR]
    dc.l    TOC[tc0]
    
    csect   .KLCreatePrincipalFromString[PR]
    lwz     r12, T_KLCreatePrincipalFromString_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLCreatePrincipalFromTriplet ;;;;;

    toc
T_KLCreatePrincipalFromTriplet_ProcPtr:	; TOC relative address
    tc      KLCreatePrincipalFromTriplet_ProcPtr[TC], KLCreatePrincipalFromTriplet_ProcPtr[RW]
    csect   KLCreatePrincipalFromTriplet_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLCreatePrincipalFromTriplet[DS]
    dc.l    .KLCreatePrincipalFromTriplet[PR]
    dc.l    TOC[tc0]
    
    csect   .KLCreatePrincipalFromTriplet[PR]
    lwz     r12, T_KLCreatePrincipalFromTriplet_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLDestroyTickets ;;;;;

    toc
T_KLDestroyTickets_ProcPtr:	; TOC relative address
    tc      KLDestroyTickets_ProcPtr[TC], KLDestroyTickets_ProcPtr[RW]
    csect   KLDestroyTickets_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLDestroyTickets[DS]
    dc.l    .KLDestroyTickets[PR]
    dc.l    TOC[tc0]
    
    csect   .KLDestroyTickets[PR]
    lwz     r12, T_KLDestroyTickets_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLDisposeLoginOptions ;;;;;

    toc
T_KLDisposeLoginOptions_ProcPtr:	; TOC relative address
    tc      KLDisposeLoginOptions_ProcPtr[TC], KLDisposeLoginOptions_ProcPtr[RW]
    csect   KLDisposeLoginOptions_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLDisposeLoginOptions[DS]
    dc.l    .KLDisposeLoginOptions[PR]
    dc.l    TOC[tc0]
    
    csect   .KLDisposeLoginOptions[PR]
    lwz     r12, T_KLDisposeLoginOptions_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLDisposePrincipal ;;;;;

    toc
T_KLDisposePrincipal_ProcPtr:	; TOC relative address
    tc      KLDisposePrincipal_ProcPtr[TC], KLDisposePrincipal_ProcPtr[RW]
    csect   KLDisposePrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLDisposePrincipal[DS]
    dc.l    .KLDisposePrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KLDisposePrincipal[PR]
    lwz     r12, T_KLDisposePrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLDisposeString ;;;;;

    toc
T_KLDisposeString_ProcPtr:	; TOC relative address
    tc      KLDisposeString_ProcPtr[TC], KLDisposeString_ProcPtr[RW]
    csect   KLDisposeString_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLDisposeString[DS]
    dc.l    .KLDisposeString[PR]
    dc.l    TOC[tc0]
    
    csect   .KLDisposeString[PR]
    lwz     r12, T_KLDisposeString_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLFindKerberosRealmByName ;;;;;

    toc
T_KLFindKerberosRealmByName_ProcPtr:	; TOC relative address
    tc      KLFindKerberosRealmByName_ProcPtr[TC], KLFindKerberosRealmByName_ProcPtr[RW]
    csect   KLFindKerberosRealmByName_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLFindKerberosRealmByName[DS]
    dc.l    .KLFindKerberosRealmByName[PR]
    dc.l    TOC[tc0]
    
    csect   .KLFindKerberosRealmByName[PR]
    lwz     r12, T_KLFindKerberosRealmByName_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLGetApplicationOptions ;;;;;

    toc
T_KLGetApplicationOptions_ProcPtr:	; TOC relative address
    tc      KLGetApplicationOptions_ProcPtr[TC], KLGetApplicationOptions_ProcPtr[RW]
    csect   KLGetApplicationOptions_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLGetApplicationOptions[DS]
    dc.l    .KLGetApplicationOptions[PR]
    dc.l    TOC[tc0]
    
    csect   .KLGetApplicationOptions[PR]
    lwz     r12, T_KLGetApplicationOptions_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLGetDefaultLoginOption ;;;;;

    toc
T_KLGetDefaultLoginOption_ProcPtr:	; TOC relative address
    tc      KLGetDefaultLoginOption_ProcPtr[TC], KLGetDefaultLoginOption_ProcPtr[RW]
    csect   KLGetDefaultLoginOption_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLGetDefaultLoginOption[DS]
    dc.l    .KLGetDefaultLoginOption[PR]
    dc.l    TOC[tc0]
    
    csect   .KLGetDefaultLoginOption[PR]
    lwz     r12, T_KLGetDefaultLoginOption_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLGetDisplayStringFromPrincipal ;;;;;

    toc
T_KLGetDisplayStringFromPrincipal_ProcPtr:	; TOC relative address
    tc      KLGetDisplayStringFromPrincipal_ProcPtr[TC], KLGetDisplayStringFromPrincipal_ProcPtr[RW]
    csect   KLGetDisplayStringFromPrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLGetDisplayStringFromPrincipal[DS]
    dc.l    .KLGetDisplayStringFromPrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KLGetDisplayStringFromPrincipal[PR]
    lwz     r12, T_KLGetDisplayStringFromPrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLGetErrorString ;;;;;

    toc
T_KLGetErrorString_ProcPtr:	; TOC relative address
    tc      KLGetErrorString_ProcPtr[TC], KLGetErrorString_ProcPtr[RW]
    csect   KLGetErrorString_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLGetErrorString[DS]
    dc.l    .KLGetErrorString[PR]
    dc.l    TOC[tc0]
    
    csect   .KLGetErrorString[PR]
    lwz     r12, T_KLGetErrorString_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLGetKerberosDefaultRealm ;;;;;

    toc
T_KLGetKerberosDefaultRealm_ProcPtr:	; TOC relative address
    tc      KLGetKerberosDefaultRealm_ProcPtr[TC], KLGetKerberosDefaultRealm_ProcPtr[RW]
    csect   KLGetKerberosDefaultRealm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLGetKerberosDefaultRealm[DS]
    dc.l    .KLGetKerberosDefaultRealm[PR]
    dc.l    TOC[tc0]
    
    csect   .KLGetKerberosDefaultRealm[PR]
    lwz     r12, T_KLGetKerberosDefaultRealm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLGetKerberosDefaultRealmByName ;;;;;

    toc
T_KLGetKerberosDefaultRealmByName_ProcPtr:	; TOC relative address
    tc      KLGetKerberosDefaultRealmByName_ProcPtr[TC], KLGetKerberosDefaultRealmByName_ProcPtr[RW]
    csect   KLGetKerberosDefaultRealmByName_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLGetKerberosDefaultRealmByName[DS]
    dc.l    .KLGetKerberosDefaultRealmByName[PR]
    dc.l    TOC[tc0]
    
    csect   .KLGetKerberosDefaultRealmByName[PR]
    lwz     r12, T_KLGetKerberosDefaultRealmByName_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLGetKerberosRealm ;;;;;

    toc
T_KLGetKerberosRealm_ProcPtr:	; TOC relative address
    tc      KLGetKerberosRealm_ProcPtr[TC], KLGetKerberosRealm_ProcPtr[RW]
    csect   KLGetKerberosRealm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLGetKerberosRealm[DS]
    dc.l    .KLGetKerberosRealm[PR]
    dc.l    TOC[tc0]
    
    csect   .KLGetKerberosRealm[PR]
    lwz     r12, T_KLGetKerberosRealm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLGetStringFromPrincipal ;;;;;

    toc
T_KLGetStringFromPrincipal_ProcPtr:	; TOC relative address
    tc      KLGetStringFromPrincipal_ProcPtr[TC], KLGetStringFromPrincipal_ProcPtr[RW]
    csect   KLGetStringFromPrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLGetStringFromPrincipal[DS]
    dc.l    .KLGetStringFromPrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KLGetStringFromPrincipal[PR]
    lwz     r12, T_KLGetStringFromPrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLGetTripletFromPrincipal ;;;;;

    toc
T_KLGetTripletFromPrincipal_ProcPtr:	; TOC relative address
    tc      KLGetTripletFromPrincipal_ProcPtr[TC], KLGetTripletFromPrincipal_ProcPtr[RW]
    csect   KLGetTripletFromPrincipal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLGetTripletFromPrincipal[DS]
    dc.l    .KLGetTripletFromPrincipal[PR]
    dc.l    TOC[tc0]
    
    csect   .KLGetTripletFromPrincipal[PR]
    lwz     r12, T_KLGetTripletFromPrincipal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLHandleError ;;;;;

    toc
T_KLHandleError_ProcPtr:	; TOC relative address
    tc      KLHandleError_ProcPtr[TC], KLHandleError_ProcPtr[RW]
    csect   KLHandleError_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLHandleError[DS]
    dc.l    .KLHandleError[PR]
    dc.l    TOC[tc0]
    
    csect   .KLHandleError[PR]
    lwz     r12, T_KLHandleError_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLInsertKerberosRealm ;;;;;

    toc
T_KLInsertKerberosRealm_ProcPtr:	; TOC relative address
    tc      KLInsertKerberosRealm_ProcPtr[TC], KLInsertKerberosRealm_ProcPtr[RW]
    csect   KLInsertKerberosRealm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLInsertKerberosRealm[DS]
    dc.l    .KLInsertKerberosRealm[PR]
    dc.l    TOC[tc0]
    
    csect   .KLInsertKerberosRealm[PR]
    lwz     r12, T_KLInsertKerberosRealm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLLastChangedTime ;;;;;

    toc
T_KLLastChangedTime_ProcPtr:	; TOC relative address
    tc      KLLastChangedTime_ProcPtr[TC], KLLastChangedTime_ProcPtr[RW]
    csect   KLLastChangedTime_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLLastChangedTime[DS]
    dc.l    .KLLastChangedTime[PR]
    dc.l    TOC[tc0]
    
    csect   .KLLastChangedTime[PR]
    lwz     r12, T_KLLastChangedTime_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLLoginOptionsSetForwardable ;;;;;

    toc
T_KLLoginOptionsSetForwardable_ProcPtr:	; TOC relative address
    tc      KLLoginOptionsSetForwardable_ProcPtr[TC], KLLoginOptionsSetForwardable_ProcPtr[RW]
    csect   KLLoginOptionsSetForwardable_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLLoginOptionsSetForwardable[DS]
    dc.l    .KLLoginOptionsSetForwardable[PR]
    dc.l    TOC[tc0]
    
    csect   .KLLoginOptionsSetForwardable[PR]
    lwz     r12, T_KLLoginOptionsSetForwardable_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLLoginOptionsSetProxiable ;;;;;

    toc
T_KLLoginOptionsSetProxiable_ProcPtr:	; TOC relative address
    tc      KLLoginOptionsSetProxiable_ProcPtr[TC], KLLoginOptionsSetProxiable_ProcPtr[RW]
    csect   KLLoginOptionsSetProxiable_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLLoginOptionsSetProxiable[DS]
    dc.l    .KLLoginOptionsSetProxiable[PR]
    dc.l    TOC[tc0]
    
    csect   .KLLoginOptionsSetProxiable[PR]
    lwz     r12, T_KLLoginOptionsSetProxiable_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLLoginOptionsSetTicketLifetime ;;;;;

    toc
T_KLLoginOptionsSetTicketLifetime_ProcPtr:	; TOC relative address
    tc      KLLoginOptionsSetTicketLifetime_ProcPtr[TC], KLLoginOptionsSetTicketLifetime_ProcPtr[RW]
    csect   KLLoginOptionsSetTicketLifetime_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLLoginOptionsSetTicketLifetime[DS]
    dc.l    .KLLoginOptionsSetTicketLifetime[PR]
    dc.l    TOC[tc0]
    
    csect   .KLLoginOptionsSetTicketLifetime[PR]
    lwz     r12, T_KLLoginOptionsSetTicketLifetime_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLRemoveAllKerberosRealms ;;;;;

    toc
T_KLRemoveAllKerberosRealms_ProcPtr:	; TOC relative address
    tc      KLRemoveAllKerberosRealms_ProcPtr[TC], KLRemoveAllKerberosRealms_ProcPtr[RW]
    csect   KLRemoveAllKerberosRealms_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLRemoveAllKerberosRealms[DS]
    dc.l    .KLRemoveAllKerberosRealms[PR]
    dc.l    TOC[tc0]
    
    csect   .KLRemoveAllKerberosRealms[PR]
    lwz     r12, T_KLRemoveAllKerberosRealms_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLRemoveKerberosRealm ;;;;;

    toc
T_KLRemoveKerberosRealm_ProcPtr:	; TOC relative address
    tc      KLRemoveKerberosRealm_ProcPtr[TC], KLRemoveKerberosRealm_ProcPtr[RW]
    csect   KLRemoveKerberosRealm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLRemoveKerberosRealm[DS]
    dc.l    .KLRemoveKerberosRealm[PR]
    dc.l    TOC[tc0]
    
    csect   .KLRemoveKerberosRealm[PR]
    lwz     r12, T_KLRemoveKerberosRealm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLSetApplicationOptions ;;;;;

    toc
T_KLSetApplicationOptions_ProcPtr:	; TOC relative address
    tc      KLSetApplicationOptions_ProcPtr[TC], KLSetApplicationOptions_ProcPtr[RW]
    csect   KLSetApplicationOptions_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLSetApplicationOptions[DS]
    dc.l    .KLSetApplicationOptions[PR]
    dc.l    TOC[tc0]
    
    csect   .KLSetApplicationOptions[PR]
    lwz     r12, T_KLSetApplicationOptions_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLSetDefaultLoginOption ;;;;;

    toc
T_KLSetDefaultLoginOption_ProcPtr:	; TOC relative address
    tc      KLSetDefaultLoginOption_ProcPtr[TC], KLSetDefaultLoginOption_ProcPtr[RW]
    csect   KLSetDefaultLoginOption_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLSetDefaultLoginOption[DS]
    dc.l    .KLSetDefaultLoginOption[PR]
    dc.l    TOC[tc0]
    
    csect   .KLSetDefaultLoginOption[PR]
    lwz     r12, T_KLSetDefaultLoginOption_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLSetKerberosDefaultRealm ;;;;;

    toc
T_KLSetKerberosDefaultRealm_ProcPtr:	; TOC relative address
    tc      KLSetKerberosDefaultRealm_ProcPtr[TC], KLSetKerberosDefaultRealm_ProcPtr[RW]
    csect   KLSetKerberosDefaultRealm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLSetKerberosDefaultRealm[DS]
    dc.l    .KLSetKerberosDefaultRealm[PR]
    dc.l    TOC[tc0]
    
    csect   .KLSetKerberosDefaultRealm[PR]
    lwz     r12, T_KLSetKerberosDefaultRealm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLSetKerberosDefaultRealmByName ;;;;;

    toc
T_KLSetKerberosDefaultRealmByName_ProcPtr:	; TOC relative address
    tc      KLSetKerberosDefaultRealmByName_ProcPtr[TC], KLSetKerberosDefaultRealmByName_ProcPtr[RW]
    csect   KLSetKerberosDefaultRealmByName_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLSetKerberosDefaultRealmByName[DS]
    dc.l    .KLSetKerberosDefaultRealmByName[PR]
    dc.l    TOC[tc0]
    
    csect   .KLSetKerberosDefaultRealmByName[PR]
    lwz     r12, T_KLSetKerberosDefaultRealmByName_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLSetKerberosRealm ;;;;;

    toc
T_KLSetKerberosRealm_ProcPtr:	; TOC relative address
    tc      KLSetKerberosRealm_ProcPtr[TC], KLSetKerberosRealm_ProcPtr[RW]
    csect   KLSetKerberosRealm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLSetKerberosRealm[DS]
    dc.l    .KLSetKerberosRealm[PR]
    dc.l    TOC[tc0]
    
    csect   .KLSetKerberosRealm[PR]
    lwz     r12, T_KLSetKerberosRealm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLSetSystemDefaultCache ;;;;;

    toc
T_KLSetSystemDefaultCache_ProcPtr:	; TOC relative address
    tc      KLSetSystemDefaultCache_ProcPtr[TC], KLSetSystemDefaultCache_ProcPtr[RW]
    csect   KLSetSystemDefaultCache_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLSetSystemDefaultCache[DS]
    dc.l    .KLSetSystemDefaultCache[PR]
    dc.l    TOC[tc0]
    
    csect   .KLSetSystemDefaultCache[PR]
    lwz     r12, T_KLSetSystemDefaultCache_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLTicketExpirationTime ;;;;;

    toc
T_KLTicketExpirationTime_ProcPtr:	; TOC relative address
    tc      KLTicketExpirationTime_ProcPtr[TC], KLTicketExpirationTime_ProcPtr[RW]
    csect   KLTicketExpirationTime_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLTicketExpirationTime[DS]
    dc.l    .KLTicketExpirationTime[PR]
    dc.l    TOC[tc0]
    
    csect   .KLTicketExpirationTime[PR]
    lwz     r12, T_KLTicketExpirationTime_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KLTicketStartTime ;;;;;

    toc
T_KLTicketStartTime_ProcPtr:	; TOC relative address
    tc      KLTicketStartTime_ProcPtr[TC], KLTicketStartTime_ProcPtr[RW]
    csect   KLTicketStartTime_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KLTicketStartTime[DS]
    dc.l    .KLTicketStartTime[PR]
    dc.l    TOC[tc0]
    
    csect   .KLTicketStartTime[PR]
    lwz     r12, T_KLTicketStartTime_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KPCreatePreferencesFile ;;;;;

    toc
T_KPCreatePreferencesFile_ProcPtr:	; TOC relative address
    tc      KPCreatePreferencesFile_ProcPtr[TC], KPCreatePreferencesFile_ProcPtr[RW]
    csect   KPCreatePreferencesFile_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KPCreatePreferencesFile[DS]
    dc.l    .KPCreatePreferencesFile[PR]
    dc.l    TOC[tc0]
    
    csect   .KPCreatePreferencesFile[PR]
    lwz     r12, T_KPCreatePreferencesFile_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KPFreeListOfPreferencesFiles ;;;;;

    toc
T_KPFreeListOfPreferencesFiles_ProcPtr:	; TOC relative address
    tc      KPFreeListOfPreferencesFiles_ProcPtr[TC], KPFreeListOfPreferencesFiles_ProcPtr[RW]
    csect   KPFreeListOfPreferencesFiles_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KPFreeListOfPreferencesFiles[DS]
    dc.l    .KPFreeListOfPreferencesFiles[PR]
    dc.l    TOC[tc0]
    
    csect   .KPFreeListOfPreferencesFiles[PR]
    lwz     r12, T_KPFreeListOfPreferencesFiles_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KPGetListOfPreferencesFiles ;;;;;

    toc
T_KPGetListOfPreferencesFiles_ProcPtr:	; TOC relative address
    tc      KPGetListOfPreferencesFiles_ProcPtr[TC], KPGetListOfPreferencesFiles_ProcPtr[RW]
    csect   KPGetListOfPreferencesFiles_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KPGetListOfPreferencesFiles[DS]
    dc.l    .KPGetListOfPreferencesFiles[PR]
    dc.l    TOC[tc0]
    
    csect   .KPGetListOfPreferencesFiles[PR]
    lwz     r12, T_KPGetListOfPreferencesFiles_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KPInitializeWithDefaultKerberosLibraryPreferences ;;;;;

    toc
T_KPInitializeWithDefaultKerberosLibraryPreferences_ProcPtr:	; TOC relative address
    tc      KPInitializeWithDefaultKerberosLibraryPreferences_ProcPtr[TC], KPInitializeWithDefaultKerberosLibraryPreferences_ProcPtr[RW]
    csect   KPInitializeWithDefaultKerberosLibraryPreferences_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KPInitializeWithDefaultKerberosLibraryPreferences[DS]
    dc.l    .KPInitializeWithDefaultKerberosLibraryPreferences[PR]
    dc.l    TOC[tc0]
    
    csect   .KPInitializeWithDefaultKerberosLibraryPreferences[PR]
    lwz     r12, T_KPInitializeWithDefaultKerberosLibraryPreferences_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KPPreferencesFileIsReadable ;;;;;

    toc
T_KPPreferencesFileIsReadable_ProcPtr:	; TOC relative address
    tc      KPPreferencesFileIsReadable_ProcPtr[TC], KPPreferencesFileIsReadable_ProcPtr[RW]
    csect   KPPreferencesFileIsReadable_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KPPreferencesFileIsReadable[DS]
    dc.l    .KPPreferencesFileIsReadable[PR]
    dc.l    TOC[tc0]
    
    csect   .KPPreferencesFileIsReadable[PR]
    lwz     r12, T_KPPreferencesFileIsReadable_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KPPreferencesFileIsWritable ;;;;;

    toc
T_KPPreferencesFileIsWritable_ProcPtr:	; TOC relative address
    tc      KPPreferencesFileIsWritable_ProcPtr[TC], KPPreferencesFileIsWritable_ProcPtr[RW]
    csect   KPPreferencesFileIsWritable_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KPPreferencesFileIsWritable[DS]
    dc.l    .KPPreferencesFileIsWritable[PR]
    dc.l    TOC[tc0]
    
    csect   .KPPreferencesFileIsWritable[PR]
    lwz     r12, T_KPPreferencesFileIsWritable_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KServerAddKeyCompat ;;;;;

    toc
T_KServerAddKeyCompat_ProcPtr:	; TOC relative address
    tc      KServerAddKeyCompat_ProcPtr[TC], KServerAddKeyCompat_ProcPtr[RW]
    csect   KServerAddKeyCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KServerAddKeyCompat[DS]
    dc.l    .KServerAddKeyCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KServerAddKeyCompat[PR]
    lwz     r12, T_KServerAddKeyCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KServerGetKeyCompat ;;;;;

    toc
T_KServerGetKeyCompat_ProcPtr:	; TOC relative address
    tc      KServerGetKeyCompat_ProcPtr[TC], KServerGetKeyCompat_ProcPtr[RW]
    csect   KServerGetKeyCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KServerGetKeyCompat[DS]
    dc.l    .KServerGetKeyCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KServerGetKeyCompat[PR]
    lwz     r12, T_KServerGetKeyCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KServerGetReplyTicketCompat ;;;;;

    toc
T_KServerGetReplyTicketCompat_ProcPtr:	; TOC relative address
    tc      KServerGetReplyTicketCompat_ProcPtr[TC], KServerGetReplyTicketCompat_ProcPtr[RW]
    csect   KServerGetReplyTicketCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KServerGetReplyTicketCompat[DS]
    dc.l    .KServerGetReplyTicketCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KServerGetReplyTicketCompat[PR]
    lwz     r12, T_KServerGetReplyTicketCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KServerGetSessionTimeRemainingCompat ;;;;;

    toc
T_KServerGetSessionTimeRemainingCompat_ProcPtr:	; TOC relative address
    tc      KServerGetSessionTimeRemainingCompat_ProcPtr[TC], KServerGetSessionTimeRemainingCompat_ProcPtr[RW]
    csect   KServerGetSessionTimeRemainingCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KServerGetSessionTimeRemainingCompat[DS]
    dc.l    .KServerGetSessionTimeRemainingCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KServerGetSessionTimeRemainingCompat[PR]
    lwz     r12, T_KServerGetSessionTimeRemainingCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KServerNewSessionCompat ;;;;;

    toc
T_KServerNewSessionCompat_ProcPtr:	; TOC relative address
    tc      KServerNewSessionCompat_ProcPtr[TC], KServerNewSessionCompat_ProcPtr[RW]
    csect   KServerNewSessionCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KServerNewSessionCompat[DS]
    dc.l    .KServerNewSessionCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KServerNewSessionCompat[PR]
    lwz     r12, T_KServerNewSessionCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; KServerVerifyTicketCompat ;;;;;

    toc
T_KServerVerifyTicketCompat_ProcPtr:	; TOC relative address
    tc      KServerVerifyTicketCompat_ProcPtr[TC], KServerVerifyTicketCompat_ProcPtr[RW]
    csect   KServerVerifyTicketCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   KServerVerifyTicketCompat[DS]
    dc.l    .KServerVerifyTicketCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .KServerVerifyTicketCompat[PR]
    lwz     r12, T_KServerVerifyTicketCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __KLChangePasswordWithPasswordsCompat ;;;;;

    toc
T___KLChangePasswordWithPasswordsCompat_ProcPtr:	; TOC relative address
    tc      __KLChangePasswordWithPasswordsCompat_ProcPtr[TC], __KLChangePasswordWithPasswordsCompat_ProcPtr[RW]
    csect   __KLChangePasswordWithPasswordsCompat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __KLChangePasswordWithPasswordsCompat[DS]
    dc.l    .__KLChangePasswordWithPasswordsCompat[PR]
    dc.l    TOC[tc0]
    
    csect   .__KLChangePasswordWithPasswordsCompat[PR]
    lwz     r12, T___KLChangePasswordWithPasswordsCompat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_compare_vector ;;;;;

    toc
T___cc_ccache_compare_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_compare_vector_ProcPtr[TC], __cc_ccache_compare_vector_ProcPtr[RW]
    csect   __cc_ccache_compare_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_compare_vector[DS]
    dc.l    .__cc_ccache_compare_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_compare_vector[PR]
    lwz     r12, T___cc_ccache_compare_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_destroy_vector ;;;;;

    toc
T___cc_ccache_destroy_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_destroy_vector_ProcPtr[TC], __cc_ccache_destroy_vector_ProcPtr[RW]
    csect   __cc_ccache_destroy_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_destroy_vector[DS]
    dc.l    .__cc_ccache_destroy_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_destroy_vector[PR]
    lwz     r12, T___cc_ccache_destroy_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_get_change_time_vector ;;;;;

    toc
T___cc_ccache_get_change_time_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_get_change_time_vector_ProcPtr[TC], __cc_ccache_get_change_time_vector_ProcPtr[RW]
    csect   __cc_ccache_get_change_time_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_get_change_time_vector[DS]
    dc.l    .__cc_ccache_get_change_time_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_get_change_time_vector[PR]
    lwz     r12, T___cc_ccache_get_change_time_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_get_credentials_version_vector ;;;;;

    toc
T___cc_ccache_get_credentials_version_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_get_credentials_version_vector_ProcPtr[TC], __cc_ccache_get_credentials_version_vector_ProcPtr[RW]
    csect   __cc_ccache_get_credentials_version_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_get_credentials_version_vector[DS]
    dc.l    .__cc_ccache_get_credentials_version_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_get_credentials_version_vector[PR]
    lwz     r12, T___cc_ccache_get_credentials_version_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_get_last_default_time_vector ;;;;;

    toc
T___cc_ccache_get_last_default_time_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_get_last_default_time_vector_ProcPtr[TC], __cc_ccache_get_last_default_time_vector_ProcPtr[RW]
    csect   __cc_ccache_get_last_default_time_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_get_last_default_time_vector[DS]
    dc.l    .__cc_ccache_get_last_default_time_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_get_last_default_time_vector[PR]
    lwz     r12, T___cc_ccache_get_last_default_time_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_get_name_vector ;;;;;

    toc
T___cc_ccache_get_name_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_get_name_vector_ProcPtr[TC], __cc_ccache_get_name_vector_ProcPtr[RW]
    csect   __cc_ccache_get_name_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_get_name_vector[DS]
    dc.l    .__cc_ccache_get_name_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_get_name_vector[PR]
    lwz     r12, T___cc_ccache_get_name_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_get_principal_vector ;;;;;

    toc
T___cc_ccache_get_principal_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_get_principal_vector_ProcPtr[TC], __cc_ccache_get_principal_vector_ProcPtr[RW]
    csect   __cc_ccache_get_principal_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_get_principal_vector[DS]
    dc.l    .__cc_ccache_get_principal_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_get_principal_vector[PR]
    lwz     r12, T___cc_ccache_get_principal_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_iterator_next_vector ;;;;;

    toc
T___cc_ccache_iterator_next_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_iterator_next_vector_ProcPtr[TC], __cc_ccache_iterator_next_vector_ProcPtr[RW]
    csect   __cc_ccache_iterator_next_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_iterator_next_vector[DS]
    dc.l    .__cc_ccache_iterator_next_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_iterator_next_vector[PR]
    lwz     r12, T___cc_ccache_iterator_next_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_iterator_release_vector ;;;;;

    toc
T___cc_ccache_iterator_release_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_iterator_release_vector_ProcPtr[TC], __cc_ccache_iterator_release_vector_ProcPtr[RW]
    csect   __cc_ccache_iterator_release_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_iterator_release_vector[DS]
    dc.l    .__cc_ccache_iterator_release_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_iterator_release_vector[PR]
    lwz     r12, T___cc_ccache_iterator_release_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_lock_vector ;;;;;

    toc
T___cc_ccache_lock_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_lock_vector_ProcPtr[TC], __cc_ccache_lock_vector_ProcPtr[RW]
    csect   __cc_ccache_lock_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_lock_vector[DS]
    dc.l    .__cc_ccache_lock_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_lock_vector[PR]
    lwz     r12, T___cc_ccache_lock_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_move_vector ;;;;;

    toc
T___cc_ccache_move_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_move_vector_ProcPtr[TC], __cc_ccache_move_vector_ProcPtr[RW]
    csect   __cc_ccache_move_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_move_vector[DS]
    dc.l    .__cc_ccache_move_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_move_vector[PR]
    lwz     r12, T___cc_ccache_move_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_new_credentials_iterator_vector ;;;;;

    toc
T___cc_ccache_new_credentials_iterator_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_new_credentials_iterator_vector_ProcPtr[TC], __cc_ccache_new_credentials_iterator_vector_ProcPtr[RW]
    csect   __cc_ccache_new_credentials_iterator_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_new_credentials_iterator_vector[DS]
    dc.l    .__cc_ccache_new_credentials_iterator_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_new_credentials_iterator_vector[PR]
    lwz     r12, T___cc_ccache_new_credentials_iterator_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_release_vector ;;;;;

    toc
T___cc_ccache_release_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_release_vector_ProcPtr[TC], __cc_ccache_release_vector_ProcPtr[RW]
    csect   __cc_ccache_release_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_release_vector[DS]
    dc.l    .__cc_ccache_release_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_release_vector[PR]
    lwz     r12, T___cc_ccache_release_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_remove_credentials_vector ;;;;;

    toc
T___cc_ccache_remove_credentials_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_remove_credentials_vector_ProcPtr[TC], __cc_ccache_remove_credentials_vector_ProcPtr[RW]
    csect   __cc_ccache_remove_credentials_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_remove_credentials_vector[DS]
    dc.l    .__cc_ccache_remove_credentials_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_remove_credentials_vector[PR]
    lwz     r12, T___cc_ccache_remove_credentials_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_set_default_vector ;;;;;

    toc
T___cc_ccache_set_default_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_set_default_vector_ProcPtr[TC], __cc_ccache_set_default_vector_ProcPtr[RW]
    csect   __cc_ccache_set_default_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_set_default_vector[DS]
    dc.l    .__cc_ccache_set_default_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_set_default_vector[PR]
    lwz     r12, T___cc_ccache_set_default_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_set_principal_vector ;;;;;

    toc
T___cc_ccache_set_principal_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_set_principal_vector_ProcPtr[TC], __cc_ccache_set_principal_vector_ProcPtr[RW]
    csect   __cc_ccache_set_principal_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_set_principal_vector[DS]
    dc.l    .__cc_ccache_set_principal_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_set_principal_vector[PR]
    lwz     r12, T___cc_ccache_set_principal_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_store_credentials_vector ;;;;;

    toc
T___cc_ccache_store_credentials_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_store_credentials_vector_ProcPtr[TC], __cc_ccache_store_credentials_vector_ProcPtr[RW]
    csect   __cc_ccache_store_credentials_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_store_credentials_vector[DS]
    dc.l    .__cc_ccache_store_credentials_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_store_credentials_vector[PR]
    lwz     r12, T___cc_ccache_store_credentials_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_ccache_unlock_vector ;;;;;

    toc
T___cc_ccache_unlock_vector_ProcPtr:	; TOC relative address
    tc      __cc_ccache_unlock_vector_ProcPtr[TC], __cc_ccache_unlock_vector_ProcPtr[RW]
    csect   __cc_ccache_unlock_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_ccache_unlock_vector[DS]
    dc.l    .__cc_ccache_unlock_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_ccache_unlock_vector[PR]
    lwz     r12, T___cc_ccache_unlock_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_close_vector ;;;;;

    toc
T___cc_close_vector_ProcPtr:	; TOC relative address
    tc      __cc_close_vector_ProcPtr[TC], __cc_close_vector_ProcPtr[RW]
    csect   __cc_close_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_close_vector[DS]
    dc.l    .__cc_close_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_close_vector[PR]
    lwz     r12, T___cc_close_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_compare_vector ;;;;;

    toc
T___cc_context_compare_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_compare_vector_ProcPtr[TC], __cc_context_compare_vector_ProcPtr[RW]
    csect   __cc_context_compare_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_compare_vector[DS]
    dc.l    .__cc_context_compare_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_compare_vector[PR]
    lwz     r12, T___cc_context_compare_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_create_ccache_vector ;;;;;

    toc
T___cc_context_create_ccache_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_create_ccache_vector_ProcPtr[TC], __cc_context_create_ccache_vector_ProcPtr[RW]
    csect   __cc_context_create_ccache_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_create_ccache_vector[DS]
    dc.l    .__cc_context_create_ccache_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_create_ccache_vector[PR]
    lwz     r12, T___cc_context_create_ccache_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_create_default_ccache_vector ;;;;;

    toc
T___cc_context_create_default_ccache_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_create_default_ccache_vector_ProcPtr[TC], __cc_context_create_default_ccache_vector_ProcPtr[RW]
    csect   __cc_context_create_default_ccache_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_create_default_ccache_vector[DS]
    dc.l    .__cc_context_create_default_ccache_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_create_default_ccache_vector[PR]
    lwz     r12, T___cc_context_create_default_ccache_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_create_new_ccache_vector ;;;;;

    toc
T___cc_context_create_new_ccache_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_create_new_ccache_vector_ProcPtr[TC], __cc_context_create_new_ccache_vector_ProcPtr[RW]
    csect   __cc_context_create_new_ccache_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_create_new_ccache_vector[DS]
    dc.l    .__cc_context_create_new_ccache_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_create_new_ccache_vector[PR]
    lwz     r12, T___cc_context_create_new_ccache_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_get_change_time_vector ;;;;;

    toc
T___cc_context_get_change_time_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_get_change_time_vector_ProcPtr[TC], __cc_context_get_change_time_vector_ProcPtr[RW]
    csect   __cc_context_get_change_time_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_get_change_time_vector[DS]
    dc.l    .__cc_context_get_change_time_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_get_change_time_vector[PR]
    lwz     r12, T___cc_context_get_change_time_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_get_default_ccache_name_vector ;;;;;

    toc
T___cc_context_get_default_ccache_name_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_get_default_ccache_name_vector_ProcPtr[TC], __cc_context_get_default_ccache_name_vector_ProcPtr[RW]
    csect   __cc_context_get_default_ccache_name_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_get_default_ccache_name_vector[DS]
    dc.l    .__cc_context_get_default_ccache_name_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_get_default_ccache_name_vector[PR]
    lwz     r12, T___cc_context_get_default_ccache_name_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_lock_vector ;;;;;

    toc
T___cc_context_lock_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_lock_vector_ProcPtr[TC], __cc_context_lock_vector_ProcPtr[RW]
    csect   __cc_context_lock_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_lock_vector[DS]
    dc.l    .__cc_context_lock_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_lock_vector[PR]
    lwz     r12, T___cc_context_lock_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_new_ccache_iterator_vector ;;;;;

    toc
T___cc_context_new_ccache_iterator_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_new_ccache_iterator_vector_ProcPtr[TC], __cc_context_new_ccache_iterator_vector_ProcPtr[RW]
    csect   __cc_context_new_ccache_iterator_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_new_ccache_iterator_vector[DS]
    dc.l    .__cc_context_new_ccache_iterator_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_new_ccache_iterator_vector[PR]
    lwz     r12, T___cc_context_new_ccache_iterator_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_open_ccache_vector ;;;;;

    toc
T___cc_context_open_ccache_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_open_ccache_vector_ProcPtr[TC], __cc_context_open_ccache_vector_ProcPtr[RW]
    csect   __cc_context_open_ccache_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_open_ccache_vector[DS]
    dc.l    .__cc_context_open_ccache_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_open_ccache_vector[PR]
    lwz     r12, T___cc_context_open_ccache_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_open_default_ccache_vector ;;;;;

    toc
T___cc_context_open_default_ccache_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_open_default_ccache_vector_ProcPtr[TC], __cc_context_open_default_ccache_vector_ProcPtr[RW]
    csect   __cc_context_open_default_ccache_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_open_default_ccache_vector[DS]
    dc.l    .__cc_context_open_default_ccache_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_open_default_ccache_vector[PR]
    lwz     r12, T___cc_context_open_default_ccache_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_release_vector ;;;;;

    toc
T___cc_context_release_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_release_vector_ProcPtr[TC], __cc_context_release_vector_ProcPtr[RW]
    csect   __cc_context_release_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_release_vector[DS]
    dc.l    .__cc_context_release_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_release_vector[PR]
    lwz     r12, T___cc_context_release_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_context_unlock_vector ;;;;;

    toc
T___cc_context_unlock_vector_ProcPtr:	; TOC relative address
    tc      __cc_context_unlock_vector_ProcPtr[TC], __cc_context_unlock_vector_ProcPtr[RW]
    csect   __cc_context_unlock_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_context_unlock_vector[DS]
    dc.l    .__cc_context_unlock_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_context_unlock_vector[PR]
    lwz     r12, T___cc_context_unlock_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_create_vector ;;;;;

    toc
T___cc_create_vector_ProcPtr:	; TOC relative address
    tc      __cc_create_vector_ProcPtr[TC], __cc_create_vector_ProcPtr[RW]
    csect   __cc_create_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_create_vector[DS]
    dc.l    .__cc_create_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_create_vector[PR]
    lwz     r12, T___cc_create_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_credentials_compare_vector ;;;;;

    toc
T___cc_credentials_compare_vector_ProcPtr:	; TOC relative address
    tc      __cc_credentials_compare_vector_ProcPtr[TC], __cc_credentials_compare_vector_ProcPtr[RW]
    csect   __cc_credentials_compare_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_credentials_compare_vector[DS]
    dc.l    .__cc_credentials_compare_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_credentials_compare_vector[PR]
    lwz     r12, T___cc_credentials_compare_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_credentials_iterator_next_vector ;;;;;

    toc
T___cc_credentials_iterator_next_vector_ProcPtr:	; TOC relative address
    tc      __cc_credentials_iterator_next_vector_ProcPtr[TC], __cc_credentials_iterator_next_vector_ProcPtr[RW]
    csect   __cc_credentials_iterator_next_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_credentials_iterator_next_vector[DS]
    dc.l    .__cc_credentials_iterator_next_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_credentials_iterator_next_vector[PR]
    lwz     r12, T___cc_credentials_iterator_next_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_credentials_iterator_release_vector ;;;;;

    toc
T___cc_credentials_iterator_release_vector_ProcPtr:	; TOC relative address
    tc      __cc_credentials_iterator_release_vector_ProcPtr[TC], __cc_credentials_iterator_release_vector_ProcPtr[RW]
    csect   __cc_credentials_iterator_release_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_credentials_iterator_release_vector[DS]
    dc.l    .__cc_credentials_iterator_release_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_credentials_iterator_release_vector[PR]
    lwz     r12, T___cc_credentials_iterator_release_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_credentials_release_vector ;;;;;

    toc
T___cc_credentials_release_vector_ProcPtr:	; TOC relative address
    tc      __cc_credentials_release_vector_ProcPtr[TC], __cc_credentials_release_vector_ProcPtr[RW]
    csect   __cc_credentials_release_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_credentials_release_vector[DS]
    dc.l    .__cc_credentials_release_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_credentials_release_vector[PR]
    lwz     r12, T___cc_credentials_release_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_destroy_vector ;;;;;

    toc
T___cc_destroy_vector_ProcPtr:	; TOC relative address
    tc      __cc_destroy_vector_ProcPtr[TC], __cc_destroy_vector_ProcPtr[RW]
    csect   __cc_destroy_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_destroy_vector[DS]
    dc.l    .__cc_destroy_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_destroy_vector[PR]
    lwz     r12, T___cc_destroy_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_free_NC_info_vector ;;;;;

    toc
T___cc_free_NC_info_vector_ProcPtr:	; TOC relative address
    tc      __cc_free_NC_info_vector_ProcPtr[TC], __cc_free_NC_info_vector_ProcPtr[RW]
    csect   __cc_free_NC_info_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_free_NC_info_vector[DS]
    dc.l    .__cc_free_NC_info_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_free_NC_info_vector[PR]
    lwz     r12, T___cc_free_NC_info_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_free_creds_vector ;;;;;

    toc
T___cc_free_creds_vector_ProcPtr:	; TOC relative address
    tc      __cc_free_creds_vector_ProcPtr[TC], __cc_free_creds_vector_ProcPtr[RW]
    csect   __cc_free_creds_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_free_creds_vector[DS]
    dc.l    .__cc_free_creds_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_free_creds_vector[PR]
    lwz     r12, T___cc_free_creds_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_free_name_vector ;;;;;

    toc
T___cc_free_name_vector_ProcPtr:	; TOC relative address
    tc      __cc_free_name_vector_ProcPtr[TC], __cc_free_name_vector_ProcPtr[RW]
    csect   __cc_free_name_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_free_name_vector[DS]
    dc.l    .__cc_free_name_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_free_name_vector[PR]
    lwz     r12, T___cc_free_name_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_free_principal_vector ;;;;;

    toc
T___cc_free_principal_vector_ProcPtr:	; TOC relative address
    tc      __cc_free_principal_vector_ProcPtr[TC], __cc_free_principal_vector_ProcPtr[RW]
    csect   __cc_free_principal_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_free_principal_vector[DS]
    dc.l    .__cc_free_principal_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_free_principal_vector[PR]
    lwz     r12, T___cc_free_principal_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_get_NC_info_vector ;;;;;

    toc
T___cc_get_NC_info_vector_ProcPtr:	; TOC relative address
    tc      __cc_get_NC_info_vector_ProcPtr[TC], __cc_get_NC_info_vector_ProcPtr[RW]
    csect   __cc_get_NC_info_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_get_NC_info_vector[DS]
    dc.l    .__cc_get_NC_info_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_get_NC_info_vector[PR]
    lwz     r12, T___cc_get_NC_info_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_get_change_time_vector ;;;;;

    toc
T___cc_get_change_time_vector_ProcPtr:	; TOC relative address
    tc      __cc_get_change_time_vector_ProcPtr[TC], __cc_get_change_time_vector_ProcPtr[RW]
    csect   __cc_get_change_time_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_get_change_time_vector[DS]
    dc.l    .__cc_get_change_time_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_get_change_time_vector[PR]
    lwz     r12, T___cc_get_change_time_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_get_cred_version_vector ;;;;;

    toc
T___cc_get_cred_version_vector_ProcPtr:	; TOC relative address
    tc      __cc_get_cred_version_vector_ProcPtr[TC], __cc_get_cred_version_vector_ProcPtr[RW]
    csect   __cc_get_cred_version_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_get_cred_version_vector[DS]
    dc.l    .__cc_get_cred_version_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_get_cred_version_vector[PR]
    lwz     r12, T___cc_get_cred_version_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_get_name_vector ;;;;;

    toc
T___cc_get_name_vector_ProcPtr:	; TOC relative address
    tc      __cc_get_name_vector_ProcPtr[TC], __cc_get_name_vector_ProcPtr[RW]
    csect   __cc_get_name_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_get_name_vector[DS]
    dc.l    .__cc_get_name_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_get_name_vector[PR]
    lwz     r12, T___cc_get_name_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_get_principal_vector ;;;;;

    toc
T___cc_get_principal_vector_ProcPtr:	; TOC relative address
    tc      __cc_get_principal_vector_ProcPtr[TC], __cc_get_principal_vector_ProcPtr[RW]
    csect   __cc_get_principal_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_get_principal_vector[DS]
    dc.l    .__cc_get_principal_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_get_principal_vector[PR]
    lwz     r12, T___cc_get_principal_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_initialize_vector ;;;;;

    toc
T___cc_initialize_vector_ProcPtr:	; TOC relative address
    tc      __cc_initialize_vector_ProcPtr[TC], __cc_initialize_vector_ProcPtr[RW]
    csect   __cc_initialize_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_initialize_vector[DS]
    dc.l    .__cc_initialize_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_initialize_vector[PR]
    lwz     r12, T___cc_initialize_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_open_vector ;;;;;

    toc
T___cc_open_vector_ProcPtr:	; TOC relative address
    tc      __cc_open_vector_ProcPtr[TC], __cc_open_vector_ProcPtr[RW]
    csect   __cc_open_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_open_vector[DS]
    dc.l    .__cc_open_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_open_vector[PR]
    lwz     r12, T___cc_open_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_remove_cred_vector ;;;;;

    toc
T___cc_remove_cred_vector_ProcPtr:	; TOC relative address
    tc      __cc_remove_cred_vector_ProcPtr[TC], __cc_remove_cred_vector_ProcPtr[RW]
    csect   __cc_remove_cred_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_remove_cred_vector[DS]
    dc.l    .__cc_remove_cred_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_remove_cred_vector[PR]
    lwz     r12, T___cc_remove_cred_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_seq_fetch_NCs_begin_vector ;;;;;

    toc
T___cc_seq_fetch_NCs_begin_vector_ProcPtr:	; TOC relative address
    tc      __cc_seq_fetch_NCs_begin_vector_ProcPtr[TC], __cc_seq_fetch_NCs_begin_vector_ProcPtr[RW]
    csect   __cc_seq_fetch_NCs_begin_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_seq_fetch_NCs_begin_vector[DS]
    dc.l    .__cc_seq_fetch_NCs_begin_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_seq_fetch_NCs_begin_vector[PR]
    lwz     r12, T___cc_seq_fetch_NCs_begin_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_seq_fetch_NCs_end_vector ;;;;;

    toc
T___cc_seq_fetch_NCs_end_vector_ProcPtr:	; TOC relative address
    tc      __cc_seq_fetch_NCs_end_vector_ProcPtr[TC], __cc_seq_fetch_NCs_end_vector_ProcPtr[RW]
    csect   __cc_seq_fetch_NCs_end_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_seq_fetch_NCs_end_vector[DS]
    dc.l    .__cc_seq_fetch_NCs_end_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_seq_fetch_NCs_end_vector[PR]
    lwz     r12, T___cc_seq_fetch_NCs_end_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_seq_fetch_NCs_next_vector ;;;;;

    toc
T___cc_seq_fetch_NCs_next_vector_ProcPtr:	; TOC relative address
    tc      __cc_seq_fetch_NCs_next_vector_ProcPtr[TC], __cc_seq_fetch_NCs_next_vector_ProcPtr[RW]
    csect   __cc_seq_fetch_NCs_next_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_seq_fetch_NCs_next_vector[DS]
    dc.l    .__cc_seq_fetch_NCs_next_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_seq_fetch_NCs_next_vector[PR]
    lwz     r12, T___cc_seq_fetch_NCs_next_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_seq_fetch_creds_begin_vector ;;;;;

    toc
T___cc_seq_fetch_creds_begin_vector_ProcPtr:	; TOC relative address
    tc      __cc_seq_fetch_creds_begin_vector_ProcPtr[TC], __cc_seq_fetch_creds_begin_vector_ProcPtr[RW]
    csect   __cc_seq_fetch_creds_begin_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_seq_fetch_creds_begin_vector[DS]
    dc.l    .__cc_seq_fetch_creds_begin_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_seq_fetch_creds_begin_vector[PR]
    lwz     r12, T___cc_seq_fetch_creds_begin_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_seq_fetch_creds_end_vector ;;;;;

    toc
T___cc_seq_fetch_creds_end_vector_ProcPtr:	; TOC relative address
    tc      __cc_seq_fetch_creds_end_vector_ProcPtr[TC], __cc_seq_fetch_creds_end_vector_ProcPtr[RW]
    csect   __cc_seq_fetch_creds_end_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_seq_fetch_creds_end_vector[DS]
    dc.l    .__cc_seq_fetch_creds_end_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_seq_fetch_creds_end_vector[PR]
    lwz     r12, T___cc_seq_fetch_creds_end_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_seq_fetch_creds_next_vector ;;;;;

    toc
T___cc_seq_fetch_creds_next_vector_ProcPtr:	; TOC relative address
    tc      __cc_seq_fetch_creds_next_vector_ProcPtr[TC], __cc_seq_fetch_creds_next_vector_ProcPtr[RW]
    csect   __cc_seq_fetch_creds_next_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_seq_fetch_creds_next_vector[DS]
    dc.l    .__cc_seq_fetch_creds_next_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_seq_fetch_creds_next_vector[PR]
    lwz     r12, T___cc_seq_fetch_creds_next_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_set_principal_vector ;;;;;

    toc
T___cc_set_principal_vector_ProcPtr:	; TOC relative address
    tc      __cc_set_principal_vector_ProcPtr[TC], __cc_set_principal_vector_ProcPtr[RW]
    csect   __cc_set_principal_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_set_principal_vector[DS]
    dc.l    .__cc_set_principal_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_set_principal_vector[PR]
    lwz     r12, T___cc_set_principal_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_shutdown_vector ;;;;;

    toc
T___cc_shutdown_vector_ProcPtr:	; TOC relative address
    tc      __cc_shutdown_vector_ProcPtr[TC], __cc_shutdown_vector_ProcPtr[RW]
    csect   __cc_shutdown_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_shutdown_vector[DS]
    dc.l    .__cc_shutdown_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_shutdown_vector[PR]
    lwz     r12, T___cc_shutdown_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_store_vector ;;;;;

    toc
T___cc_store_vector_ProcPtr:	; TOC relative address
    tc      __cc_store_vector_ProcPtr[TC], __cc_store_vector_ProcPtr[RW]
    csect   __cc_store_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_store_vector[DS]
    dc.l    .__cc_store_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_store_vector[PR]
    lwz     r12, T___cc_store_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; __cc_string_release_vector ;;;;;

    toc
T___cc_string_release_vector_ProcPtr:	; TOC relative address
    tc      __cc_string_release_vector_ProcPtr[TC], __cc_string_release_vector_ProcPtr[RW]
    csect   __cc_string_release_vector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   __cc_string_release_vector[DS]
    dc.l    .__cc_string_release_vector[PR]
    dc.l    TOC[tc0]
    
    csect   .__cc_string_release_vector[PR]
    lwz     r12, T___cc_string_release_vector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; add_error_table ;;;;;

    toc
T_add_error_table_ProcPtr:	; TOC relative address
    tc      add_error_table_ProcPtr[TC], add_error_table_ProcPtr[RW]
    csect   add_error_table_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   add_error_table[DS]
    dc.l    .add_error_table[PR]
    dc.l    TOC[tc0]
    
    csect   .add_error_table[PR]
    lwz     r12, T_add_error_table_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; afs_string_to_key ;;;;;

    toc
T_afs_string_to_key_ProcPtr:	; TOC relative address
    tc      afs_string_to_key_ProcPtr[TC], afs_string_to_key_ProcPtr[RW]
    csect   afs_string_to_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   afs_string_to_key[DS]
    dc.l    .afs_string_to_key[PR]
    dc.l    TOC[tc0]
    
    csect   .afs_string_to_key[PR]
    lwz     r12, T_afs_string_to_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_close ;;;;;

    toc
T_cc_close_ProcPtr:	; TOC relative address
    tc      cc_close_ProcPtr[TC], cc_close_ProcPtr[RW]
    csect   cc_close_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_close[DS]
    dc.l    .cc_close[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_close[PR]
    lwz     r12, T_cc_close_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_create ;;;;;

    toc
T_cc_create_ProcPtr:	; TOC relative address
    tc      cc_create_ProcPtr[TC], cc_create_ProcPtr[RW]
    csect   cc_create_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_create[DS]
    dc.l    .cc_create[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_create[PR]
    lwz     r12, T_cc_create_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_destroy ;;;;;

    toc
T_cc_destroy_ProcPtr:	; TOC relative address
    tc      cc_destroy_ProcPtr[TC], cc_destroy_ProcPtr[RW]
    csect   cc_destroy_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_destroy[DS]
    dc.l    .cc_destroy[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_destroy[PR]
    lwz     r12, T_cc_destroy_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_free_NC_info ;;;;;

    toc
T_cc_free_NC_info_ProcPtr:	; TOC relative address
    tc      cc_free_NC_info_ProcPtr[TC], cc_free_NC_info_ProcPtr[RW]
    csect   cc_free_NC_info_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_free_NC_info[DS]
    dc.l    .cc_free_NC_info[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_free_NC_info[PR]
    lwz     r12, T_cc_free_NC_info_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_free_creds ;;;;;

    toc
T_cc_free_creds_ProcPtr:	; TOC relative address
    tc      cc_free_creds_ProcPtr[TC], cc_free_creds_ProcPtr[RW]
    csect   cc_free_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_free_creds[DS]
    dc.l    .cc_free_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_free_creds[PR]
    lwz     r12, T_cc_free_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_free_name ;;;;;

    toc
T_cc_free_name_ProcPtr:	; TOC relative address
    tc      cc_free_name_ProcPtr[TC], cc_free_name_ProcPtr[RW]
    csect   cc_free_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_free_name[DS]
    dc.l    .cc_free_name[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_free_name[PR]
    lwz     r12, T_cc_free_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_free_principal ;;;;;

    toc
T_cc_free_principal_ProcPtr:	; TOC relative address
    tc      cc_free_principal_ProcPtr[TC], cc_free_principal_ProcPtr[RW]
    csect   cc_free_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_free_principal[DS]
    dc.l    .cc_free_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_free_principal[PR]
    lwz     r12, T_cc_free_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_get_NC_info ;;;;;

    toc
T_cc_get_NC_info_ProcPtr:	; TOC relative address
    tc      cc_get_NC_info_ProcPtr[TC], cc_get_NC_info_ProcPtr[RW]
    csect   cc_get_NC_info_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_get_NC_info[DS]
    dc.l    .cc_get_NC_info[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_get_NC_info[PR]
    lwz     r12, T_cc_get_NC_info_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_get_change_time ;;;;;

    toc
T_cc_get_change_time_ProcPtr:	; TOC relative address
    tc      cc_get_change_time_ProcPtr[TC], cc_get_change_time_ProcPtr[RW]
    csect   cc_get_change_time_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_get_change_time[DS]
    dc.l    .cc_get_change_time[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_get_change_time[PR]
    lwz     r12, T_cc_get_change_time_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_get_cred_version ;;;;;

    toc
T_cc_get_cred_version_ProcPtr:	; TOC relative address
    tc      cc_get_cred_version_ProcPtr[TC], cc_get_cred_version_ProcPtr[RW]
    csect   cc_get_cred_version_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_get_cred_version[DS]
    dc.l    .cc_get_cred_version[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_get_cred_version[PR]
    lwz     r12, T_cc_get_cred_version_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_get_name ;;;;;

    toc
T_cc_get_name_ProcPtr:	; TOC relative address
    tc      cc_get_name_ProcPtr[TC], cc_get_name_ProcPtr[RW]
    csect   cc_get_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_get_name[DS]
    dc.l    .cc_get_name[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_get_name[PR]
    lwz     r12, T_cc_get_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_get_principal ;;;;;

    toc
T_cc_get_principal_ProcPtr:	; TOC relative address
    tc      cc_get_principal_ProcPtr[TC], cc_get_principal_ProcPtr[RW]
    csect   cc_get_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_get_principal[DS]
    dc.l    .cc_get_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_get_principal[PR]
    lwz     r12, T_cc_get_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_initialize ;;;;;

    toc
T_cc_initialize_ProcPtr:	; TOC relative address
    tc      cc_initialize_ProcPtr[TC], cc_initialize_ProcPtr[RW]
    csect   cc_initialize_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_initialize[DS]
    dc.l    .cc_initialize[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_initialize[PR]
    lwz     r12, T_cc_initialize_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_open ;;;;;

    toc
T_cc_open_ProcPtr:	; TOC relative address
    tc      cc_open_ProcPtr[TC], cc_open_ProcPtr[RW]
    csect   cc_open_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_open[DS]
    dc.l    .cc_open[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_open[PR]
    lwz     r12, T_cc_open_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_remove_cred ;;;;;

    toc
T_cc_remove_cred_ProcPtr:	; TOC relative address
    tc      cc_remove_cred_ProcPtr[TC], cc_remove_cred_ProcPtr[RW]
    csect   cc_remove_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_remove_cred[DS]
    dc.l    .cc_remove_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_remove_cred[PR]
    lwz     r12, T_cc_remove_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_seq_fetch_NCs_begin ;;;;;

    toc
T_cc_seq_fetch_NCs_begin_ProcPtr:	; TOC relative address
    tc      cc_seq_fetch_NCs_begin_ProcPtr[TC], cc_seq_fetch_NCs_begin_ProcPtr[RW]
    csect   cc_seq_fetch_NCs_begin_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_seq_fetch_NCs_begin[DS]
    dc.l    .cc_seq_fetch_NCs_begin[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_seq_fetch_NCs_begin[PR]
    lwz     r12, T_cc_seq_fetch_NCs_begin_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_seq_fetch_NCs_end ;;;;;

    toc
T_cc_seq_fetch_NCs_end_ProcPtr:	; TOC relative address
    tc      cc_seq_fetch_NCs_end_ProcPtr[TC], cc_seq_fetch_NCs_end_ProcPtr[RW]
    csect   cc_seq_fetch_NCs_end_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_seq_fetch_NCs_end[DS]
    dc.l    .cc_seq_fetch_NCs_end[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_seq_fetch_NCs_end[PR]
    lwz     r12, T_cc_seq_fetch_NCs_end_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_seq_fetch_NCs_next ;;;;;

    toc
T_cc_seq_fetch_NCs_next_ProcPtr:	; TOC relative address
    tc      cc_seq_fetch_NCs_next_ProcPtr[TC], cc_seq_fetch_NCs_next_ProcPtr[RW]
    csect   cc_seq_fetch_NCs_next_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_seq_fetch_NCs_next[DS]
    dc.l    .cc_seq_fetch_NCs_next[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_seq_fetch_NCs_next[PR]
    lwz     r12, T_cc_seq_fetch_NCs_next_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_seq_fetch_creds_begin ;;;;;

    toc
T_cc_seq_fetch_creds_begin_ProcPtr:	; TOC relative address
    tc      cc_seq_fetch_creds_begin_ProcPtr[TC], cc_seq_fetch_creds_begin_ProcPtr[RW]
    csect   cc_seq_fetch_creds_begin_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_seq_fetch_creds_begin[DS]
    dc.l    .cc_seq_fetch_creds_begin[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_seq_fetch_creds_begin[PR]
    lwz     r12, T_cc_seq_fetch_creds_begin_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_seq_fetch_creds_end ;;;;;

    toc
T_cc_seq_fetch_creds_end_ProcPtr:	; TOC relative address
    tc      cc_seq_fetch_creds_end_ProcPtr[TC], cc_seq_fetch_creds_end_ProcPtr[RW]
    csect   cc_seq_fetch_creds_end_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_seq_fetch_creds_end[DS]
    dc.l    .cc_seq_fetch_creds_end[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_seq_fetch_creds_end[PR]
    lwz     r12, T_cc_seq_fetch_creds_end_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_seq_fetch_creds_next ;;;;;

    toc
T_cc_seq_fetch_creds_next_ProcPtr:	; TOC relative address
    tc      cc_seq_fetch_creds_next_ProcPtr[TC], cc_seq_fetch_creds_next_ProcPtr[RW]
    csect   cc_seq_fetch_creds_next_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_seq_fetch_creds_next[DS]
    dc.l    .cc_seq_fetch_creds_next[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_seq_fetch_creds_next[PR]
    lwz     r12, T_cc_seq_fetch_creds_next_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_set_principal ;;;;;

    toc
T_cc_set_principal_ProcPtr:	; TOC relative address
    tc      cc_set_principal_ProcPtr[TC], cc_set_principal_ProcPtr[RW]
    csect   cc_set_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_set_principal[DS]
    dc.l    .cc_set_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_set_principal[PR]
    lwz     r12, T_cc_set_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_shutdown ;;;;;

    toc
T_cc_shutdown_ProcPtr:	; TOC relative address
    tc      cc_shutdown_ProcPtr[TC], cc_shutdown_ProcPtr[RW]
    csect   cc_shutdown_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_shutdown[DS]
    dc.l    .cc_shutdown[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_shutdown[PR]
    lwz     r12, T_cc_shutdown_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; cc_store ;;;;;

    toc
T_cc_store_ProcPtr:	; TOC relative address
    tc      cc_store_ProcPtr[TC], cc_store_ProcPtr[RW]
    csect   cc_store_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   cc_store[DS]
    dc.l    .cc_store[PR]
    dc.l    TOC[tc0]
    
    csect   .cc_store[PR]
    lwz     r12, T_cc_store_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; decomp_ticket ;;;;;

    toc
T_decomp_ticket_ProcPtr:	; TOC relative address
    tc      decomp_ticket_ProcPtr[TC], decomp_ticket_ProcPtr[RW]
    csect   decomp_ticket_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   decomp_ticket[DS]
    dc.l    .decomp_ticket[PR]
    dc.l    TOC[tc0]
    
    csect   .decomp_ticket[PR]
    lwz     r12, T_decomp_ticket_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_3cbc_encrypt ;;;;;

    toc
T_des_3cbc_encrypt_ProcPtr:	; TOC relative address
    tc      des_3cbc_encrypt_ProcPtr[TC], des_3cbc_encrypt_ProcPtr[RW]
    csect   des_3cbc_encrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_3cbc_encrypt[DS]
    dc.l    .des_3cbc_encrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .des_3cbc_encrypt[PR]
    lwz     r12, T_des_3cbc_encrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_3ecb_encrypt ;;;;;

    toc
T_des_3ecb_encrypt_ProcPtr:	; TOC relative address
    tc      des_3ecb_encrypt_ProcPtr[TC], des_3ecb_encrypt_ProcPtr[RW]
    csect   des_3ecb_encrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_3ecb_encrypt[DS]
    dc.l    .des_3ecb_encrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .des_3ecb_encrypt[PR]
    lwz     r12, T_des_3ecb_encrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_cbc_cksum ;;;;;

    toc
T_des_cbc_cksum_ProcPtr:	; TOC relative address
    tc      des_cbc_cksum_ProcPtr[TC], des_cbc_cksum_ProcPtr[RW]
    csect   des_cbc_cksum_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_cbc_cksum[DS]
    dc.l    .des_cbc_cksum[PR]
    dc.l    TOC[tc0]
    
    csect   .des_cbc_cksum[PR]
    lwz     r12, T_des_cbc_cksum_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_cbc_encrypt ;;;;;

    toc
T_des_cbc_encrypt_ProcPtr:	; TOC relative address
    tc      des_cbc_encrypt_ProcPtr[TC], des_cbc_encrypt_ProcPtr[RW]
    csect   des_cbc_encrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_cbc_encrypt[DS]
    dc.l    .des_cbc_encrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .des_cbc_encrypt[PR]
    lwz     r12, T_des_cbc_encrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_cblock_print_file ;;;;;

    toc
T_des_cblock_print_file_ProcPtr:	; TOC relative address
    tc      des_cblock_print_file_ProcPtr[TC], des_cblock_print_file_ProcPtr[RW]
    csect   des_cblock_print_file_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_cblock_print_file[DS]
    dc.l    .des_cblock_print_file[PR]
    dc.l    TOC[tc0]
    
    csect   .des_cblock_print_file[PR]
    lwz     r12, T_des_cblock_print_file_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_check_key_parity ;;;;;

    toc
T_des_check_key_parity_ProcPtr:	; TOC relative address
    tc      des_check_key_parity_ProcPtr[TC], des_check_key_parity_ProcPtr[RW]
    csect   des_check_key_parity_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_check_key_parity[DS]
    dc.l    .des_check_key_parity[PR]
    dc.l    TOC[tc0]
    
    csect   .des_check_key_parity[PR]
    lwz     r12, T_des_check_key_parity_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_crypt ;;;;;

    toc
T_des_crypt_ProcPtr:	; TOC relative address
    tc      des_crypt_ProcPtr[TC], des_crypt_ProcPtr[RW]
    csect   des_crypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_crypt[DS]
    dc.l    .des_crypt[PR]
    dc.l    TOC[tc0]
    
    csect   .des_crypt[PR]
    lwz     r12, T_des_crypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_debug ;;;;;

    toc
T_des_debug_ProcPtr:	; TOC relative address
    tc      des_debug_ProcPtr[TC], des_debug_ProcPtr[RW]
    csect   des_debug_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_debug[DS]
    dc.l    .des_debug[PR]
    dc.l    TOC[tc0]
    
    csect   .des_debug[PR]
    lwz     r12, T_des_debug_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_ecb_encrypt ;;;;;

    toc
T_des_ecb_encrypt_ProcPtr:	; TOC relative address
    tc      des_ecb_encrypt_ProcPtr[TC], des_ecb_encrypt_ProcPtr[RW]
    csect   des_ecb_encrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_ecb_encrypt[DS]
    dc.l    .des_ecb_encrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .des_ecb_encrypt[PR]
    lwz     r12, T_des_ecb_encrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_fcrypt ;;;;;

    toc
T_des_fcrypt_ProcPtr:	; TOC relative address
    tc      des_fcrypt_ProcPtr[TC], des_fcrypt_ProcPtr[RW]
    csect   des_fcrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_fcrypt[DS]
    dc.l    .des_fcrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .des_fcrypt[PR]
    lwz     r12, T_des_fcrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_fixup_key_parity ;;;;;

    toc
T_des_fixup_key_parity_ProcPtr:	; TOC relative address
    tc      des_fixup_key_parity_ProcPtr[TC], des_fixup_key_parity_ProcPtr[RW]
    csect   des_fixup_key_parity_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_fixup_key_parity[DS]
    dc.l    .des_fixup_key_parity[PR]
    dc.l    TOC[tc0]
    
    csect   .des_fixup_key_parity[PR]
    lwz     r12, T_des_fixup_key_parity_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_generate_random_block ;;;;;

    toc
T_des_generate_random_block_ProcPtr:	; TOC relative address
    tc      des_generate_random_block_ProcPtr[TC], des_generate_random_block_ProcPtr[RW]
    csect   des_generate_random_block_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_generate_random_block[DS]
    dc.l    .des_generate_random_block[PR]
    dc.l    TOC[tc0]
    
    csect   .des_generate_random_block[PR]
    lwz     r12, T_des_generate_random_block_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_init_random_number_generator ;;;;;

    toc
T_des_init_random_number_generator_ProcPtr:	; TOC relative address
    tc      des_init_random_number_generator_ProcPtr[TC], des_init_random_number_generator_ProcPtr[RW]
    csect   des_init_random_number_generator_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_init_random_number_generator[DS]
    dc.l    .des_init_random_number_generator[PR]
    dc.l    TOC[tc0]
    
    csect   .des_init_random_number_generator[PR]
    lwz     r12, T_des_init_random_number_generator_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_is_weak_key ;;;;;

    toc
T_des_is_weak_key_ProcPtr:	; TOC relative address
    tc      des_is_weak_key_ProcPtr[TC], des_is_weak_key_ProcPtr[RW]
    csect   des_is_weak_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_is_weak_key[DS]
    dc.l    .des_is_weak_key[PR]
    dc.l    TOC[tc0]
    
    csect   .des_is_weak_key[PR]
    lwz     r12, T_des_is_weak_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_key_sched ;;;;;

    toc
T_des_key_sched_ProcPtr:	; TOC relative address
    tc      des_key_sched_ProcPtr[TC], des_key_sched_ProcPtr[RW]
    csect   des_key_sched_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_key_sched[DS]
    dc.l    .des_key_sched[PR]
    dc.l    TOC[tc0]
    
    csect   .des_key_sched[PR]
    lwz     r12, T_des_key_sched_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_new_random_key ;;;;;

    toc
T_des_new_random_key_ProcPtr:	; TOC relative address
    tc      des_new_random_key_ProcPtr[TC], des_new_random_key_ProcPtr[RW]
    csect   des_new_random_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_new_random_key[DS]
    dc.l    .des_new_random_key[PR]
    dc.l    TOC[tc0]
    
    csect   .des_new_random_key[PR]
    lwz     r12, T_des_new_random_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_pcbc_encrypt ;;;;;

    toc
T_des_pcbc_encrypt_ProcPtr:	; TOC relative address
    tc      des_pcbc_encrypt_ProcPtr[TC], des_pcbc_encrypt_ProcPtr[RW]
    csect   des_pcbc_encrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_pcbc_encrypt[DS]
    dc.l    .des_pcbc_encrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .des_pcbc_encrypt[PR]
    lwz     r12, T_des_pcbc_encrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_quad_cksum ;;;;;

    toc
T_des_quad_cksum_ProcPtr:	; TOC relative address
    tc      des_quad_cksum_ProcPtr[TC], des_quad_cksum_ProcPtr[RW]
    csect   des_quad_cksum_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_quad_cksum[DS]
    dc.l    .des_quad_cksum[PR]
    dc.l    TOC[tc0]
    
    csect   .des_quad_cksum[PR]
    lwz     r12, T_des_quad_cksum_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_random_key ;;;;;

    toc
T_des_random_key_ProcPtr:	; TOC relative address
    tc      des_random_key_ProcPtr[TC], des_random_key_ProcPtr[RW]
    csect   des_random_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_random_key[DS]
    dc.l    .des_random_key[PR]
    dc.l    TOC[tc0]
    
    csect   .des_random_key[PR]
    lwz     r12, T_des_random_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_read_password ;;;;;

    toc
T_des_read_password_ProcPtr:	; TOC relative address
    tc      des_read_password_ProcPtr[TC], des_read_password_ProcPtr[RW]
    csect   des_read_password_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_read_password[DS]
    dc.l    .des_read_password[PR]
    dc.l    TOC[tc0]
    
    csect   .des_read_password[PR]
    lwz     r12, T_des_read_password_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_read_pw_string ;;;;;

    toc
T_des_read_pw_string_ProcPtr:	; TOC relative address
    tc      des_read_pw_string_ProcPtr[TC], des_read_pw_string_ProcPtr[RW]
    csect   des_read_pw_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_read_pw_string[DS]
    dc.l    .des_read_pw_string[PR]
    dc.l    TOC[tc0]
    
    csect   .des_read_pw_string[PR]
    lwz     r12, T_des_read_pw_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_set_key ;;;;;

    toc
T_des_set_key_ProcPtr:	; TOC relative address
    tc      des_set_key_ProcPtr[TC], des_set_key_ProcPtr[RW]
    csect   des_set_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_set_key[DS]
    dc.l    .des_set_key[PR]
    dc.l    TOC[tc0]
    
    csect   .des_set_key[PR]
    lwz     r12, T_des_set_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_set_random_generator_seed ;;;;;

    toc
T_des_set_random_generator_seed_ProcPtr:	; TOC relative address
    tc      des_set_random_generator_seed_ProcPtr[TC], des_set_random_generator_seed_ProcPtr[RW]
    csect   des_set_random_generator_seed_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_set_random_generator_seed[DS]
    dc.l    .des_set_random_generator_seed[PR]
    dc.l    TOC[tc0]
    
    csect   .des_set_random_generator_seed[PR]
    lwz     r12, T_des_set_random_generator_seed_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_set_sequence_number ;;;;;

    toc
T_des_set_sequence_number_ProcPtr:	; TOC relative address
    tc      des_set_sequence_number_ProcPtr[TC], des_set_sequence_number_ProcPtr[RW]
    csect   des_set_sequence_number_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_set_sequence_number[DS]
    dc.l    .des_set_sequence_number[PR]
    dc.l    TOC[tc0]
    
    csect   .des_set_sequence_number[PR]
    lwz     r12, T_des_set_sequence_number_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; des_string_to_key ;;;;;

    toc
T_des_string_to_key_ProcPtr:	; TOC relative address
    tc      des_string_to_key_ProcPtr[TC], des_string_to_key_ProcPtr[RW]
    csect   des_string_to_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   des_string_to_key[DS]
    dc.l    .des_string_to_key[PR]
    dc.l    TOC[tc0]
    
    csect   .des_string_to_key[PR]
    lwz     r12, T_des_string_to_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; dest_all_tkts ;;;;;

    toc
T_dest_all_tkts_ProcPtr:	; TOC relative address
    tc      dest_all_tkts_ProcPtr[TC], dest_all_tkts_ProcPtr[RW]
    csect   dest_all_tkts_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   dest_all_tkts[DS]
    dc.l    .dest_all_tkts[PR]
    dc.l    TOC[tc0]
    
    csect   .dest_all_tkts[PR]
    lwz     r12, T_dest_all_tkts_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; dest_tkt ;;;;;

    toc
T_dest_tkt_ProcPtr:	; TOC relative address
    tc      dest_tkt_ProcPtr[TC], dest_tkt_ProcPtr[RW]
    csect   dest_tkt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   dest_tkt[DS]
    dc.l    .dest_tkt[PR]
    dc.l    TOC[tc0]
    
    csect   .dest_tkt[PR]
    lwz     r12, T_dest_tkt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; error_message ;;;;;

    toc
T_error_message_ProcPtr:	; TOC relative address
    tc      error_message_ProcPtr[TC], error_message_ProcPtr[RW]
    csect   error_message_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   error_message[DS]
    dc.l    .error_message[PR]
    dc.l    TOC[tc0]
    
    csect   .error_message[PR]
    lwz     r12, T_error_message_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; get_ad_tkt ;;;;;

    toc
T_get_ad_tkt_ProcPtr:	; TOC relative address
    tc      get_ad_tkt_ProcPtr[TC], get_ad_tkt_ProcPtr[RW]
    csect   get_ad_tkt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   get_ad_tkt[DS]
    dc.l    .get_ad_tkt[PR]
    dc.l    TOC[tc0]
    
    csect   .get_ad_tkt[PR]
    lwz     r12, T_get_ad_tkt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; get_pw_tkt ;;;;;

    toc
T_get_pw_tkt_ProcPtr:	; TOC relative address
    tc      get_pw_tkt_ProcPtr[TC], get_pw_tkt_ProcPtr[RW]
    csect   get_pw_tkt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   get_pw_tkt[DS]
    dc.l    .get_pw_tkt[PR]
    dc.l    TOC[tc0]
    
    csect   .get_pw_tkt[PR]
    lwz     r12, T_get_pw_tkt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_accept_sec_context ;;;;;

    toc
T_gss_accept_sec_context_ProcPtr:	; TOC relative address
    tc      gss_accept_sec_context_ProcPtr[TC], gss_accept_sec_context_ProcPtr[RW]
    csect   gss_accept_sec_context_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_accept_sec_context[DS]
    dc.l    .gss_accept_sec_context[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_accept_sec_context[PR]
    lwz     r12, T_gss_accept_sec_context_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_acquire_cred ;;;;;

    toc
T_gss_acquire_cred_ProcPtr:	; TOC relative address
    tc      gss_acquire_cred_ProcPtr[TC], gss_acquire_cred_ProcPtr[RW]
    csect   gss_acquire_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_acquire_cred[DS]
    dc.l    .gss_acquire_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_acquire_cred[PR]
    lwz     r12, T_gss_acquire_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_add_cred ;;;;;

    toc
T_gss_add_cred_ProcPtr:	; TOC relative address
    tc      gss_add_cred_ProcPtr[TC], gss_add_cred_ProcPtr[RW]
    csect   gss_add_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_add_cred[DS]
    dc.l    .gss_add_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_add_cred[PR]
    lwz     r12, T_gss_add_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_add_oid_set_member ;;;;;

    toc
T_gss_add_oid_set_member_ProcPtr:	; TOC relative address
    tc      gss_add_oid_set_member_ProcPtr[TC], gss_add_oid_set_member_ProcPtr[RW]
    csect   gss_add_oid_set_member_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_add_oid_set_member[DS]
    dc.l    .gss_add_oid_set_member[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_add_oid_set_member[PR]
    lwz     r12, T_gss_add_oid_set_member_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_canonicalize_name ;;;;;

    toc
T_gss_canonicalize_name_ProcPtr:	; TOC relative address
    tc      gss_canonicalize_name_ProcPtr[TC], gss_canonicalize_name_ProcPtr[RW]
    csect   gss_canonicalize_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_canonicalize_name[DS]
    dc.l    .gss_canonicalize_name[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_canonicalize_name[PR]
    lwz     r12, T_gss_canonicalize_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_compare_name ;;;;;

    toc
T_gss_compare_name_ProcPtr:	; TOC relative address
    tc      gss_compare_name_ProcPtr[TC], gss_compare_name_ProcPtr[RW]
    csect   gss_compare_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_compare_name[DS]
    dc.l    .gss_compare_name[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_compare_name[PR]
    lwz     r12, T_gss_compare_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_context_time ;;;;;

    toc
T_gss_context_time_ProcPtr:	; TOC relative address
    tc      gss_context_time_ProcPtr[TC], gss_context_time_ProcPtr[RW]
    csect   gss_context_time_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_context_time[DS]
    dc.l    .gss_context_time[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_context_time[PR]
    lwz     r12, T_gss_context_time_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_create_empty_oid_set ;;;;;

    toc
T_gss_create_empty_oid_set_ProcPtr:	; TOC relative address
    tc      gss_create_empty_oid_set_ProcPtr[TC], gss_create_empty_oid_set_ProcPtr[RW]
    csect   gss_create_empty_oid_set_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_create_empty_oid_set[DS]
    dc.l    .gss_create_empty_oid_set[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_create_empty_oid_set[PR]
    lwz     r12, T_gss_create_empty_oid_set_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_delete_sec_context ;;;;;

    toc
T_gss_delete_sec_context_ProcPtr:	; TOC relative address
    tc      gss_delete_sec_context_ProcPtr[TC], gss_delete_sec_context_ProcPtr[RW]
    csect   gss_delete_sec_context_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_delete_sec_context[DS]
    dc.l    .gss_delete_sec_context[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_delete_sec_context[PR]
    lwz     r12, T_gss_delete_sec_context_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_display_name ;;;;;

    toc
T_gss_display_name_ProcPtr:	; TOC relative address
    tc      gss_display_name_ProcPtr[TC], gss_display_name_ProcPtr[RW]
    csect   gss_display_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_display_name[DS]
    dc.l    .gss_display_name[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_display_name[PR]
    lwz     r12, T_gss_display_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_display_status ;;;;;

    toc
T_gss_display_status_ProcPtr:	; TOC relative address
    tc      gss_display_status_ProcPtr[TC], gss_display_status_ProcPtr[RW]
    csect   gss_display_status_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_display_status[DS]
    dc.l    .gss_display_status[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_display_status[PR]
    lwz     r12, T_gss_display_status_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_duplicate_name ;;;;;

    toc
T_gss_duplicate_name_ProcPtr:	; TOC relative address
    tc      gss_duplicate_name_ProcPtr[TC], gss_duplicate_name_ProcPtr[RW]
    csect   gss_duplicate_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_duplicate_name[DS]
    dc.l    .gss_duplicate_name[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_duplicate_name[PR]
    lwz     r12, T_gss_duplicate_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_export_name ;;;;;

    toc
T_gss_export_name_ProcPtr:	; TOC relative address
    tc      gss_export_name_ProcPtr[TC], gss_export_name_ProcPtr[RW]
    csect   gss_export_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_export_name[DS]
    dc.l    .gss_export_name[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_export_name[PR]
    lwz     r12, T_gss_export_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_export_sec_context ;;;;;

    toc
T_gss_export_sec_context_ProcPtr:	; TOC relative address
    tc      gss_export_sec_context_ProcPtr[TC], gss_export_sec_context_ProcPtr[RW]
    csect   gss_export_sec_context_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_export_sec_context[DS]
    dc.l    .gss_export_sec_context[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_export_sec_context[PR]
    lwz     r12, T_gss_export_sec_context_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_get_mic ;;;;;

    toc
T_gss_get_mic_ProcPtr:	; TOC relative address
    tc      gss_get_mic_ProcPtr[TC], gss_get_mic_ProcPtr[RW]
    csect   gss_get_mic_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_get_mic[DS]
    dc.l    .gss_get_mic[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_get_mic[PR]
    lwz     r12, T_gss_get_mic_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_import_name ;;;;;

    toc
T_gss_import_name_ProcPtr:	; TOC relative address
    tc      gss_import_name_ProcPtr[TC], gss_import_name_ProcPtr[RW]
    csect   gss_import_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_import_name[DS]
    dc.l    .gss_import_name[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_import_name[PR]
    lwz     r12, T_gss_import_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_import_sec_context ;;;;;

    toc
T_gss_import_sec_context_ProcPtr:	; TOC relative address
    tc      gss_import_sec_context_ProcPtr[TC], gss_import_sec_context_ProcPtr[RW]
    csect   gss_import_sec_context_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_import_sec_context[DS]
    dc.l    .gss_import_sec_context[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_import_sec_context[PR]
    lwz     r12, T_gss_import_sec_context_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_indicate_mechs ;;;;;

    toc
T_gss_indicate_mechs_ProcPtr:	; TOC relative address
    tc      gss_indicate_mechs_ProcPtr[TC], gss_indicate_mechs_ProcPtr[RW]
    csect   gss_indicate_mechs_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_indicate_mechs[DS]
    dc.l    .gss_indicate_mechs[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_indicate_mechs[PR]
    lwz     r12, T_gss_indicate_mechs_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_init_sec_context ;;;;;

    toc
T_gss_init_sec_context_ProcPtr:	; TOC relative address
    tc      gss_init_sec_context_ProcPtr[TC], gss_init_sec_context_ProcPtr[RW]
    csect   gss_init_sec_context_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_init_sec_context[DS]
    dc.l    .gss_init_sec_context[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_init_sec_context[PR]
    lwz     r12, T_gss_init_sec_context_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_inquire_context ;;;;;

    toc
T_gss_inquire_context_ProcPtr:	; TOC relative address
    tc      gss_inquire_context_ProcPtr[TC], gss_inquire_context_ProcPtr[RW]
    csect   gss_inquire_context_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_inquire_context[DS]
    dc.l    .gss_inquire_context[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_inquire_context[PR]
    lwz     r12, T_gss_inquire_context_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_inquire_cred ;;;;;

    toc
T_gss_inquire_cred_ProcPtr:	; TOC relative address
    tc      gss_inquire_cred_ProcPtr[TC], gss_inquire_cred_ProcPtr[RW]
    csect   gss_inquire_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_inquire_cred[DS]
    dc.l    .gss_inquire_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_inquire_cred[PR]
    lwz     r12, T_gss_inquire_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_inquire_cred_by_mech ;;;;;

    toc
T_gss_inquire_cred_by_mech_ProcPtr:	; TOC relative address
    tc      gss_inquire_cred_by_mech_ProcPtr[TC], gss_inquire_cred_by_mech_ProcPtr[RW]
    csect   gss_inquire_cred_by_mech_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_inquire_cred_by_mech[DS]
    dc.l    .gss_inquire_cred_by_mech[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_inquire_cred_by_mech[PR]
    lwz     r12, T_gss_inquire_cred_by_mech_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_inquire_names_for_mech ;;;;;

    toc
T_gss_inquire_names_for_mech_ProcPtr:	; TOC relative address
    tc      gss_inquire_names_for_mech_ProcPtr[TC], gss_inquire_names_for_mech_ProcPtr[RW]
    csect   gss_inquire_names_for_mech_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_inquire_names_for_mech[DS]
    dc.l    .gss_inquire_names_for_mech[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_inquire_names_for_mech[PR]
    lwz     r12, T_gss_inquire_names_for_mech_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_krb5_ccache_name ;;;;;

    toc
T_gss_krb5_ccache_name_ProcPtr:	; TOC relative address
    tc      gss_krb5_ccache_name_ProcPtr[TC], gss_krb5_ccache_name_ProcPtr[RW]
    csect   gss_krb5_ccache_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_krb5_ccache_name[DS]
    dc.l    .gss_krb5_ccache_name[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_krb5_ccache_name[PR]
    lwz     r12, T_gss_krb5_ccache_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_oid_to_str ;;;;;

    toc
T_gss_oid_to_str_ProcPtr:	; TOC relative address
    tc      gss_oid_to_str_ProcPtr[TC], gss_oid_to_str_ProcPtr[RW]
    csect   gss_oid_to_str_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_oid_to_str[DS]
    dc.l    .gss_oid_to_str[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_oid_to_str[PR]
    lwz     r12, T_gss_oid_to_str_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_process_context_token ;;;;;

    toc
T_gss_process_context_token_ProcPtr:	; TOC relative address
    tc      gss_process_context_token_ProcPtr[TC], gss_process_context_token_ProcPtr[RW]
    csect   gss_process_context_token_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_process_context_token[DS]
    dc.l    .gss_process_context_token[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_process_context_token[PR]
    lwz     r12, T_gss_process_context_token_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_release_buffer ;;;;;

    toc
T_gss_release_buffer_ProcPtr:	; TOC relative address
    tc      gss_release_buffer_ProcPtr[TC], gss_release_buffer_ProcPtr[RW]
    csect   gss_release_buffer_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_release_buffer[DS]
    dc.l    .gss_release_buffer[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_release_buffer[PR]
    lwz     r12, T_gss_release_buffer_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_release_cred ;;;;;

    toc
T_gss_release_cred_ProcPtr:	; TOC relative address
    tc      gss_release_cred_ProcPtr[TC], gss_release_cred_ProcPtr[RW]
    csect   gss_release_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_release_cred[DS]
    dc.l    .gss_release_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_release_cred[PR]
    lwz     r12, T_gss_release_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_release_name ;;;;;

    toc
T_gss_release_name_ProcPtr:	; TOC relative address
    tc      gss_release_name_ProcPtr[TC], gss_release_name_ProcPtr[RW]
    csect   gss_release_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_release_name[DS]
    dc.l    .gss_release_name[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_release_name[PR]
    lwz     r12, T_gss_release_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_release_oid ;;;;;

    toc
T_gss_release_oid_ProcPtr:	; TOC relative address
    tc      gss_release_oid_ProcPtr[TC], gss_release_oid_ProcPtr[RW]
    csect   gss_release_oid_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_release_oid[DS]
    dc.l    .gss_release_oid[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_release_oid[PR]
    lwz     r12, T_gss_release_oid_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_release_oid_set ;;;;;

    toc
T_gss_release_oid_set_ProcPtr:	; TOC relative address
    tc      gss_release_oid_set_ProcPtr[TC], gss_release_oid_set_ProcPtr[RW]
    csect   gss_release_oid_set_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_release_oid_set[DS]
    dc.l    .gss_release_oid_set[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_release_oid_set[PR]
    lwz     r12, T_gss_release_oid_set_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_seal ;;;;;

    toc
T_gss_seal_ProcPtr:	; TOC relative address
    tc      gss_seal_ProcPtr[TC], gss_seal_ProcPtr[RW]
    csect   gss_seal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_seal[DS]
    dc.l    .gss_seal[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_seal[PR]
    lwz     r12, T_gss_seal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_sign ;;;;;

    toc
T_gss_sign_ProcPtr:	; TOC relative address
    tc      gss_sign_ProcPtr[TC], gss_sign_ProcPtr[RW]
    csect   gss_sign_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_sign[DS]
    dc.l    .gss_sign[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_sign[PR]
    lwz     r12, T_gss_sign_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_str_to_oid ;;;;;

    toc
T_gss_str_to_oid_ProcPtr:	; TOC relative address
    tc      gss_str_to_oid_ProcPtr[TC], gss_str_to_oid_ProcPtr[RW]
    csect   gss_str_to_oid_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_str_to_oid[DS]
    dc.l    .gss_str_to_oid[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_str_to_oid[PR]
    lwz     r12, T_gss_str_to_oid_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_test_oid_set_member ;;;;;

    toc
T_gss_test_oid_set_member_ProcPtr:	; TOC relative address
    tc      gss_test_oid_set_member_ProcPtr[TC], gss_test_oid_set_member_ProcPtr[RW]
    csect   gss_test_oid_set_member_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_test_oid_set_member[DS]
    dc.l    .gss_test_oid_set_member[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_test_oid_set_member[PR]
    lwz     r12, T_gss_test_oid_set_member_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_unseal ;;;;;

    toc
T_gss_unseal_ProcPtr:	; TOC relative address
    tc      gss_unseal_ProcPtr[TC], gss_unseal_ProcPtr[RW]
    csect   gss_unseal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_unseal[DS]
    dc.l    .gss_unseal[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_unseal[PR]
    lwz     r12, T_gss_unseal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_unwrap ;;;;;

    toc
T_gss_unwrap_ProcPtr:	; TOC relative address
    tc      gss_unwrap_ProcPtr[TC], gss_unwrap_ProcPtr[RW]
    csect   gss_unwrap_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_unwrap[DS]
    dc.l    .gss_unwrap[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_unwrap[PR]
    lwz     r12, T_gss_unwrap_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_verify ;;;;;

    toc
T_gss_verify_ProcPtr:	; TOC relative address
    tc      gss_verify_ProcPtr[TC], gss_verify_ProcPtr[RW]
    csect   gss_verify_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_verify[DS]
    dc.l    .gss_verify[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_verify[PR]
    lwz     r12, T_gss_verify_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_verify_mic ;;;;;

    toc
T_gss_verify_mic_ProcPtr:	; TOC relative address
    tc      gss_verify_mic_ProcPtr[TC], gss_verify_mic_ProcPtr[RW]
    csect   gss_verify_mic_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_verify_mic[DS]
    dc.l    .gss_verify_mic[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_verify_mic[PR]
    lwz     r12, T_gss_verify_mic_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_wrap ;;;;;

    toc
T_gss_wrap_ProcPtr:	; TOC relative address
    tc      gss_wrap_ProcPtr[TC], gss_wrap_ProcPtr[RW]
    csect   gss_wrap_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_wrap[DS]
    dc.l    .gss_wrap[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_wrap[PR]
    lwz     r12, T_gss_wrap_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; gss_wrap_size_limit ;;;;;

    toc
T_gss_wrap_size_limit_ProcPtr:	; TOC relative address
    tc      gss_wrap_size_limit_ProcPtr[TC], gss_wrap_size_limit_ProcPtr[RW]
    csect   gss_wrap_size_limit_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   gss_wrap_size_limit[DS]
    dc.l    .gss_wrap_size_limit[PR]
    dc.l    TOC[tc0]
    
    csect   .gss_wrap_size_limit[PR]
    lwz     r12, T_gss_wrap_size_limit_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; k_isinst ;;;;;

    toc
T_k_isinst_ProcPtr:	; TOC relative address
    tc      k_isinst_ProcPtr[TC], k_isinst_ProcPtr[RW]
    csect   k_isinst_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   k_isinst[DS]
    dc.l    .k_isinst[PR]
    dc.l    TOC[tc0]
    
    csect   .k_isinst[PR]
    lwz     r12, T_k_isinst_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; k_isname ;;;;;

    toc
T_k_isname_ProcPtr:	; TOC relative address
    tc      k_isname_ProcPtr[TC], k_isname_ProcPtr[RW]
    csect   k_isname_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   k_isname[DS]
    dc.l    .k_isname[PR]
    dc.l    TOC[tc0]
    
    csect   .k_isname[PR]
    lwz     r12, T_k_isname_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; k_isrealm ;;;;;

    toc
T_k_isrealm_ProcPtr:	; TOC relative address
    tc      k_isrealm_ProcPtr[TC], k_isrealm_ProcPtr[RW]
    csect   k_isrealm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   k_isrealm[DS]
    dc.l    .k_isrealm[PR]
    dc.l    TOC[tc0]
    
    csect   .k_isrealm[PR]
    lwz     r12, T_k_isrealm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; kname_parse ;;;;;

    toc
T_kname_parse_ProcPtr:	; TOC relative address
    tc      kname_parse_ProcPtr[TC], kname_parse_ProcPtr[RW]
    csect   kname_parse_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   kname_parse[DS]
    dc.l    .kname_parse[PR]
    dc.l    TOC[tc0]
    
    csect   .kname_parse[PR]
    lwz     r12, T_kname_parse_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; kname_unparse ;;;;;

    toc
T_kname_unparse_ProcPtr:	; TOC relative address
    tc      kname_unparse_ProcPtr[TC], kname_unparse_ProcPtr[RW]
    csect   kname_unparse_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   kname_unparse[DS]
    dc.l    .kname_unparse[PR]
    dc.l    TOC[tc0]
    
    csect   .kname_unparse[PR]
    lwz     r12, T_kname_unparse_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_425_conv_principal ;;;;;

    toc
T_krb5_425_conv_principal_ProcPtr:	; TOC relative address
    tc      krb5_425_conv_principal_ProcPtr[TC], krb5_425_conv_principal_ProcPtr[RW]
    csect   krb5_425_conv_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_425_conv_principal[DS]
    dc.l    .krb5_425_conv_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_425_conv_principal[PR]
    lwz     r12, T_krb5_425_conv_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_524_conv_principal ;;;;;

    toc
T_krb5_524_conv_principal_ProcPtr:	; TOC relative address
    tc      krb5_524_conv_principal_ProcPtr[TC], krb5_524_conv_principal_ProcPtr[RW]
    csect   krb5_524_conv_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_524_conv_principal[DS]
    dc.l    .krb5_524_conv_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_524_conv_principal[PR]
    lwz     r12, T_krb5_524_conv_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_address_compare ;;;;;

    toc
T_krb5_address_compare_ProcPtr:	; TOC relative address
    tc      krb5_address_compare_ProcPtr[TC], krb5_address_compare_ProcPtr[RW]
    csect   krb5_address_compare_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_address_compare[DS]
    dc.l    .krb5_address_compare[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_address_compare[PR]
    lwz     r12, T_krb5_address_compare_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_address_order ;;;;;

    toc
T_krb5_address_order_ProcPtr:	; TOC relative address
    tc      krb5_address_order_ProcPtr[TC], krb5_address_order_ProcPtr[RW]
    csect   krb5_address_order_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_address_order[DS]
    dc.l    .krb5_address_order[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_address_order[PR]
    lwz     r12, T_krb5_address_order_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_address_search ;;;;;

    toc
T_krb5_address_search_ProcPtr:	; TOC relative address
    tc      krb5_address_search_ProcPtr[TC], krb5_address_search_ProcPtr[RW]
    csect   krb5_address_search_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_address_search[DS]
    dc.l    .krb5_address_search[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_address_search[PR]
    lwz     r12, T_krb5_address_search_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_aname_to_localname ;;;;;

    toc
T_krb5_aname_to_localname_ProcPtr:	; TOC relative address
    tc      krb5_aname_to_localname_ProcPtr[TC], krb5_aname_to_localname_ProcPtr[RW]
    csect   krb5_aname_to_localname_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_aname_to_localname[DS]
    dc.l    .krb5_aname_to_localname[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_aname_to_localname[PR]
    lwz     r12, T_krb5_aname_to_localname_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_free ;;;;;

    toc
T_krb5_auth_con_free_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_free_ProcPtr[TC], krb5_auth_con_free_ProcPtr[RW]
    csect   krb5_auth_con_free_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_free[DS]
    dc.l    .krb5_auth_con_free[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_free[PR]
    lwz     r12, T_krb5_auth_con_free_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_genaddrs ;;;;;

    toc
T_krb5_auth_con_genaddrs_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_genaddrs_ProcPtr[TC], krb5_auth_con_genaddrs_ProcPtr[RW]
    csect   krb5_auth_con_genaddrs_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_genaddrs[DS]
    dc.l    .krb5_auth_con_genaddrs[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_genaddrs[PR]
    lwz     r12, T_krb5_auth_con_genaddrs_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_getaddrs ;;;;;

    toc
T_krb5_auth_con_getaddrs_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_getaddrs_ProcPtr[TC], krb5_auth_con_getaddrs_ProcPtr[RW]
    csect   krb5_auth_con_getaddrs_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_getaddrs[DS]
    dc.l    .krb5_auth_con_getaddrs[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_getaddrs[PR]
    lwz     r12, T_krb5_auth_con_getaddrs_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_getauthenticator ;;;;;

    toc
T_krb5_auth_con_getauthenticator_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_getauthenticator_ProcPtr[TC], krb5_auth_con_getauthenticator_ProcPtr[RW]
    csect   krb5_auth_con_getauthenticator_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_getauthenticator[DS]
    dc.l    .krb5_auth_con_getauthenticator[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_getauthenticator[PR]
    lwz     r12, T_krb5_auth_con_getauthenticator_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_getflags ;;;;;

    toc
T_krb5_auth_con_getflags_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_getflags_ProcPtr[TC], krb5_auth_con_getflags_ProcPtr[RW]
    csect   krb5_auth_con_getflags_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_getflags[DS]
    dc.l    .krb5_auth_con_getflags[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_getflags[PR]
    lwz     r12, T_krb5_auth_con_getflags_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_getkey ;;;;;

    toc
T_krb5_auth_con_getkey_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_getkey_ProcPtr[TC], krb5_auth_con_getkey_ProcPtr[RW]
    csect   krb5_auth_con_getkey_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_getkey[DS]
    dc.l    .krb5_auth_con_getkey[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_getkey[PR]
    lwz     r12, T_krb5_auth_con_getkey_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_getlocalseqnumber ;;;;;

    toc
T_krb5_auth_con_getlocalseqnumber_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_getlocalseqnumber_ProcPtr[TC], krb5_auth_con_getlocalseqnumber_ProcPtr[RW]
    csect   krb5_auth_con_getlocalseqnumber_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_getlocalseqnumber[DS]
    dc.l    .krb5_auth_con_getlocalseqnumber[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_getlocalseqnumber[PR]
    lwz     r12, T_krb5_auth_con_getlocalseqnumber_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_getlocalsubkey ;;;;;

    toc
T_krb5_auth_con_getlocalsubkey_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_getlocalsubkey_ProcPtr[TC], krb5_auth_con_getlocalsubkey_ProcPtr[RW]
    csect   krb5_auth_con_getlocalsubkey_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_getlocalsubkey[DS]
    dc.l    .krb5_auth_con_getlocalsubkey[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_getlocalsubkey[PR]
    lwz     r12, T_krb5_auth_con_getlocalsubkey_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_getrcache ;;;;;

    toc
T_krb5_auth_con_getrcache_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_getrcache_ProcPtr[TC], krb5_auth_con_getrcache_ProcPtr[RW]
    csect   krb5_auth_con_getrcache_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_getrcache[DS]
    dc.l    .krb5_auth_con_getrcache[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_getrcache[PR]
    lwz     r12, T_krb5_auth_con_getrcache_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_getremoteseqnumber ;;;;;

    toc
T_krb5_auth_con_getremoteseqnumber_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_getremoteseqnumber_ProcPtr[TC], krb5_auth_con_getremoteseqnumber_ProcPtr[RW]
    csect   krb5_auth_con_getremoteseqnumber_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_getremoteseqnumber[DS]
    dc.l    .krb5_auth_con_getremoteseqnumber[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_getremoteseqnumber[PR]
    lwz     r12, T_krb5_auth_con_getremoteseqnumber_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_getremotesubkey ;;;;;

    toc
T_krb5_auth_con_getremotesubkey_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_getremotesubkey_ProcPtr[TC], krb5_auth_con_getremotesubkey_ProcPtr[RW]
    csect   krb5_auth_con_getremotesubkey_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_getremotesubkey[DS]
    dc.l    .krb5_auth_con_getremotesubkey[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_getremotesubkey[PR]
    lwz     r12, T_krb5_auth_con_getremotesubkey_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_init ;;;;;

    toc
T_krb5_auth_con_init_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_init_ProcPtr[TC], krb5_auth_con_init_ProcPtr[RW]
    csect   krb5_auth_con_init_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_init[DS]
    dc.l    .krb5_auth_con_init[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_init[PR]
    lwz     r12, T_krb5_auth_con_init_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_initivector ;;;;;

    toc
T_krb5_auth_con_initivector_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_initivector_ProcPtr[TC], krb5_auth_con_initivector_ProcPtr[RW]
    csect   krb5_auth_con_initivector_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_initivector[DS]
    dc.l    .krb5_auth_con_initivector[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_initivector[PR]
    lwz     r12, T_krb5_auth_con_initivector_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_setaddrs ;;;;;

    toc
T_krb5_auth_con_setaddrs_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_setaddrs_ProcPtr[TC], krb5_auth_con_setaddrs_ProcPtr[RW]
    csect   krb5_auth_con_setaddrs_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_setaddrs[DS]
    dc.l    .krb5_auth_con_setaddrs[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_setaddrs[PR]
    lwz     r12, T_krb5_auth_con_setaddrs_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_setflags ;;;;;

    toc
T_krb5_auth_con_setflags_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_setflags_ProcPtr[TC], krb5_auth_con_setflags_ProcPtr[RW]
    csect   krb5_auth_con_setflags_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_setflags[DS]
    dc.l    .krb5_auth_con_setflags[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_setflags[PR]
    lwz     r12, T_krb5_auth_con_setflags_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_setports ;;;;;

    toc
T_krb5_auth_con_setports_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_setports_ProcPtr[TC], krb5_auth_con_setports_ProcPtr[RW]
    csect   krb5_auth_con_setports_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_setports[DS]
    dc.l    .krb5_auth_con_setports[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_setports[PR]
    lwz     r12, T_krb5_auth_con_setports_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_setrcache ;;;;;

    toc
T_krb5_auth_con_setrcache_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_setrcache_ProcPtr[TC], krb5_auth_con_setrcache_ProcPtr[RW]
    csect   krb5_auth_con_setrcache_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_setrcache[DS]
    dc.l    .krb5_auth_con_setrcache[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_setrcache[PR]
    lwz     r12, T_krb5_auth_con_setrcache_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_auth_con_setuseruserkey ;;;;;

    toc
T_krb5_auth_con_setuseruserkey_ProcPtr:	; TOC relative address
    tc      krb5_auth_con_setuseruserkey_ProcPtr[TC], krb5_auth_con_setuseruserkey_ProcPtr[RW]
    csect   krb5_auth_con_setuseruserkey_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_auth_con_setuseruserkey[DS]
    dc.l    .krb5_auth_con_setuseruserkey[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_auth_con_setuseruserkey[PR]
    lwz     r12, T_krb5_auth_con_setuseruserkey_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_build_principal ;;;;;

    toc
T_krb5_build_principal_ProcPtr:	; TOC relative address
    tc      krb5_build_principal_ProcPtr[TC], krb5_build_principal_ProcPtr[RW]
    csect   krb5_build_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_build_principal[DS]
    dc.l    .krb5_build_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_build_principal[PR]
    lwz     r12, T_krb5_build_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_build_principal_ext ;;;;;

    toc
T_krb5_build_principal_ext_ProcPtr:	; TOC relative address
    tc      krb5_build_principal_ext_ProcPtr[TC], krb5_build_principal_ext_ProcPtr[RW]
    csect   krb5_build_principal_ext_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_build_principal_ext[DS]
    dc.l    .krb5_build_principal_ext[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_build_principal_ext[PR]
    lwz     r12, T_krb5_build_principal_ext_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_build_principal_va ;;;;;

    toc
T_krb5_build_principal_va_ProcPtr:	; TOC relative address
    tc      krb5_build_principal_va_ProcPtr[TC], krb5_build_principal_va_ProcPtr[RW]
    csect   krb5_build_principal_va_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_build_principal_va[DS]
    dc.l    .krb5_build_principal_va[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_build_principal_va[PR]
    lwz     r12, T_krb5_build_principal_va_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_calculate_checksum ;;;;;

    toc
T_krb5_calculate_checksum_ProcPtr:	; TOC relative address
    tc      krb5_calculate_checksum_ProcPtr[TC], krb5_calculate_checksum_ProcPtr[RW]
    csect   krb5_calculate_checksum_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_calculate_checksum[DS]
    dc.l    .krb5_calculate_checksum[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_calculate_checksum[PR]
    lwz     r12, T_krb5_calculate_checksum_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_close ;;;;;

    toc
T_krb5_cc_close_ProcPtr:	; TOC relative address
    tc      krb5_cc_close_ProcPtr[TC], krb5_cc_close_ProcPtr[RW]
    csect   krb5_cc_close_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_close[DS]
    dc.l    .krb5_cc_close[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_close[PR]
    lwz     r12, T_krb5_cc_close_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_default ;;;;;

    toc
T_krb5_cc_default_ProcPtr:	; TOC relative address
    tc      krb5_cc_default_ProcPtr[TC], krb5_cc_default_ProcPtr[RW]
    csect   krb5_cc_default_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_default[DS]
    dc.l    .krb5_cc_default[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_default[PR]
    lwz     r12, T_krb5_cc_default_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_default_name ;;;;;

    toc
T_krb5_cc_default_name_ProcPtr:	; TOC relative address
    tc      krb5_cc_default_name_ProcPtr[TC], krb5_cc_default_name_ProcPtr[RW]
    csect   krb5_cc_default_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_default_name[DS]
    dc.l    .krb5_cc_default_name[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_default_name[PR]
    lwz     r12, T_krb5_cc_default_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_destroy ;;;;;

    toc
T_krb5_cc_destroy_ProcPtr:	; TOC relative address
    tc      krb5_cc_destroy_ProcPtr[TC], krb5_cc_destroy_ProcPtr[RW]
    csect   krb5_cc_destroy_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_destroy[DS]
    dc.l    .krb5_cc_destroy[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_destroy[PR]
    lwz     r12, T_krb5_cc_destroy_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_end_seq_get ;;;;;

    toc
T_krb5_cc_end_seq_get_ProcPtr:	; TOC relative address
    tc      krb5_cc_end_seq_get_ProcPtr[TC], krb5_cc_end_seq_get_ProcPtr[RW]
    csect   krb5_cc_end_seq_get_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_end_seq_get[DS]
    dc.l    .krb5_cc_end_seq_get[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_end_seq_get[PR]
    lwz     r12, T_krb5_cc_end_seq_get_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_gen_new ;;;;;

    toc
T_krb5_cc_gen_new_ProcPtr:	; TOC relative address
    tc      krb5_cc_gen_new_ProcPtr[TC], krb5_cc_gen_new_ProcPtr[RW]
    csect   krb5_cc_gen_new_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_gen_new[DS]
    dc.l    .krb5_cc_gen_new[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_gen_new[PR]
    lwz     r12, T_krb5_cc_gen_new_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_get_name ;;;;;

    toc
T_krb5_cc_get_name_ProcPtr:	; TOC relative address
    tc      krb5_cc_get_name_ProcPtr[TC], krb5_cc_get_name_ProcPtr[RW]
    csect   krb5_cc_get_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_get_name[DS]
    dc.l    .krb5_cc_get_name[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_get_name[PR]
    lwz     r12, T_krb5_cc_get_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_get_principal ;;;;;

    toc
T_krb5_cc_get_principal_ProcPtr:	; TOC relative address
    tc      krb5_cc_get_principal_ProcPtr[TC], krb5_cc_get_principal_ProcPtr[RW]
    csect   krb5_cc_get_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_get_principal[DS]
    dc.l    .krb5_cc_get_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_get_principal[PR]
    lwz     r12, T_krb5_cc_get_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_get_type ;;;;;

    toc
T_krb5_cc_get_type_ProcPtr:	; TOC relative address
    tc      krb5_cc_get_type_ProcPtr[TC], krb5_cc_get_type_ProcPtr[RW]
    csect   krb5_cc_get_type_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_get_type[DS]
    dc.l    .krb5_cc_get_type[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_get_type[PR]
    lwz     r12, T_krb5_cc_get_type_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_initialize ;;;;;

    toc
T_krb5_cc_initialize_ProcPtr:	; TOC relative address
    tc      krb5_cc_initialize_ProcPtr[TC], krb5_cc_initialize_ProcPtr[RW]
    csect   krb5_cc_initialize_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_initialize[DS]
    dc.l    .krb5_cc_initialize[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_initialize[PR]
    lwz     r12, T_krb5_cc_initialize_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_next_cred ;;;;;

    toc
T_krb5_cc_next_cred_ProcPtr:	; TOC relative address
    tc      krb5_cc_next_cred_ProcPtr[TC], krb5_cc_next_cred_ProcPtr[RW]
    csect   krb5_cc_next_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_next_cred[DS]
    dc.l    .krb5_cc_next_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_next_cred[PR]
    lwz     r12, T_krb5_cc_next_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_remove_cred ;;;;;

    toc
T_krb5_cc_remove_cred_ProcPtr:	; TOC relative address
    tc      krb5_cc_remove_cred_ProcPtr[TC], krb5_cc_remove_cred_ProcPtr[RW]
    csect   krb5_cc_remove_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_remove_cred[DS]
    dc.l    .krb5_cc_remove_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_remove_cred[PR]
    lwz     r12, T_krb5_cc_remove_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_resolve ;;;;;

    toc
T_krb5_cc_resolve_ProcPtr:	; TOC relative address
    tc      krb5_cc_resolve_ProcPtr[TC], krb5_cc_resolve_ProcPtr[RW]
    csect   krb5_cc_resolve_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_resolve[DS]
    dc.l    .krb5_cc_resolve[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_resolve[PR]
    lwz     r12, T_krb5_cc_resolve_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_retrieve_cred ;;;;;

    toc
T_krb5_cc_retrieve_cred_ProcPtr:	; TOC relative address
    tc      krb5_cc_retrieve_cred_ProcPtr[TC], krb5_cc_retrieve_cred_ProcPtr[RW]
    csect   krb5_cc_retrieve_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_retrieve_cred[DS]
    dc.l    .krb5_cc_retrieve_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_retrieve_cred[PR]
    lwz     r12, T_krb5_cc_retrieve_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_set_default_name ;;;;;

    toc
T_krb5_cc_set_default_name_ProcPtr:	; TOC relative address
    tc      krb5_cc_set_default_name_ProcPtr[TC], krb5_cc_set_default_name_ProcPtr[RW]
    csect   krb5_cc_set_default_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_set_default_name[DS]
    dc.l    .krb5_cc_set_default_name[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_set_default_name[PR]
    lwz     r12, T_krb5_cc_set_default_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_set_flags ;;;;;

    toc
T_krb5_cc_set_flags_ProcPtr:	; TOC relative address
    tc      krb5_cc_set_flags_ProcPtr[TC], krb5_cc_set_flags_ProcPtr[RW]
    csect   krb5_cc_set_flags_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_set_flags[DS]
    dc.l    .krb5_cc_set_flags[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_set_flags[PR]
    lwz     r12, T_krb5_cc_set_flags_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_start_seq_get ;;;;;

    toc
T_krb5_cc_start_seq_get_ProcPtr:	; TOC relative address
    tc      krb5_cc_start_seq_get_ProcPtr[TC], krb5_cc_start_seq_get_ProcPtr[RW]
    csect   krb5_cc_start_seq_get_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_start_seq_get[DS]
    dc.l    .krb5_cc_start_seq_get[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_start_seq_get[PR]
    lwz     r12, T_krb5_cc_start_seq_get_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cc_store_cred ;;;;;

    toc
T_krb5_cc_store_cred_ProcPtr:	; TOC relative address
    tc      krb5_cc_store_cred_ProcPtr[TC], krb5_cc_store_cred_ProcPtr[RW]
    csect   krb5_cc_store_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cc_store_cred[DS]
    dc.l    .krb5_cc_store_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cc_store_cred[PR]
    lwz     r12, T_krb5_cc_store_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_change_password ;;;;;

    toc
T_krb5_change_password_ProcPtr:	; TOC relative address
    tc      krb5_change_password_ProcPtr[TC], krb5_change_password_ProcPtr[RW]
    csect   krb5_change_password_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_change_password[DS]
    dc.l    .krb5_change_password[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_change_password[PR]
    lwz     r12, T_krb5_change_password_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_checksum_size ;;;;;

    toc
T_krb5_checksum_size_ProcPtr:	; TOC relative address
    tc      krb5_checksum_size_ProcPtr[TC], krb5_checksum_size_ProcPtr[RW]
    csect   krb5_checksum_size_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_checksum_size[DS]
    dc.l    .krb5_checksum_size[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_checksum_size[PR]
    lwz     r12, T_krb5_checksum_size_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_cksumtype_to_string ;;;;;

    toc
T_krb5_cksumtype_to_string_ProcPtr:	; TOC relative address
    tc      krb5_cksumtype_to_string_ProcPtr[TC], krb5_cksumtype_to_string_ProcPtr[RW]
    csect   krb5_cksumtype_to_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_cksumtype_to_string[DS]
    dc.l    .krb5_cksumtype_to_string[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_cksumtype_to_string[PR]
    lwz     r12, T_krb5_cksumtype_to_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_addresses ;;;;;

    toc
T_krb5_copy_addresses_ProcPtr:	; TOC relative address
    tc      krb5_copy_addresses_ProcPtr[TC], krb5_copy_addresses_ProcPtr[RW]
    csect   krb5_copy_addresses_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_addresses[DS]
    dc.l    .krb5_copy_addresses[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_addresses[PR]
    lwz     r12, T_krb5_copy_addresses_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_authdata ;;;;;

    toc
T_krb5_copy_authdata_ProcPtr:	; TOC relative address
    tc      krb5_copy_authdata_ProcPtr[TC], krb5_copy_authdata_ProcPtr[RW]
    csect   krb5_copy_authdata_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_authdata[DS]
    dc.l    .krb5_copy_authdata[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_authdata[PR]
    lwz     r12, T_krb5_copy_authdata_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_authenticator ;;;;;

    toc
T_krb5_copy_authenticator_ProcPtr:	; TOC relative address
    tc      krb5_copy_authenticator_ProcPtr[TC], krb5_copy_authenticator_ProcPtr[RW]
    csect   krb5_copy_authenticator_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_authenticator[DS]
    dc.l    .krb5_copy_authenticator[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_authenticator[PR]
    lwz     r12, T_krb5_copy_authenticator_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_checksum ;;;;;

    toc
T_krb5_copy_checksum_ProcPtr:	; TOC relative address
    tc      krb5_copy_checksum_ProcPtr[TC], krb5_copy_checksum_ProcPtr[RW]
    csect   krb5_copy_checksum_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_checksum[DS]
    dc.l    .krb5_copy_checksum[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_checksum[PR]
    lwz     r12, T_krb5_copy_checksum_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_creds ;;;;;

    toc
T_krb5_copy_creds_ProcPtr:	; TOC relative address
    tc      krb5_copy_creds_ProcPtr[TC], krb5_copy_creds_ProcPtr[RW]
    csect   krb5_copy_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_creds[DS]
    dc.l    .krb5_copy_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_creds[PR]
    lwz     r12, T_krb5_copy_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_data ;;;;;

    toc
T_krb5_copy_data_ProcPtr:	; TOC relative address
    tc      krb5_copy_data_ProcPtr[TC], krb5_copy_data_ProcPtr[RW]
    csect   krb5_copy_data_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_data[DS]
    dc.l    .krb5_copy_data[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_data[PR]
    lwz     r12, T_krb5_copy_data_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_keyblock ;;;;;

    toc
T_krb5_copy_keyblock_ProcPtr:	; TOC relative address
    tc      krb5_copy_keyblock_ProcPtr[TC], krb5_copy_keyblock_ProcPtr[RW]
    csect   krb5_copy_keyblock_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_keyblock[DS]
    dc.l    .krb5_copy_keyblock[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_keyblock[PR]
    lwz     r12, T_krb5_copy_keyblock_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_keyblock_contents ;;;;;

    toc
T_krb5_copy_keyblock_contents_ProcPtr:	; TOC relative address
    tc      krb5_copy_keyblock_contents_ProcPtr[TC], krb5_copy_keyblock_contents_ProcPtr[RW]
    csect   krb5_copy_keyblock_contents_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_keyblock_contents[DS]
    dc.l    .krb5_copy_keyblock_contents[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_keyblock_contents[PR]
    lwz     r12, T_krb5_copy_keyblock_contents_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_principal ;;;;;

    toc
T_krb5_copy_principal_ProcPtr:	; TOC relative address
    tc      krb5_copy_principal_ProcPtr[TC], krb5_copy_principal_ProcPtr[RW]
    csect   krb5_copy_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_principal[DS]
    dc.l    .krb5_copy_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_principal[PR]
    lwz     r12, T_krb5_copy_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_copy_ticket ;;;;;

    toc
T_krb5_copy_ticket_ProcPtr:	; TOC relative address
    tc      krb5_copy_ticket_ProcPtr[TC], krb5_copy_ticket_ProcPtr[RW]
    csect   krb5_copy_ticket_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_copy_ticket[DS]
    dc.l    .krb5_copy_ticket[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_copy_ticket[PR]
    lwz     r12, T_krb5_copy_ticket_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_decode_ticket ;;;;;

    toc
T_krb5_decode_ticket_ProcPtr:	; TOC relative address
    tc      krb5_decode_ticket_ProcPtr[TC], krb5_decode_ticket_ProcPtr[RW]
    csect   krb5_decode_ticket_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_decode_ticket[DS]
    dc.l    .krb5_decode_ticket[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_decode_ticket[PR]
    lwz     r12, T_krb5_decode_ticket_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_decrypt ;;;;;

    toc
T_krb5_decrypt_ProcPtr:	; TOC relative address
    tc      krb5_decrypt_ProcPtr[TC], krb5_decrypt_ProcPtr[RW]
    csect   krb5_decrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_decrypt[DS]
    dc.l    .krb5_decrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_decrypt[PR]
    lwz     r12, T_krb5_decrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_deltat_to_string ;;;;;

    toc
T_krb5_deltat_to_string_ProcPtr:	; TOC relative address
    tc      krb5_deltat_to_string_ProcPtr[TC], krb5_deltat_to_string_ProcPtr[RW]
    csect   krb5_deltat_to_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_deltat_to_string[DS]
    dc.l    .krb5_deltat_to_string[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_deltat_to_string[PR]
    lwz     r12, T_krb5_deltat_to_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_eblock_enctype ;;;;;

    toc
T_krb5_eblock_enctype_ProcPtr:	; TOC relative address
    tc      krb5_eblock_enctype_ProcPtr[TC], krb5_eblock_enctype_ProcPtr[RW]
    csect   krb5_eblock_enctype_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_eblock_enctype[DS]
    dc.l    .krb5_eblock_enctype[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_eblock_enctype[PR]
    lwz     r12, T_krb5_eblock_enctype_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_encrypt ;;;;;

    toc
T_krb5_encrypt_ProcPtr:	; TOC relative address
    tc      krb5_encrypt_ProcPtr[TC], krb5_encrypt_ProcPtr[RW]
    csect   krb5_encrypt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_encrypt[DS]
    dc.l    .krb5_encrypt[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_encrypt[PR]
    lwz     r12, T_krb5_encrypt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_encrypt_size ;;;;;

    toc
T_krb5_encrypt_size_ProcPtr:	; TOC relative address
    tc      krb5_encrypt_size_ProcPtr[TC], krb5_encrypt_size_ProcPtr[RW]
    csect   krb5_encrypt_size_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_encrypt_size[DS]
    dc.l    .krb5_encrypt_size[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_encrypt_size[PR]
    lwz     r12, T_krb5_encrypt_size_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_enctype_to_string ;;;;;

    toc
T_krb5_enctype_to_string_ProcPtr:	; TOC relative address
    tc      krb5_enctype_to_string_ProcPtr[TC], krb5_enctype_to_string_ProcPtr[RW]
    csect   krb5_enctype_to_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_enctype_to_string[DS]
    dc.l    .krb5_enctype_to_string[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_enctype_to_string[PR]
    lwz     r12, T_krb5_enctype_to_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_finish_key ;;;;;

    toc
T_krb5_finish_key_ProcPtr:	; TOC relative address
    tc      krb5_finish_key_ProcPtr[TC], krb5_finish_key_ProcPtr[RW]
    csect   krb5_finish_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_finish_key[DS]
    dc.l    .krb5_finish_key[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_finish_key[PR]
    lwz     r12, T_krb5_finish_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_finish_random_key ;;;;;

    toc
T_krb5_finish_random_key_ProcPtr:	; TOC relative address
    tc      krb5_finish_random_key_ProcPtr[TC], krb5_finish_random_key_ProcPtr[RW]
    csect   krb5_finish_random_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_finish_random_key[DS]
    dc.l    .krb5_finish_random_key[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_finish_random_key[PR]
    lwz     r12, T_krb5_finish_random_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_addresses ;;;;;

    toc
T_krb5_free_addresses_ProcPtr:	; TOC relative address
    tc      krb5_free_addresses_ProcPtr[TC], krb5_free_addresses_ProcPtr[RW]
    csect   krb5_free_addresses_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_addresses[DS]
    dc.l    .krb5_free_addresses[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_addresses[PR]
    lwz     r12, T_krb5_free_addresses_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_ap_rep_enc_part ;;;;;

    toc
T_krb5_free_ap_rep_enc_part_ProcPtr:	; TOC relative address
    tc      krb5_free_ap_rep_enc_part_ProcPtr[TC], krb5_free_ap_rep_enc_part_ProcPtr[RW]
    csect   krb5_free_ap_rep_enc_part_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_ap_rep_enc_part[DS]
    dc.l    .krb5_free_ap_rep_enc_part[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_ap_rep_enc_part[PR]
    lwz     r12, T_krb5_free_ap_rep_enc_part_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_authdata ;;;;;

    toc
T_krb5_free_authdata_ProcPtr:	; TOC relative address
    tc      krb5_free_authdata_ProcPtr[TC], krb5_free_authdata_ProcPtr[RW]
    csect   krb5_free_authdata_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_authdata[DS]
    dc.l    .krb5_free_authdata[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_authdata[PR]
    lwz     r12, T_krb5_free_authdata_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_authenticator ;;;;;

    toc
T_krb5_free_authenticator_ProcPtr:	; TOC relative address
    tc      krb5_free_authenticator_ProcPtr[TC], krb5_free_authenticator_ProcPtr[RW]
    csect   krb5_free_authenticator_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_authenticator[DS]
    dc.l    .krb5_free_authenticator[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_authenticator[PR]
    lwz     r12, T_krb5_free_authenticator_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_checksum ;;;;;

    toc
T_krb5_free_checksum_ProcPtr:	; TOC relative address
    tc      krb5_free_checksum_ProcPtr[TC], krb5_free_checksum_ProcPtr[RW]
    csect   krb5_free_checksum_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_checksum[DS]
    dc.l    .krb5_free_checksum[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_checksum[PR]
    lwz     r12, T_krb5_free_checksum_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_checksum_contents ;;;;;

    toc
T_krb5_free_checksum_contents_ProcPtr:	; TOC relative address
    tc      krb5_free_checksum_contents_ProcPtr[TC], krb5_free_checksum_contents_ProcPtr[RW]
    csect   krb5_free_checksum_contents_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_checksum_contents[DS]
    dc.l    .krb5_free_checksum_contents[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_checksum_contents[PR]
    lwz     r12, T_krb5_free_checksum_contents_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_cksumtypes ;;;;;

    toc
T_krb5_free_cksumtypes_ProcPtr:	; TOC relative address
    tc      krb5_free_cksumtypes_ProcPtr[TC], krb5_free_cksumtypes_ProcPtr[RW]
    csect   krb5_free_cksumtypes_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_cksumtypes[DS]
    dc.l    .krb5_free_cksumtypes[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_cksumtypes[PR]
    lwz     r12, T_krb5_free_cksumtypes_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_context ;;;;;

    toc
T_krb5_free_context_ProcPtr:	; TOC relative address
    tc      krb5_free_context_ProcPtr[TC], krb5_free_context_ProcPtr[RW]
    csect   krb5_free_context_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_context[DS]
    dc.l    .krb5_free_context[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_context[PR]
    lwz     r12, T_krb5_free_context_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_cred_contents ;;;;;

    toc
T_krb5_free_cred_contents_ProcPtr:	; TOC relative address
    tc      krb5_free_cred_contents_ProcPtr[TC], krb5_free_cred_contents_ProcPtr[RW]
    csect   krb5_free_cred_contents_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_cred_contents[DS]
    dc.l    .krb5_free_cred_contents[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_cred_contents[PR]
    lwz     r12, T_krb5_free_cred_contents_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_creds ;;;;;

    toc
T_krb5_free_creds_ProcPtr:	; TOC relative address
    tc      krb5_free_creds_ProcPtr[TC], krb5_free_creds_ProcPtr[RW]
    csect   krb5_free_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_creds[DS]
    dc.l    .krb5_free_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_creds[PR]
    lwz     r12, T_krb5_free_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_data ;;;;;

    toc
T_krb5_free_data_ProcPtr:	; TOC relative address
    tc      krb5_free_data_ProcPtr[TC], krb5_free_data_ProcPtr[RW]
    csect   krb5_free_data_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_data[DS]
    dc.l    .krb5_free_data[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_data[PR]
    lwz     r12, T_krb5_free_data_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_data_contents ;;;;;

    toc
T_krb5_free_data_contents_ProcPtr:	; TOC relative address
    tc      krb5_free_data_contents_ProcPtr[TC], krb5_free_data_contents_ProcPtr[RW]
    csect   krb5_free_data_contents_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_data_contents[DS]
    dc.l    .krb5_free_data_contents[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_data_contents[PR]
    lwz     r12, T_krb5_free_data_contents_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_default_realm ;;;;;

    toc
T_krb5_free_default_realm_ProcPtr:	; TOC relative address
    tc      krb5_free_default_realm_ProcPtr[TC], krb5_free_default_realm_ProcPtr[RW]
    csect   krb5_free_default_realm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_default_realm[DS]
    dc.l    .krb5_free_default_realm[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_default_realm[PR]
    lwz     r12, T_krb5_free_default_realm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_error ;;;;;

    toc
T_krb5_free_error_ProcPtr:	; TOC relative address
    tc      krb5_free_error_ProcPtr[TC], krb5_free_error_ProcPtr[RW]
    csect   krb5_free_error_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_error[DS]
    dc.l    .krb5_free_error[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_error[PR]
    lwz     r12, T_krb5_free_error_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_host_realm ;;;;;

    toc
T_krb5_free_host_realm_ProcPtr:	; TOC relative address
    tc      krb5_free_host_realm_ProcPtr[TC], krb5_free_host_realm_ProcPtr[RW]
    csect   krb5_free_host_realm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_host_realm[DS]
    dc.l    .krb5_free_host_realm[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_host_realm[PR]
    lwz     r12, T_krb5_free_host_realm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_keyblock ;;;;;

    toc
T_krb5_free_keyblock_ProcPtr:	; TOC relative address
    tc      krb5_free_keyblock_ProcPtr[TC], krb5_free_keyblock_ProcPtr[RW]
    csect   krb5_free_keyblock_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_keyblock[DS]
    dc.l    .krb5_free_keyblock[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_keyblock[PR]
    lwz     r12, T_krb5_free_keyblock_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_keyblock_contents ;;;;;

    toc
T_krb5_free_keyblock_contents_ProcPtr:	; TOC relative address
    tc      krb5_free_keyblock_contents_ProcPtr[TC], krb5_free_keyblock_contents_ProcPtr[RW]
    csect   krb5_free_keyblock_contents_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_keyblock_contents[DS]
    dc.l    .krb5_free_keyblock_contents[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_keyblock_contents[PR]
    lwz     r12, T_krb5_free_keyblock_contents_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_principal ;;;;;

    toc
T_krb5_free_principal_ProcPtr:	; TOC relative address
    tc      krb5_free_principal_ProcPtr[TC], krb5_free_principal_ProcPtr[RW]
    csect   krb5_free_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_principal[DS]
    dc.l    .krb5_free_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_principal[PR]
    lwz     r12, T_krb5_free_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_tgt_creds ;;;;;

    toc
T_krb5_free_tgt_creds_ProcPtr:	; TOC relative address
    tc      krb5_free_tgt_creds_ProcPtr[TC], krb5_free_tgt_creds_ProcPtr[RW]
    csect   krb5_free_tgt_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_tgt_creds[DS]
    dc.l    .krb5_free_tgt_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_tgt_creds[PR]
    lwz     r12, T_krb5_free_tgt_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_ticket ;;;;;

    toc
T_krb5_free_ticket_ProcPtr:	; TOC relative address
    tc      krb5_free_ticket_ProcPtr[TC], krb5_free_ticket_ProcPtr[RW]
    csect   krb5_free_ticket_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_ticket[DS]
    dc.l    .krb5_free_ticket[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_ticket[PR]
    lwz     r12, T_krb5_free_ticket_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_free_unparsed_name ;;;;;

    toc
T_krb5_free_unparsed_name_ProcPtr:	; TOC relative address
    tc      krb5_free_unparsed_name_ProcPtr[TC], krb5_free_unparsed_name_ProcPtr[RW]
    csect   krb5_free_unparsed_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_free_unparsed_name[DS]
    dc.l    .krb5_free_unparsed_name[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_free_unparsed_name[PR]
    lwz     r12, T_krb5_free_unparsed_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_fwd_tgt_creds ;;;;;

    toc
T_krb5_fwd_tgt_creds_ProcPtr:	; TOC relative address
    tc      krb5_fwd_tgt_creds_ProcPtr[TC], krb5_fwd_tgt_creds_ProcPtr[RW]
    csect   krb5_fwd_tgt_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_fwd_tgt_creds[DS]
    dc.l    .krb5_fwd_tgt_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_fwd_tgt_creds[PR]
    lwz     r12, T_krb5_fwd_tgt_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_credentials ;;;;;

    toc
T_krb5_get_credentials_ProcPtr:	; TOC relative address
    tc      krb5_get_credentials_ProcPtr[TC], krb5_get_credentials_ProcPtr[RW]
    csect   krb5_get_credentials_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_credentials[DS]
    dc.l    .krb5_get_credentials[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_credentials[PR]
    lwz     r12, T_krb5_get_credentials_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_credentials_renew ;;;;;

    toc
T_krb5_get_credentials_renew_ProcPtr:	; TOC relative address
    tc      krb5_get_credentials_renew_ProcPtr[TC], krb5_get_credentials_renew_ProcPtr[RW]
    csect   krb5_get_credentials_renew_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_credentials_renew[DS]
    dc.l    .krb5_get_credentials_renew[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_credentials_renew[PR]
    lwz     r12, T_krb5_get_credentials_renew_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_credentials_validate ;;;;;

    toc
T_krb5_get_credentials_validate_ProcPtr:	; TOC relative address
    tc      krb5_get_credentials_validate_ProcPtr[TC], krb5_get_credentials_validate_ProcPtr[RW]
    csect   krb5_get_credentials_validate_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_credentials_validate[DS]
    dc.l    .krb5_get_credentials_validate[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_credentials_validate[PR]
    lwz     r12, T_krb5_get_credentials_validate_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_default_realm ;;;;;

    toc
T_krb5_get_default_realm_ProcPtr:	; TOC relative address
    tc      krb5_get_default_realm_ProcPtr[TC], krb5_get_default_realm_ProcPtr[RW]
    csect   krb5_get_default_realm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_default_realm[DS]
    dc.l    .krb5_get_default_realm[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_default_realm[PR]
    lwz     r12, T_krb5_get_default_realm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_host_realm ;;;;;

    toc
T_krb5_get_host_realm_ProcPtr:	; TOC relative address
    tc      krb5_get_host_realm_ProcPtr[TC], krb5_get_host_realm_ProcPtr[RW]
    csect   krb5_get_host_realm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_host_realm[DS]
    dc.l    .krb5_get_host_realm[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_host_realm[PR]
    lwz     r12, T_krb5_get_host_realm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_in_tkt ;;;;;

    toc
T_krb5_get_in_tkt_ProcPtr:	; TOC relative address
    tc      krb5_get_in_tkt_ProcPtr[TC], krb5_get_in_tkt_ProcPtr[RW]
    csect   krb5_get_in_tkt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_in_tkt[DS]
    dc.l    .krb5_get_in_tkt[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_in_tkt[PR]
    lwz     r12, T_krb5_get_in_tkt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_in_tkt_with_keytab ;;;;;

    toc
T_krb5_get_in_tkt_with_keytab_ProcPtr:	; TOC relative address
    tc      krb5_get_in_tkt_with_keytab_ProcPtr[TC], krb5_get_in_tkt_with_keytab_ProcPtr[RW]
    csect   krb5_get_in_tkt_with_keytab_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_in_tkt_with_keytab[DS]
    dc.l    .krb5_get_in_tkt_with_keytab[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_in_tkt_with_keytab[PR]
    lwz     r12, T_krb5_get_in_tkt_with_keytab_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_in_tkt_with_password ;;;;;

    toc
T_krb5_get_in_tkt_with_password_ProcPtr:	; TOC relative address
    tc      krb5_get_in_tkt_with_password_ProcPtr[TC], krb5_get_in_tkt_with_password_ProcPtr[RW]
    csect   krb5_get_in_tkt_with_password_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_in_tkt_with_password[DS]
    dc.l    .krb5_get_in_tkt_with_password[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_in_tkt_with_password[PR]
    lwz     r12, T_krb5_get_in_tkt_with_password_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_in_tkt_with_skey ;;;;;

    toc
T_krb5_get_in_tkt_with_skey_ProcPtr:	; TOC relative address
    tc      krb5_get_in_tkt_with_skey_ProcPtr[TC], krb5_get_in_tkt_with_skey_ProcPtr[RW]
    csect   krb5_get_in_tkt_with_skey_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_in_tkt_with_skey[DS]
    dc.l    .krb5_get_in_tkt_with_skey[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_in_tkt_with_skey[PR]
    lwz     r12, T_krb5_get_in_tkt_with_skey_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_keytab ;;;;;

    toc
T_krb5_get_init_creds_keytab_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_keytab_ProcPtr[TC], krb5_get_init_creds_keytab_ProcPtr[RW]
    csect   krb5_get_init_creds_keytab_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_keytab[DS]
    dc.l    .krb5_get_init_creds_keytab[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_keytab[PR]
    lwz     r12, T_krb5_get_init_creds_keytab_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_opt_init ;;;;;

    toc
T_krb5_get_init_creds_opt_init_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_opt_init_ProcPtr[TC], krb5_get_init_creds_opt_init_ProcPtr[RW]
    csect   krb5_get_init_creds_opt_init_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_opt_init[DS]
    dc.l    .krb5_get_init_creds_opt_init[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_opt_init[PR]
    lwz     r12, T_krb5_get_init_creds_opt_init_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_opt_set_address_list ;;;;;

    toc
T_krb5_get_init_creds_opt_set_address_list_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_opt_set_address_list_ProcPtr[TC], krb5_get_init_creds_opt_set_address_list_ProcPtr[RW]
    csect   krb5_get_init_creds_opt_set_address_list_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_opt_set_address_list[DS]
    dc.l    .krb5_get_init_creds_opt_set_address_list[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_opt_set_address_list[PR]
    lwz     r12, T_krb5_get_init_creds_opt_set_address_list_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_opt_set_etype_list ;;;;;

    toc
T_krb5_get_init_creds_opt_set_etype_list_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_opt_set_etype_list_ProcPtr[TC], krb5_get_init_creds_opt_set_etype_list_ProcPtr[RW]
    csect   krb5_get_init_creds_opt_set_etype_list_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_opt_set_etype_list[DS]
    dc.l    .krb5_get_init_creds_opt_set_etype_list[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_opt_set_etype_list[PR]
    lwz     r12, T_krb5_get_init_creds_opt_set_etype_list_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_opt_set_forwardable ;;;;;

    toc
T_krb5_get_init_creds_opt_set_forwardable_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_opt_set_forwardable_ProcPtr[TC], krb5_get_init_creds_opt_set_forwardable_ProcPtr[RW]
    csect   krb5_get_init_creds_opt_set_forwardable_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_opt_set_forwardable[DS]
    dc.l    .krb5_get_init_creds_opt_set_forwardable[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_opt_set_forwardable[PR]
    lwz     r12, T_krb5_get_init_creds_opt_set_forwardable_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_opt_set_preauth_list ;;;;;

    toc
T_krb5_get_init_creds_opt_set_preauth_list_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_opt_set_preauth_list_ProcPtr[TC], krb5_get_init_creds_opt_set_preauth_list_ProcPtr[RW]
    csect   krb5_get_init_creds_opt_set_preauth_list_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_opt_set_preauth_list[DS]
    dc.l    .krb5_get_init_creds_opt_set_preauth_list[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_opt_set_preauth_list[PR]
    lwz     r12, T_krb5_get_init_creds_opt_set_preauth_list_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_opt_set_proxiable ;;;;;

    toc
T_krb5_get_init_creds_opt_set_proxiable_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_opt_set_proxiable_ProcPtr[TC], krb5_get_init_creds_opt_set_proxiable_ProcPtr[RW]
    csect   krb5_get_init_creds_opt_set_proxiable_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_opt_set_proxiable[DS]
    dc.l    .krb5_get_init_creds_opt_set_proxiable[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_opt_set_proxiable[PR]
    lwz     r12, T_krb5_get_init_creds_opt_set_proxiable_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_opt_set_renew_life ;;;;;

    toc
T_krb5_get_init_creds_opt_set_renew_life_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_opt_set_renew_life_ProcPtr[TC], krb5_get_init_creds_opt_set_renew_life_ProcPtr[RW]
    csect   krb5_get_init_creds_opt_set_renew_life_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_opt_set_renew_life[DS]
    dc.l    .krb5_get_init_creds_opt_set_renew_life[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_opt_set_renew_life[PR]
    lwz     r12, T_krb5_get_init_creds_opt_set_renew_life_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_opt_set_salt ;;;;;

    toc
T_krb5_get_init_creds_opt_set_salt_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_opt_set_salt_ProcPtr[TC], krb5_get_init_creds_opt_set_salt_ProcPtr[RW]
    csect   krb5_get_init_creds_opt_set_salt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_opt_set_salt[DS]
    dc.l    .krb5_get_init_creds_opt_set_salt[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_opt_set_salt[PR]
    lwz     r12, T_krb5_get_init_creds_opt_set_salt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_opt_set_tkt_life ;;;;;

    toc
T_krb5_get_init_creds_opt_set_tkt_life_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_opt_set_tkt_life_ProcPtr[TC], krb5_get_init_creds_opt_set_tkt_life_ProcPtr[RW]
    csect   krb5_get_init_creds_opt_set_tkt_life_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_opt_set_tkt_life[DS]
    dc.l    .krb5_get_init_creds_opt_set_tkt_life[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_opt_set_tkt_life[PR]
    lwz     r12, T_krb5_get_init_creds_opt_set_tkt_life_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_init_creds_password ;;;;;

    toc
T_krb5_get_init_creds_password_ProcPtr:	; TOC relative address
    tc      krb5_get_init_creds_password_ProcPtr[TC], krb5_get_init_creds_password_ProcPtr[RW]
    csect   krb5_get_init_creds_password_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_init_creds_password[DS]
    dc.l    .krb5_get_init_creds_password[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_init_creds_password[PR]
    lwz     r12, T_krb5_get_init_creds_password_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_profile ;;;;;

    toc
T_krb5_get_profile_ProcPtr:	; TOC relative address
    tc      krb5_get_profile_ProcPtr[TC], krb5_get_profile_ProcPtr[RW]
    csect   krb5_get_profile_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_profile[DS]
    dc.l    .krb5_get_profile[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_profile[PR]
    lwz     r12, T_krb5_get_profile_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_prompt_types ;;;;;

    toc
T_krb5_get_prompt_types_ProcPtr:	; TOC relative address
    tc      krb5_get_prompt_types_ProcPtr[TC], krb5_get_prompt_types_ProcPtr[RW]
    csect   krb5_get_prompt_types_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_prompt_types[DS]
    dc.l    .krb5_get_prompt_types[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_prompt_types[PR]
    lwz     r12, T_krb5_get_prompt_types_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_renewed_creds ;;;;;

    toc
T_krb5_get_renewed_creds_ProcPtr:	; TOC relative address
    tc      krb5_get_renewed_creds_ProcPtr[TC], krb5_get_renewed_creds_ProcPtr[RW]
    csect   krb5_get_renewed_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_renewed_creds[DS]
    dc.l    .krb5_get_renewed_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_renewed_creds[PR]
    lwz     r12, T_krb5_get_renewed_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_server_rcache ;;;;;

    toc
T_krb5_get_server_rcache_ProcPtr:	; TOC relative address
    tc      krb5_get_server_rcache_ProcPtr[TC], krb5_get_server_rcache_ProcPtr[RW]
    csect   krb5_get_server_rcache_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_server_rcache[DS]
    dc.l    .krb5_get_server_rcache[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_server_rcache[PR]
    lwz     r12, T_krb5_get_server_rcache_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_time_offsets ;;;;;

    toc
T_krb5_get_time_offsets_ProcPtr:	; TOC relative address
    tc      krb5_get_time_offsets_ProcPtr[TC], krb5_get_time_offsets_ProcPtr[RW]
    csect   krb5_get_time_offsets_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_time_offsets[DS]
    dc.l    .krb5_get_time_offsets[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_time_offsets[PR]
    lwz     r12, T_krb5_get_time_offsets_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_get_validated_creds ;;;;;

    toc
T_krb5_get_validated_creds_ProcPtr:	; TOC relative address
    tc      krb5_get_validated_creds_ProcPtr[TC], krb5_get_validated_creds_ProcPtr[RW]
    csect   krb5_get_validated_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_get_validated_creds[DS]
    dc.l    .krb5_get_validated_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_get_validated_creds[PR]
    lwz     r12, T_krb5_get_validated_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_init_context ;;;;;

    toc
T_krb5_init_context_ProcPtr:	; TOC relative address
    tc      krb5_init_context_ProcPtr[TC], krb5_init_context_ProcPtr[RW]
    csect   krb5_init_context_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_init_context[DS]
    dc.l    .krb5_init_context[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_init_context[PR]
    lwz     r12, T_krb5_init_context_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_init_random_key ;;;;;

    toc
T_krb5_init_random_key_ProcPtr:	; TOC relative address
    tc      krb5_init_random_key_ProcPtr[TC], krb5_init_random_key_ProcPtr[RW]
    csect   krb5_init_random_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_init_random_key[DS]
    dc.l    .krb5_init_random_key[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_init_random_key[PR]
    lwz     r12, T_krb5_init_random_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_kt_add_entry ;;;;;

    toc
T_krb5_kt_add_entry_ProcPtr:	; TOC relative address
    tc      krb5_kt_add_entry_ProcPtr[TC], krb5_kt_add_entry_ProcPtr[RW]
    csect   krb5_kt_add_entry_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_kt_add_entry[DS]
    dc.l    .krb5_kt_add_entry[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_kt_add_entry[PR]
    lwz     r12, T_krb5_kt_add_entry_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_kt_default ;;;;;

    toc
T_krb5_kt_default_ProcPtr:	; TOC relative address
    tc      krb5_kt_default_ProcPtr[TC], krb5_kt_default_ProcPtr[RW]
    csect   krb5_kt_default_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_kt_default[DS]
    dc.l    .krb5_kt_default[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_kt_default[PR]
    lwz     r12, T_krb5_kt_default_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_kt_read_service_key ;;;;;

    toc
T_krb5_kt_read_service_key_ProcPtr:	; TOC relative address
    tc      krb5_kt_read_service_key_ProcPtr[TC], krb5_kt_read_service_key_ProcPtr[RW]
    csect   krb5_kt_read_service_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_kt_read_service_key[DS]
    dc.l    .krb5_kt_read_service_key[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_kt_read_service_key[PR]
    lwz     r12, T_krb5_kt_read_service_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_kt_remove_entry ;;;;;

    toc
T_krb5_kt_remove_entry_ProcPtr:	; TOC relative address
    tc      krb5_kt_remove_entry_ProcPtr[TC], krb5_kt_remove_entry_ProcPtr[RW]
    csect   krb5_kt_remove_entry_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_kt_remove_entry[DS]
    dc.l    .krb5_kt_remove_entry[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_kt_remove_entry[PR]
    lwz     r12, T_krb5_kt_remove_entry_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_kt_resolve ;;;;;

    toc
T_krb5_kt_resolve_ProcPtr:	; TOC relative address
    tc      krb5_kt_resolve_ProcPtr[TC], krb5_kt_resolve_ProcPtr[RW]
    csect   krb5_kt_resolve_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_kt_resolve[DS]
    dc.l    .krb5_kt_resolve[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_kt_resolve[PR]
    lwz     r12, T_krb5_kt_resolve_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_kuserok ;;;;;

    toc
T_krb5_kuserok_ProcPtr:	; TOC relative address
    tc      krb5_kuserok_ProcPtr[TC], krb5_kuserok_ProcPtr[RW]
    csect   krb5_kuserok_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_kuserok[DS]
    dc.l    .krb5_kuserok[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_kuserok[PR]
    lwz     r12, T_krb5_kuserok_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_mk_error ;;;;;

    toc
T_krb5_mk_error_ProcPtr:	; TOC relative address
    tc      krb5_mk_error_ProcPtr[TC], krb5_mk_error_ProcPtr[RW]
    csect   krb5_mk_error_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_mk_error[DS]
    dc.l    .krb5_mk_error[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_mk_error[PR]
    lwz     r12, T_krb5_mk_error_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_mk_priv ;;;;;

    toc
T_krb5_mk_priv_ProcPtr:	; TOC relative address
    tc      krb5_mk_priv_ProcPtr[TC], krb5_mk_priv_ProcPtr[RW]
    csect   krb5_mk_priv_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_mk_priv[DS]
    dc.l    .krb5_mk_priv[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_mk_priv[PR]
    lwz     r12, T_krb5_mk_priv_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_mk_rep ;;;;;

    toc
T_krb5_mk_rep_ProcPtr:	; TOC relative address
    tc      krb5_mk_rep_ProcPtr[TC], krb5_mk_rep_ProcPtr[RW]
    csect   krb5_mk_rep_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_mk_rep[DS]
    dc.l    .krb5_mk_rep[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_mk_rep[PR]
    lwz     r12, T_krb5_mk_rep_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_mk_req ;;;;;

    toc
T_krb5_mk_req_ProcPtr:	; TOC relative address
    tc      krb5_mk_req_ProcPtr[TC], krb5_mk_req_ProcPtr[RW]
    csect   krb5_mk_req_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_mk_req[DS]
    dc.l    .krb5_mk_req[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_mk_req[PR]
    lwz     r12, T_krb5_mk_req_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_mk_req_extended ;;;;;

    toc
T_krb5_mk_req_extended_ProcPtr:	; TOC relative address
    tc      krb5_mk_req_extended_ProcPtr[TC], krb5_mk_req_extended_ProcPtr[RW]
    csect   krb5_mk_req_extended_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_mk_req_extended[DS]
    dc.l    .krb5_mk_req_extended[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_mk_req_extended[PR]
    lwz     r12, T_krb5_mk_req_extended_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_mk_safe ;;;;;

    toc
T_krb5_mk_safe_ProcPtr:	; TOC relative address
    tc      krb5_mk_safe_ProcPtr[TC], krb5_mk_safe_ProcPtr[RW]
    csect   krb5_mk_safe_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_mk_safe[DS]
    dc.l    .krb5_mk_safe[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_mk_safe[PR]
    lwz     r12, T_krb5_mk_safe_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_os_localaddr ;;;;;

    toc
T_krb5_os_localaddr_ProcPtr:	; TOC relative address
    tc      krb5_os_localaddr_ProcPtr[TC], krb5_os_localaddr_ProcPtr[RW]
    csect   krb5_os_localaddr_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_os_localaddr[DS]
    dc.l    .krb5_os_localaddr[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_os_localaddr[PR]
    lwz     r12, T_krb5_os_localaddr_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_parse_name ;;;;;

    toc
T_krb5_parse_name_ProcPtr:	; TOC relative address
    tc      krb5_parse_name_ProcPtr[TC], krb5_parse_name_ProcPtr[RW]
    csect   krb5_parse_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_parse_name[DS]
    dc.l    .krb5_parse_name[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_parse_name[PR]
    lwz     r12, T_krb5_parse_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_principal_compare ;;;;;

    toc
T_krb5_principal_compare_ProcPtr:	; TOC relative address
    tc      krb5_principal_compare_ProcPtr[TC], krb5_principal_compare_ProcPtr[RW]
    csect   krb5_principal_compare_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_principal_compare[DS]
    dc.l    .krb5_principal_compare[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_principal_compare[PR]
    lwz     r12, T_krb5_principal_compare_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_process_key ;;;;;

    toc
T_krb5_process_key_ProcPtr:	; TOC relative address
    tc      krb5_process_key_ProcPtr[TC], krb5_process_key_ProcPtr[RW]
    csect   krb5_process_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_process_key[DS]
    dc.l    .krb5_process_key[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_process_key[PR]
    lwz     r12, T_krb5_process_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_random_key ;;;;;

    toc
T_krb5_random_key_ProcPtr:	; TOC relative address
    tc      krb5_random_key_ProcPtr[TC], krb5_random_key_ProcPtr[RW]
    csect   krb5_random_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_random_key[DS]
    dc.l    .krb5_random_key[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_random_key[PR]
    lwz     r12, T_krb5_random_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_rd_cred ;;;;;

    toc
T_krb5_rd_cred_ProcPtr:	; TOC relative address
    tc      krb5_rd_cred_ProcPtr[TC], krb5_rd_cred_ProcPtr[RW]
    csect   krb5_rd_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_rd_cred[DS]
    dc.l    .krb5_rd_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_rd_cred[PR]
    lwz     r12, T_krb5_rd_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_rd_error ;;;;;

    toc
T_krb5_rd_error_ProcPtr:	; TOC relative address
    tc      krb5_rd_error_ProcPtr[TC], krb5_rd_error_ProcPtr[RW]
    csect   krb5_rd_error_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_rd_error[DS]
    dc.l    .krb5_rd_error[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_rd_error[PR]
    lwz     r12, T_krb5_rd_error_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_rd_priv ;;;;;

    toc
T_krb5_rd_priv_ProcPtr:	; TOC relative address
    tc      krb5_rd_priv_ProcPtr[TC], krb5_rd_priv_ProcPtr[RW]
    csect   krb5_rd_priv_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_rd_priv[DS]
    dc.l    .krb5_rd_priv[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_rd_priv[PR]
    lwz     r12, T_krb5_rd_priv_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_rd_rep ;;;;;

    toc
T_krb5_rd_rep_ProcPtr:	; TOC relative address
    tc      krb5_rd_rep_ProcPtr[TC], krb5_rd_rep_ProcPtr[RW]
    csect   krb5_rd_rep_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_rd_rep[DS]
    dc.l    .krb5_rd_rep[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_rd_rep[PR]
    lwz     r12, T_krb5_rd_rep_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_rd_req ;;;;;

    toc
T_krb5_rd_req_ProcPtr:	; TOC relative address
    tc      krb5_rd_req_ProcPtr[TC], krb5_rd_req_ProcPtr[RW]
    csect   krb5_rd_req_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_rd_req[DS]
    dc.l    .krb5_rd_req[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_rd_req[PR]
    lwz     r12, T_krb5_rd_req_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_rd_safe ;;;;;

    toc
T_krb5_rd_safe_ProcPtr:	; TOC relative address
    tc      krb5_rd_safe_ProcPtr[TC], krb5_rd_safe_ProcPtr[RW]
    csect   krb5_rd_safe_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_rd_safe[DS]
    dc.l    .krb5_rd_safe[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_rd_safe[PR]
    lwz     r12, T_krb5_rd_safe_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_read_password ;;;;;

    toc
T_krb5_read_password_ProcPtr:	; TOC relative address
    tc      krb5_read_password_ProcPtr[TC], krb5_read_password_ProcPtr[RW]
    csect   krb5_read_password_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_read_password[DS]
    dc.l    .krb5_read_password[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_read_password[PR]
    lwz     r12, T_krb5_read_password_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_recvauth ;;;;;

    toc
T_krb5_recvauth_ProcPtr:	; TOC relative address
    tc      krb5_recvauth_ProcPtr[TC], krb5_recvauth_ProcPtr[RW]
    csect   krb5_recvauth_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_recvauth[DS]
    dc.l    .krb5_recvauth[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_recvauth[PR]
    lwz     r12, T_krb5_recvauth_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_salttype_to_string ;;;;;

    toc
T_krb5_salttype_to_string_ProcPtr:	; TOC relative address
    tc      krb5_salttype_to_string_ProcPtr[TC], krb5_salttype_to_string_ProcPtr[RW]
    csect   krb5_salttype_to_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_salttype_to_string[DS]
    dc.l    .krb5_salttype_to_string[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_salttype_to_string[PR]
    lwz     r12, T_krb5_salttype_to_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_sendauth ;;;;;

    toc
T_krb5_sendauth_ProcPtr:	; TOC relative address
    tc      krb5_sendauth_ProcPtr[TC], krb5_sendauth_ProcPtr[RW]
    csect   krb5_sendauth_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_sendauth[DS]
    dc.l    .krb5_sendauth[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_sendauth[PR]
    lwz     r12, T_krb5_sendauth_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_sname_to_principal ;;;;;

    toc
T_krb5_sname_to_principal_ProcPtr:	; TOC relative address
    tc      krb5_sname_to_principal_ProcPtr[TC], krb5_sname_to_principal_ProcPtr[RW]
    csect   krb5_sname_to_principal_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_sname_to_principal[DS]
    dc.l    .krb5_sname_to_principal[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_sname_to_principal[PR]
    lwz     r12, T_krb5_sname_to_principal_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_string_to_cksumtype ;;;;;

    toc
T_krb5_string_to_cksumtype_ProcPtr:	; TOC relative address
    tc      krb5_string_to_cksumtype_ProcPtr[TC], krb5_string_to_cksumtype_ProcPtr[RW]
    csect   krb5_string_to_cksumtype_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_string_to_cksumtype[DS]
    dc.l    .krb5_string_to_cksumtype[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_string_to_cksumtype[PR]
    lwz     r12, T_krb5_string_to_cksumtype_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_string_to_deltat ;;;;;

    toc
T_krb5_string_to_deltat_ProcPtr:	; TOC relative address
    tc      krb5_string_to_deltat_ProcPtr[TC], krb5_string_to_deltat_ProcPtr[RW]
    csect   krb5_string_to_deltat_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_string_to_deltat[DS]
    dc.l    .krb5_string_to_deltat[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_string_to_deltat[PR]
    lwz     r12, T_krb5_string_to_deltat_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_string_to_enctype ;;;;;

    toc
T_krb5_string_to_enctype_ProcPtr:	; TOC relative address
    tc      krb5_string_to_enctype_ProcPtr[TC], krb5_string_to_enctype_ProcPtr[RW]
    csect   krb5_string_to_enctype_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_string_to_enctype[DS]
    dc.l    .krb5_string_to_enctype[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_string_to_enctype[PR]
    lwz     r12, T_krb5_string_to_enctype_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_string_to_key ;;;;;

    toc
T_krb5_string_to_key_ProcPtr:	; TOC relative address
    tc      krb5_string_to_key_ProcPtr[TC], krb5_string_to_key_ProcPtr[RW]
    csect   krb5_string_to_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_string_to_key[DS]
    dc.l    .krb5_string_to_key[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_string_to_key[PR]
    lwz     r12, T_krb5_string_to_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_string_to_salttype ;;;;;

    toc
T_krb5_string_to_salttype_ProcPtr:	; TOC relative address
    tc      krb5_string_to_salttype_ProcPtr[TC], krb5_string_to_salttype_ProcPtr[RW]
    csect   krb5_string_to_salttype_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_string_to_salttype[DS]
    dc.l    .krb5_string_to_salttype[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_string_to_salttype[PR]
    lwz     r12, T_krb5_string_to_salttype_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_string_to_timestamp ;;;;;

    toc
T_krb5_string_to_timestamp_ProcPtr:	; TOC relative address
    tc      krb5_string_to_timestamp_ProcPtr[TC], krb5_string_to_timestamp_ProcPtr[RW]
    csect   krb5_string_to_timestamp_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_string_to_timestamp[DS]
    dc.l    .krb5_string_to_timestamp[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_string_to_timestamp[PR]
    lwz     r12, T_krb5_string_to_timestamp_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_timeofday ;;;;;

    toc
T_krb5_timeofday_ProcPtr:	; TOC relative address
    tc      krb5_timeofday_ProcPtr[TC], krb5_timeofday_ProcPtr[RW]
    csect   krb5_timeofday_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_timeofday[DS]
    dc.l    .krb5_timeofday[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_timeofday[PR]
    lwz     r12, T_krb5_timeofday_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_timestamp_to_sfstring ;;;;;

    toc
T_krb5_timestamp_to_sfstring_ProcPtr:	; TOC relative address
    tc      krb5_timestamp_to_sfstring_ProcPtr[TC], krb5_timestamp_to_sfstring_ProcPtr[RW]
    csect   krb5_timestamp_to_sfstring_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_timestamp_to_sfstring[DS]
    dc.l    .krb5_timestamp_to_sfstring[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_timestamp_to_sfstring[PR]
    lwz     r12, T_krb5_timestamp_to_sfstring_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_timestamp_to_string ;;;;;

    toc
T_krb5_timestamp_to_string_ProcPtr:	; TOC relative address
    tc      krb5_timestamp_to_string_ProcPtr[TC], krb5_timestamp_to_string_ProcPtr[RW]
    csect   krb5_timestamp_to_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_timestamp_to_string[DS]
    dc.l    .krb5_timestamp_to_string[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_timestamp_to_string[PR]
    lwz     r12, T_krb5_timestamp_to_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_unparse_name ;;;;;

    toc
T_krb5_unparse_name_ProcPtr:	; TOC relative address
    tc      krb5_unparse_name_ProcPtr[TC], krb5_unparse_name_ProcPtr[RW]
    csect   krb5_unparse_name_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_unparse_name[DS]
    dc.l    .krb5_unparse_name[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_unparse_name[PR]
    lwz     r12, T_krb5_unparse_name_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_unparse_name_ext ;;;;;

    toc
T_krb5_unparse_name_ext_ProcPtr:	; TOC relative address
    tc      krb5_unparse_name_ext_ProcPtr[TC], krb5_unparse_name_ext_ProcPtr[RW]
    csect   krb5_unparse_name_ext_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_unparse_name_ext[DS]
    dc.l    .krb5_unparse_name_ext[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_unparse_name_ext[PR]
    lwz     r12, T_krb5_unparse_name_ext_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_us_timeofday ;;;;;

    toc
T_krb5_us_timeofday_ProcPtr:	; TOC relative address
    tc      krb5_us_timeofday_ProcPtr[TC], krb5_us_timeofday_ProcPtr[RW]
    csect   krb5_us_timeofday_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_us_timeofday[DS]
    dc.l    .krb5_us_timeofday[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_us_timeofday[PR]
    lwz     r12, T_krb5_us_timeofday_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_use_enctype ;;;;;

    toc
T_krb5_use_enctype_ProcPtr:	; TOC relative address
    tc      krb5_use_enctype_ProcPtr[TC], krb5_use_enctype_ProcPtr[RW]
    csect   krb5_use_enctype_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_use_enctype[DS]
    dc.l    .krb5_use_enctype[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_use_enctype[PR]
    lwz     r12, T_krb5_use_enctype_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_verify_checksum ;;;;;

    toc
T_krb5_verify_checksum_ProcPtr:	; TOC relative address
    tc      krb5_verify_checksum_ProcPtr[TC], krb5_verify_checksum_ProcPtr[RW]
    csect   krb5_verify_checksum_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_verify_checksum[DS]
    dc.l    .krb5_verify_checksum[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_verify_checksum[PR]
    lwz     r12, T_krb5_verify_checksum_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_verify_init_creds ;;;;;

    toc
T_krb5_verify_init_creds_ProcPtr:	; TOC relative address
    tc      krb5_verify_init_creds_ProcPtr[TC], krb5_verify_init_creds_ProcPtr[RW]
    csect   krb5_verify_init_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_verify_init_creds[DS]
    dc.l    .krb5_verify_init_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_verify_init_creds[PR]
    lwz     r12, T_krb5_verify_init_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_verify_init_creds_opt_init ;;;;;

    toc
T_krb5_verify_init_creds_opt_init_ProcPtr:	; TOC relative address
    tc      krb5_verify_init_creds_opt_init_ProcPtr[TC], krb5_verify_init_creds_opt_init_ProcPtr[RW]
    csect   krb5_verify_init_creds_opt_init_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_verify_init_creds_opt_init[DS]
    dc.l    .krb5_verify_init_creds_opt_init[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_verify_init_creds_opt_init[PR]
    lwz     r12, T_krb5_verify_init_creds_opt_init_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb5_verify_init_creds_opt_set_ap_req_nofail ;;;;;

    toc
T_krb5_verify_init_creds_opt_set_ap_req_nofail_ProcPtr:	; TOC relative address
    tc      krb5_verify_init_creds_opt_set_ap_req_nofail_ProcPtr[TC], krb5_verify_init_creds_opt_set_ap_req_nofail_ProcPtr[RW]
    csect   krb5_verify_init_creds_opt_set_ap_req_nofail_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb5_verify_init_creds_opt_set_ap_req_nofail[DS]
    dc.l    .krb5_verify_init_creds_opt_set_ap_req_nofail[PR]
    dc.l    TOC[tc0]
    
    csect   .krb5_verify_init_creds_opt_set_ap_req_nofail[PR]
    lwz     r12, T_krb5_verify_init_creds_opt_set_ap_req_nofail_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_change_password ;;;;;

    toc
T_krb_change_password_ProcPtr:	; TOC relative address
    tc      krb_change_password_ProcPtr[TC], krb_change_password_ProcPtr[RW]
    csect   krb_change_password_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_change_password[DS]
    dc.l    .krb_change_password[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_change_password[PR]
    lwz     r12, T_krb_change_password_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_check_auth ;;;;;

    toc
T_krb_check_auth_ProcPtr:	; TOC relative address
    tc      krb_check_auth_ProcPtr[TC], krb_check_auth_ProcPtr[RW]
    csect   krb_check_auth_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_check_auth[DS]
    dc.l    .krb_check_auth[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_check_auth[PR]
    lwz     r12, T_krb_check_auth_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_delete_cred ;;;;;

    toc
T_krb_delete_cred_ProcPtr:	; TOC relative address
    tc      krb_delete_cred_ProcPtr[TC], krb_delete_cred_ProcPtr[RW]
    csect   krb_delete_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_delete_cred[DS]
    dc.l    .krb_delete_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_delete_cred[PR]
    lwz     r12, T_krb_delete_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_err_txt ;;;;;

    toc
T_krb_err_txt_ProcPtr:	; TOC relative address
    tc      krb_err_txt_ProcPtr[TC], krb_err_txt_ProcPtr[RW]
    csect   krb_err_txt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_err_txt[DS]
    dc.l    .krb_err_txt[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_err_txt[PR]
    lwz     r12, T_krb_err_txt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_admhst ;;;;;

    toc
T_krb_get_admhst_ProcPtr:	; TOC relative address
    tc      krb_get_admhst_ProcPtr[TC], krb_get_admhst_ProcPtr[RW]
    csect   krb_get_admhst_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_admhst[DS]
    dc.l    .krb_get_admhst[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_admhst[PR]
    lwz     r12, T_krb_get_admhst_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_cred ;;;;;

    toc
T_krb_get_cred_ProcPtr:	; TOC relative address
    tc      krb_get_cred_ProcPtr[TC], krb_get_cred_ProcPtr[RW]
    csect   krb_get_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_cred[DS]
    dc.l    .krb_get_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_cred[PR]
    lwz     r12, T_krb_get_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_err_text ;;;;;

    toc
T_krb_get_err_text_ProcPtr:	; TOC relative address
    tc      krb_get_err_text_ProcPtr[TC], krb_get_err_text_ProcPtr[RW]
    csect   krb_get_err_text_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_err_text[DS]
    dc.l    .krb_get_err_text[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_err_text[PR]
    lwz     r12, T_krb_get_err_text_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_in_tkt ;;;;;

    toc
T_krb_get_in_tkt_ProcPtr:	; TOC relative address
    tc      krb_get_in_tkt_ProcPtr[TC], krb_get_in_tkt_ProcPtr[RW]
    csect   krb_get_in_tkt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_in_tkt[DS]
    dc.l    .krb_get_in_tkt[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_in_tkt[PR]
    lwz     r12, T_krb_get_in_tkt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_in_tkt_creds ;;;;;

    toc
T_krb_get_in_tkt_creds_ProcPtr:	; TOC relative address
    tc      krb_get_in_tkt_creds_ProcPtr[TC], krb_get_in_tkt_creds_ProcPtr[RW]
    csect   krb_get_in_tkt_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_in_tkt_creds[DS]
    dc.l    .krb_get_in_tkt_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_in_tkt_creds[PR]
    lwz     r12, T_krb_get_in_tkt_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_krbhst ;;;;;

    toc
T_krb_get_krbhst_ProcPtr:	; TOC relative address
    tc      krb_get_krbhst_ProcPtr[TC], krb_get_krbhst_ProcPtr[RW]
    csect   krb_get_krbhst_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_krbhst[DS]
    dc.l    .krb_get_krbhst[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_krbhst[PR]
    lwz     r12, T_krb_get_krbhst_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_lrealm ;;;;;

    toc
T_krb_get_lrealm_ProcPtr:	; TOC relative address
    tc      krb_get_lrealm_ProcPtr[TC], krb_get_lrealm_ProcPtr[RW]
    csect   krb_get_lrealm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_lrealm[DS]
    dc.l    .krb_get_lrealm[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_lrealm[PR]
    lwz     r12, T_krb_get_lrealm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_nth_cred ;;;;;

    toc
T_krb_get_nth_cred_ProcPtr:	; TOC relative address
    tc      krb_get_nth_cred_ProcPtr[TC], krb_get_nth_cred_ProcPtr[RW]
    csect   krb_get_nth_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_nth_cred[DS]
    dc.l    .krb_get_nth_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_nth_cred[PR]
    lwz     r12, T_krb_get_nth_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_num_cred ;;;;;

    toc
T_krb_get_num_cred_ProcPtr:	; TOC relative address
    tc      krb_get_num_cred_ProcPtr[TC], krb_get_num_cred_ProcPtr[RW]
    csect   krb_get_num_cred_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_num_cred[DS]
    dc.l    .krb_get_num_cred[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_num_cred[PR]
    lwz     r12, T_krb_get_num_cred_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_phost ;;;;;

    toc
T_krb_get_phost_ProcPtr:	; TOC relative address
    tc      krb_get_phost_ProcPtr[TC], krb_get_phost_ProcPtr[RW]
    csect   krb_get_phost_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_phost[DS]
    dc.l    .krb_get_phost[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_phost[PR]
    lwz     r12, T_krb_get_phost_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_profile ;;;;;

    toc
T_krb_get_profile_ProcPtr:	; TOC relative address
    tc      krb_get_profile_ProcPtr[TC], krb_get_profile_ProcPtr[RW]
    csect   krb_get_profile_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_profile[DS]
    dc.l    .krb_get_profile[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_profile[PR]
    lwz     r12, T_krb_get_profile_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_pw_in_tkt ;;;;;

    toc
T_krb_get_pw_in_tkt_ProcPtr:	; TOC relative address
    tc      krb_get_pw_in_tkt_ProcPtr[TC], krb_get_pw_in_tkt_ProcPtr[RW]
    csect   krb_get_pw_in_tkt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_pw_in_tkt[DS]
    dc.l    .krb_get_pw_in_tkt[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_pw_in_tkt[PR]
    lwz     r12, T_krb_get_pw_in_tkt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_pw_in_tkt_creds ;;;;;

    toc
T_krb_get_pw_in_tkt_creds_ProcPtr:	; TOC relative address
    tc      krb_get_pw_in_tkt_creds_ProcPtr[TC], krb_get_pw_in_tkt_creds_ProcPtr[RW]
    csect   krb_get_pw_in_tkt_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_pw_in_tkt_creds[DS]
    dc.l    .krb_get_pw_in_tkt_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_pw_in_tkt_creds[PR]
    lwz     r12, T_krb_get_pw_in_tkt_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_svc_in_tkt ;;;;;

    toc
T_krb_get_svc_in_tkt_ProcPtr:	; TOC relative address
    tc      krb_get_svc_in_tkt_ProcPtr[TC], krb_get_svc_in_tkt_ProcPtr[RW]
    csect   krb_get_svc_in_tkt_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_svc_in_tkt[DS]
    dc.l    .krb_get_svc_in_tkt[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_svc_in_tkt[PR]
    lwz     r12, T_krb_get_svc_in_tkt_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_tf_fullname ;;;;;

    toc
T_krb_get_tf_fullname_ProcPtr:	; TOC relative address
    tc      krb_get_tf_fullname_ProcPtr[TC], krb_get_tf_fullname_ProcPtr[RW]
    csect   krb_get_tf_fullname_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_tf_fullname[DS]
    dc.l    .krb_get_tf_fullname[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_tf_fullname[PR]
    lwz     r12, T_krb_get_tf_fullname_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_tf_realm ;;;;;

    toc
T_krb_get_tf_realm_ProcPtr:	; TOC relative address
    tc      krb_get_tf_realm_ProcPtr[TC], krb_get_tf_realm_ProcPtr[RW]
    csect   krb_get_tf_realm_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_tf_realm[DS]
    dc.l    .krb_get_tf_realm[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_tf_realm[PR]
    lwz     r12, T_krb_get_tf_realm_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_get_ticket_for_service ;;;;;

    toc
T_krb_get_ticket_for_service_ProcPtr:	; TOC relative address
    tc      krb_get_ticket_for_service_ProcPtr[TC], krb_get_ticket_for_service_ProcPtr[RW]
    csect   krb_get_ticket_for_service_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_get_ticket_for_service[DS]
    dc.l    .krb_get_ticket_for_service[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_get_ticket_for_service[PR]
    lwz     r12, T_krb_get_ticket_for_service_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_life_to_time ;;;;;

    toc
T_krb_life_to_time_ProcPtr:	; TOC relative address
    tc      krb_life_to_time_ProcPtr[TC], krb_life_to_time_ProcPtr[RW]
    csect   krb_life_to_time_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_life_to_time[DS]
    dc.l    .krb_life_to_time[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_life_to_time[PR]
    lwz     r12, T_krb_life_to_time_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_mk_auth ;;;;;

    toc
T_krb_mk_auth_ProcPtr:	; TOC relative address
    tc      krb_mk_auth_ProcPtr[TC], krb_mk_auth_ProcPtr[RW]
    csect   krb_mk_auth_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_mk_auth[DS]
    dc.l    .krb_mk_auth[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_mk_auth[PR]
    lwz     r12, T_krb_mk_auth_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_mk_err ;;;;;

    toc
T_krb_mk_err_ProcPtr:	; TOC relative address
    tc      krb_mk_err_ProcPtr[TC], krb_mk_err_ProcPtr[RW]
    csect   krb_mk_err_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_mk_err[DS]
    dc.l    .krb_mk_err[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_mk_err[PR]
    lwz     r12, T_krb_mk_err_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_mk_priv ;;;;;

    toc
T_krb_mk_priv_ProcPtr:	; TOC relative address
    tc      krb_mk_priv_ProcPtr[TC], krb_mk_priv_ProcPtr[RW]
    csect   krb_mk_priv_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_mk_priv[DS]
    dc.l    .krb_mk_priv[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_mk_priv[PR]
    lwz     r12, T_krb_mk_priv_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_mk_req ;;;;;

    toc
T_krb_mk_req_ProcPtr:	; TOC relative address
    tc      krb_mk_req_ProcPtr[TC], krb_mk_req_ProcPtr[RW]
    csect   krb_mk_req_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_mk_req[DS]
    dc.l    .krb_mk_req[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_mk_req[PR]
    lwz     r12, T_krb_mk_req_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_mk_req_creds ;;;;;

    toc
T_krb_mk_req_creds_ProcPtr:	; TOC relative address
    tc      krb_mk_req_creds_ProcPtr[TC], krb_mk_req_creds_ProcPtr[RW]
    csect   krb_mk_req_creds_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_mk_req_creds[DS]
    dc.l    .krb_mk_req_creds[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_mk_req_creds[PR]
    lwz     r12, T_krb_mk_req_creds_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_mk_safe ;;;;;

    toc
T_krb_mk_safe_ProcPtr:	; TOC relative address
    tc      krb_mk_safe_ProcPtr[TC], krb_mk_safe_ProcPtr[RW]
    csect   krb_mk_safe_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_mk_safe[DS]
    dc.l    .krb_mk_safe[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_mk_safe[PR]
    lwz     r12, T_krb_mk_safe_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_rd_err ;;;;;

    toc
T_krb_rd_err_ProcPtr:	; TOC relative address
    tc      krb_rd_err_ProcPtr[TC], krb_rd_err_ProcPtr[RW]
    csect   krb_rd_err_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_rd_err[DS]
    dc.l    .krb_rd_err[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_rd_err[PR]
    lwz     r12, T_krb_rd_err_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_rd_priv ;;;;;

    toc
T_krb_rd_priv_ProcPtr:	; TOC relative address
    tc      krb_rd_priv_ProcPtr[TC], krb_rd_priv_ProcPtr[RW]
    csect   krb_rd_priv_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_rd_priv[DS]
    dc.l    .krb_rd_priv[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_rd_priv[PR]
    lwz     r12, T_krb_rd_priv_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_rd_req ;;;;;

    toc
T_krb_rd_req_ProcPtr:	; TOC relative address
    tc      krb_rd_req_ProcPtr[TC], krb_rd_req_ProcPtr[RW]
    csect   krb_rd_req_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_rd_req[DS]
    dc.l    .krb_rd_req[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_rd_req[PR]
    lwz     r12, T_krb_rd_req_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_rd_req_int ;;;;;

    toc
T_krb_rd_req_int_ProcPtr:	; TOC relative address
    tc      krb_rd_req_int_ProcPtr[TC], krb_rd_req_int_ProcPtr[RW]
    csect   krb_rd_req_int_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_rd_req_int[DS]
    dc.l    .krb_rd_req_int[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_rd_req_int[PR]
    lwz     r12, T_krb_rd_req_int_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_rd_safe ;;;;;

    toc
T_krb_rd_safe_ProcPtr:	; TOC relative address
    tc      krb_rd_safe_ProcPtr[TC], krb_rd_safe_ProcPtr[RW]
    csect   krb_rd_safe_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_rd_safe[DS]
    dc.l    .krb_rd_safe[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_rd_safe[PR]
    lwz     r12, T_krb_rd_safe_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_realmofhost ;;;;;

    toc
T_krb_realmofhost_ProcPtr:	; TOC relative address
    tc      krb_realmofhost_ProcPtr[TC], krb_realmofhost_ProcPtr[RW]
    csect   krb_realmofhost_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_realmofhost[DS]
    dc.l    .krb_realmofhost[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_realmofhost[PR]
    lwz     r12, T_krb_realmofhost_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_recvauth ;;;;;

    toc
T_krb_recvauth_ProcPtr:	; TOC relative address
    tc      krb_recvauth_ProcPtr[TC], krb_recvauth_ProcPtr[RW]
    csect   krb_recvauth_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_recvauth[DS]
    dc.l    .krb_recvauth[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_recvauth[PR]
    lwz     r12, T_krb_recvauth_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_sendauth ;;;;;

    toc
T_krb_sendauth_ProcPtr:	; TOC relative address
    tc      krb_sendauth_ProcPtr[TC], krb_sendauth_ProcPtr[RW]
    csect   krb_sendauth_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_sendauth[DS]
    dc.l    .krb_sendauth[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_sendauth[PR]
    lwz     r12, T_krb_sendauth_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_set_lifetime ;;;;;

    toc
T_krb_set_lifetime_ProcPtr:	; TOC relative address
    tc      krb_set_lifetime_ProcPtr[TC], krb_set_lifetime_ProcPtr[RW]
    csect   krb_set_lifetime_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_set_lifetime[DS]
    dc.l    .krb_set_lifetime[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_set_lifetime[PR]
    lwz     r12, T_krb_set_lifetime_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_set_tkt_string ;;;;;

    toc
T_krb_set_tkt_string_ProcPtr:	; TOC relative address
    tc      krb_set_tkt_string_ProcPtr[TC], krb_set_tkt_string_ProcPtr[RW]
    csect   krb_set_tkt_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_set_tkt_string[DS]
    dc.l    .krb_set_tkt_string[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_set_tkt_string[PR]
    lwz     r12, T_krb_set_tkt_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; krb_time_to_life ;;;;;

    toc
T_krb_time_to_life_ProcPtr:	; TOC relative address
    tc      krb_time_to_life_ProcPtr[TC], krb_time_to_life_ProcPtr[RW]
    csect   krb_time_to_life_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   krb_time_to_life[DS]
    dc.l    .krb_time_to_life[PR]
    dc.l    TOC[tc0]
    
    csect   .krb_time_to_life[PR]
    lwz     r12, T_krb_time_to_life_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; make_key_sched ;;;;;

    toc
T_make_key_sched_ProcPtr:	; TOC relative address
    tc      make_key_sched_ProcPtr[TC], make_key_sched_ProcPtr[RW]
    csect   make_key_sched_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   make_key_sched[DS]
    dc.l    .make_key_sched[PR]
    dc.l    TOC[tc0]
    
    csect   .make_key_sched[PR]
    lwz     r12, T_make_key_sched_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_abandon ;;;;;

    toc
T_profile_abandon_ProcPtr:	; TOC relative address
    tc      profile_abandon_ProcPtr[TC], profile_abandon_ProcPtr[RW]
    csect   profile_abandon_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_abandon[DS]
    dc.l    .profile_abandon[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_abandon[PR]
    lwz     r12, T_profile_abandon_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_add_relation ;;;;;

    toc
T_profile_add_relation_ProcPtr:	; TOC relative address
    tc      profile_add_relation_ProcPtr[TC], profile_add_relation_ProcPtr[RW]
    csect   profile_add_relation_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_add_relation[DS]
    dc.l    .profile_add_relation[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_add_relation[PR]
    lwz     r12, T_profile_add_relation_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_clear_relation ;;;;;

    toc
T_profile_clear_relation_ProcPtr:	; TOC relative address
    tc      profile_clear_relation_ProcPtr[TC], profile_clear_relation_ProcPtr[RW]
    csect   profile_clear_relation_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_clear_relation[DS]
    dc.l    .profile_clear_relation[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_clear_relation[PR]
    lwz     r12, T_profile_clear_relation_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_flush ;;;;;

    toc
T_profile_flush_ProcPtr:	; TOC relative address
    tc      profile_flush_ProcPtr[TC], profile_flush_ProcPtr[RW]
    csect   profile_flush_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_flush[DS]
    dc.l    .profile_flush[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_flush[PR]
    lwz     r12, T_profile_flush_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_free_list ;;;;;

    toc
T_profile_free_list_ProcPtr:	; TOC relative address
    tc      profile_free_list_ProcPtr[TC], profile_free_list_ProcPtr[RW]
    csect   profile_free_list_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_free_list[DS]
    dc.l    .profile_free_list[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_free_list[PR]
    lwz     r12, T_profile_free_list_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_get_boolean ;;;;;

    toc
T_profile_get_boolean_ProcPtr:	; TOC relative address
    tc      profile_get_boolean_ProcPtr[TC], profile_get_boolean_ProcPtr[RW]
    csect   profile_get_boolean_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_get_boolean[DS]
    dc.l    .profile_get_boolean[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_get_boolean[PR]
    lwz     r12, T_profile_get_boolean_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_get_integer ;;;;;

    toc
T_profile_get_integer_ProcPtr:	; TOC relative address
    tc      profile_get_integer_ProcPtr[TC], profile_get_integer_ProcPtr[RW]
    csect   profile_get_integer_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_get_integer[DS]
    dc.l    .profile_get_integer[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_get_integer[PR]
    lwz     r12, T_profile_get_integer_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_get_relation_names ;;;;;

    toc
T_profile_get_relation_names_ProcPtr:	; TOC relative address
    tc      profile_get_relation_names_ProcPtr[TC], profile_get_relation_names_ProcPtr[RW]
    csect   profile_get_relation_names_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_get_relation_names[DS]
    dc.l    .profile_get_relation_names[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_get_relation_names[PR]
    lwz     r12, T_profile_get_relation_names_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_get_string ;;;;;

    toc
T_profile_get_string_ProcPtr:	; TOC relative address
    tc      profile_get_string_ProcPtr[TC], profile_get_string_ProcPtr[RW]
    csect   profile_get_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_get_string[DS]
    dc.l    .profile_get_string[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_get_string[PR]
    lwz     r12, T_profile_get_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_get_subsection_names ;;;;;

    toc
T_profile_get_subsection_names_ProcPtr:	; TOC relative address
    tc      profile_get_subsection_names_ProcPtr[TC], profile_get_subsection_names_ProcPtr[RW]
    csect   profile_get_subsection_names_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_get_subsection_names[DS]
    dc.l    .profile_get_subsection_names[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_get_subsection_names[PR]
    lwz     r12, T_profile_get_subsection_names_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_get_values ;;;;;

    toc
T_profile_get_values_ProcPtr:	; TOC relative address
    tc      profile_get_values_ProcPtr[TC], profile_get_values_ProcPtr[RW]
    csect   profile_get_values_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_get_values[DS]
    dc.l    .profile_get_values[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_get_values[PR]
    lwz     r12, T_profile_get_values_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_init ;;;;;

    toc
T_profile_init_ProcPtr:	; TOC relative address
    tc      profile_init_ProcPtr[TC], profile_init_ProcPtr[RW]
    csect   profile_init_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_init[DS]
    dc.l    .profile_init[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_init[PR]
    lwz     r12, T_profile_init_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_init_path ;;;;;

    toc
T_profile_init_path_ProcPtr:	; TOC relative address
    tc      profile_init_path_ProcPtr[TC], profile_init_path_ProcPtr[RW]
    csect   profile_init_path_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_init_path[DS]
    dc.l    .profile_init_path[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_init_path[PR]
    lwz     r12, T_profile_init_path_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_iterator ;;;;;

    toc
T_profile_iterator_ProcPtr:	; TOC relative address
    tc      profile_iterator_ProcPtr[TC], profile_iterator_ProcPtr[RW]
    csect   profile_iterator_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_iterator[DS]
    dc.l    .profile_iterator[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_iterator[PR]
    lwz     r12, T_profile_iterator_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_iterator_create ;;;;;

    toc
T_profile_iterator_create_ProcPtr:	; TOC relative address
    tc      profile_iterator_create_ProcPtr[TC], profile_iterator_create_ProcPtr[RW]
    csect   profile_iterator_create_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_iterator_create[DS]
    dc.l    .profile_iterator_create[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_iterator_create[PR]
    lwz     r12, T_profile_iterator_create_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_iterator_free ;;;;;

    toc
T_profile_iterator_free_ProcPtr:	; TOC relative address
    tc      profile_iterator_free_ProcPtr[TC], profile_iterator_free_ProcPtr[RW]
    csect   profile_iterator_free_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_iterator_free[DS]
    dc.l    .profile_iterator_free[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_iterator_free[PR]
    lwz     r12, T_profile_iterator_free_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_release ;;;;;

    toc
T_profile_release_ProcPtr:	; TOC relative address
    tc      profile_release_ProcPtr[TC], profile_release_ProcPtr[RW]
    csect   profile_release_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_release[DS]
    dc.l    .profile_release[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_release[PR]
    lwz     r12, T_profile_release_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_release_string ;;;;;

    toc
T_profile_release_string_ProcPtr:	; TOC relative address
    tc      profile_release_string_ProcPtr[TC], profile_release_string_ProcPtr[RW]
    csect   profile_release_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_release_string[DS]
    dc.l    .profile_release_string[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_release_string[PR]
    lwz     r12, T_profile_release_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_rename_section ;;;;;

    toc
T_profile_rename_section_ProcPtr:	; TOC relative address
    tc      profile_rename_section_ProcPtr[TC], profile_rename_section_ProcPtr[RW]
    csect   profile_rename_section_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_rename_section[DS]
    dc.l    .profile_rename_section[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_rename_section[PR]
    lwz     r12, T_profile_rename_section_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_ser_externalize ;;;;;

    toc
T_profile_ser_externalize_ProcPtr:	; TOC relative address
    tc      profile_ser_externalize_ProcPtr[TC], profile_ser_externalize_ProcPtr[RW]
    csect   profile_ser_externalize_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_ser_externalize[DS]
    dc.l    .profile_ser_externalize[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_ser_externalize[PR]
    lwz     r12, T_profile_ser_externalize_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_ser_internalize ;;;;;

    toc
T_profile_ser_internalize_ProcPtr:	; TOC relative address
    tc      profile_ser_internalize_ProcPtr[TC], profile_ser_internalize_ProcPtr[RW]
    csect   profile_ser_internalize_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_ser_internalize[DS]
    dc.l    .profile_ser_internalize[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_ser_internalize[PR]
    lwz     r12, T_profile_ser_internalize_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_ser_size ;;;;;

    toc
T_profile_ser_size_ProcPtr:	; TOC relative address
    tc      profile_ser_size_ProcPtr[TC], profile_ser_size_ProcPtr[RW]
    csect   profile_ser_size_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_ser_size[DS]
    dc.l    .profile_ser_size[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_ser_size[PR]
    lwz     r12, T_profile_ser_size_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; profile_update_relation ;;;;;

    toc
T_profile_update_relation_ProcPtr:	; TOC relative address
    tc      profile_update_relation_ProcPtr[TC], profile_update_relation_ProcPtr[RW]
    csect   profile_update_relation_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   profile_update_relation[DS]
    dc.l    .profile_update_relation[PR]
    dc.l    TOC[tc0]
    
    csect   .profile_update_relation[PR]
    lwz     r12, T_profile_update_relation_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; put_svc_key ;;;;;

    toc
T_put_svc_key_ProcPtr:	; TOC relative address
    tc      put_svc_key_ProcPtr[TC], put_svc_key_ProcPtr[RW]
    csect   put_svc_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   put_svc_key[DS]
    dc.l    .put_svc_key[PR]
    dc.l    TOC[tc0]
    
    csect   .put_svc_key[PR]
    lwz     r12, T_put_svc_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; read_service_key ;;;;;

    toc
T_read_service_key_ProcPtr:	; TOC relative address
    tc      read_service_key_ProcPtr[TC], read_service_key_ProcPtr[RW]
    csect   read_service_key_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   read_service_key[DS]
    dc.l    .read_service_key[PR]
    dc.l    TOC[tc0]
    
    csect   .read_service_key[PR]
    lwz     r12, T_read_service_key_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; remove_error_table ;;;;;

    toc
T_remove_error_table_ProcPtr:	; TOC relative address
    tc      remove_error_table_ProcPtr[TC], remove_error_table_ProcPtr[RW]
    csect   remove_error_table_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   remove_error_table[DS]
    dc.l    .remove_error_table[PR]
    dc.l    TOC[tc0]
    
    csect   .remove_error_table[PR]
    lwz     r12, T_remove_error_table_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr

;;;;; tkt_string ;;;;;

    toc
T_tkt_string_ProcPtr:	; TOC relative address
    tc      tkt_string_ProcPtr[TC], tkt_string_ProcPtr[RW]
    csect   tkt_string_ProcPtr[RW]
    ds.l    1
    ds.l    1
    
    csect   tkt_string[DS]
    dc.l    .tkt_string[PR]
    dc.l    TOC[tc0]
    
    csect   .tkt_string[PR]
    lwz     r12, T_tkt_string_ProcPtr(RTOC)
    lwz     r12, 0(r12)
    lwz     r0, 0(r12)
    mtctr   r0
    lwz     RTOC, 4(r12) ; Overwrite RTOC. Since we are called cross-fragment the caller restores ours
    bctr
