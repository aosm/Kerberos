## config/mac-pre.in
## common Macintosh prefix for all Makefile.in in the Kerberos V5 tree.

#
# MPW-style lines for the MakeFile.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.
#
# This first part is long enough that NFS/Share doesn't notice the non-ASCII
# characters in the rest of the file, so it claims that the file is type
# TEXT, which is what we want.  The non-ASCII chars are necessary for MPW 
# Make.

#
# End of MPW-style lines for MakeFile.
#

WHAT = mac

all:: all-$(WHAT)

clean:: clean-$(WHAT)

install:: install-$(WHAT)

check:: check-$(WHAT)

all-mac::
clean-mac::
install-mac::
check-mac::

# Directory syntax:
#
# begin absolute path
ABS=
# begin relative path
REL=:
# up-directory
U=
# path separator
S=:
# this is magic... should only be used for preceding a program invocation
C=:

BUILDTOP = @BUILDTOP@
srcdir = $(C)
VPATH = @srcdir@

# FIXME:  This doesn't translate to MPW yet, srcdir must be same as objdir.
# File in object dir can come from either the current dir or srcdir.
# 
# . : . "{srcdir}"

# Default rule that puts each file into separate segment.

.c.o: .c
	{CC} -sym on {DepDir}{Default}.c {CFLAGS} -s {Default} -o {TargDir}{Default}.c.o

CPPFLAGS = @CPPFLAGS@ -i {CIncludes}
DEFS = @DEFS@ $(CPPFLAGS)
CC = c
LD = link
# The funny quoting in the LDFLAGS is to avoid xxx.o being mangled by
# mac-mf.sed into xxx.c.o.
LDFLAGS=-t MPST -c "MPS " -sym on {Libraries}"Runtime."o {CLibraries}"StdClib."o {Libraries}"Interface."o
CCOPTS = @CCOPTS@
LIBS = @LIBS@
KRB5ROOT= @KRB5ROOT@
KRB4=@KRB4@
INSTALL=Duplicate -y
INSTALL_PROGRAM=Duplicate -y
INSTALL_DATA=Duplicate -y
INSTALL_SETUID=Duplicate -y

KRB5MANROOT = $(KRB5ROOT)$(S)man
ADMIN_BINDIR = $(KRB5ROOT)$(S)admin
SERVER_BINDIR = $(KRB5ROOT)$(S)sbin
CLIENT_BINDIR = $(KRB5ROOT)$(S)bin
ADMIN_MANDIR = $(KRB5MANROOT)$(S)man8
SERVER_MANDIR = $(KRB5MANROOT)$(S)man8
CLIENT_MANDIR = $(KRB5MANROOT)$(S)man1
FILE_MANDIR = $(KRB5MANROOT)$(S)man5
KRB5_LIBDIR = $(KRB5ROOT)$(S)lib
KRB5_INCDIR = $(KRB5ROOT)$(S)include
KRB5_INCSUBDIRS = \
	$(KRB5_INCDIR)$(S)krb5 \
	$(KRB5_INCDIR)$(S)asn.1 \
	$(KRB5_INCDIR)$(S)kerberosIV


RM = Delete -y -i
CP = Duplicate -y
MV = mv -f
CHMOD=chmod
RANLIB = echo
ARCHIVE = lib -o 
ARADD = @ARADD@
LN = Duplicate -y
AWK = @AWK@
LEX = @LEX@
LEXLIB = @LEXLIB@
YACC = @YACC@
MAKE = Set Echo 0; BuildProgram

# FIXME:  This won't work for srcdir != objdir.  But on the Mac, there
# is no easy way to build a relative or absolute path, because : means
# both the path separator, and the "go up a directory" indicator.
#SRCTOP = $(srcdir)$(S)$(BUILDTOP)
SRCTOP = $(BUILDTOP)
SUBDIRS = @subdirs@

TOPLIBD = $(BUILDTOP)$(S)lib

OBJEXT = c.o
LIBEXT = a
EXEEXT =

all::
